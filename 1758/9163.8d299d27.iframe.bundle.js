"use strict";(self.webpackChunk_alfalab_core_components=self.webpackChunk_alfalab_core_components||[]).push([[9163],{"./packages/input-autocomplete/src/Component.responsive.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{k:function(){return InputAutocomplete}});var _home_runner_work_core_components_core_components_node_modules_babel_runtime_helpers_esm_objectSpread2_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),_home_runner_work_core_components_core_components_node_modules_babel_runtime_helpers_esm_objectWithoutProperties_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_alfalab_core_components_mq__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./dist/mq/modern/index.js"),_desktop__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/input-autocomplete/src/desktop/index.ts"),_mobile__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./packages/input-autocomplete/src/mobile/index.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/react/jsx-runtime.js"),_excluded=["breakpoint","client","defaultMatchMediaValue","mobileProps"],InputAutocomplete=(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function(_ref,ref){var breakpoint=_ref.breakpoint,client=_ref.client,_ref$defaultMatchMedi=_ref.defaultMatchMediaValue,mobileProps=_ref.mobileProps,restProps=(0,_home_runner_work_core_components_core_components_node_modules_babel_runtime_helpers_esm_objectWithoutProperties_js__WEBPACK_IMPORTED_MODULE_5__.Z)(_ref,_excluded);return(0,_alfalab_core_components_mq__WEBPACK_IMPORTED_MODULE_1__.useIsDesktop)(breakpoint,void 0===_ref$defaultMatchMedi?void 0===client?void 0:"desktop"===client:_ref$defaultMatchMedi)?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_desktop__WEBPACK_IMPORTED_MODULE_2__.InputAutocompleteDesktop,(0,_home_runner_work_core_components_core_components_node_modules_babel_runtime_helpers_esm_objectSpread2_js__WEBPACK_IMPORTED_MODULE_6__.Z)((0,_home_runner_work_core_components_core_components_node_modules_babel_runtime_helpers_esm_objectSpread2_js__WEBPACK_IMPORTED_MODULE_6__.Z)({},restProps),{},{ref:ref})):(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_mobile__WEBPACK_IMPORTED_MODULE_3__.InputAutocompleteMobile,(0,_home_runner_work_core_components_core_components_node_modules_babel_runtime_helpers_esm_objectSpread2_js__WEBPACK_IMPORTED_MODULE_6__.Z)((0,_home_runner_work_core_components_core_components_node_modules_babel_runtime_helpers_esm_objectSpread2_js__WEBPACK_IMPORTED_MODULE_6__.Z)((0,_home_runner_work_core_components_core_components_node_modules_babel_runtime_helpers_esm_objectSpread2_js__WEBPACK_IMPORTED_MODULE_6__.Z)({},restProps),mobileProps),{},{ref:ref}))});InputAutocomplete.displayName="InputAutocomplete";try{InputAutocomplete.displayName="InputAutocomplete",InputAutocomplete.__docgenInfo={description:"",displayName:"InputAutocomplete",props:{mobileProps:{defaultValue:null,description:"Пропсы для мобильного компонента",name:"mobileProps",required:!1,type:{name:"MobileProps"}},breakpoint:{defaultValue:{value:"1024"},description:"Контрольная точка, с нее начинается desktop версия",name:"breakpoint",required:!1,type:{name:"number"}},client:{defaultValue:null,description:"Версия, которая будет использоваться при серверном рендеринге",name:"client",required:!1,type:{name:"enum",value:[{value:'"desktop"'},{value:'"mobile"'}]}},defaultMatchMediaValue:{defaultValue:{value:"client === undefined ? undefined : client === 'desktop'"},description:"Значение по-умолчанию для хука useMatchMedia\n@deprecated Используйте client",name:"defaultMatchMediaValue",required:!1,type:{name:"boolean | (() => boolean)"}},Input:{defaultValue:null,description:"Компонент ввода значения",name:"Input",required:!1,type:{name:'ComponentType<Omit<BaseInputProps, "FormControlComponent"> & { breakpoint?: number; client?: "desktop" | "mobile"; defaultMatchMediaValue?: boolean | ... 1 more ... | undefined; } & RefAttributes<...>> | undefined'}},inputProps:{defaultValue:null,description:"Пропсы, которые будут прокинуты в инпут",name:"inputProps",required:!1,type:{name:'(Omit<BaseInputProps, "FormControlComponent"> & { breakpoint?: number; client?: "desktop" | "mobile"; defaultMatchMediaValue?: boolean | ... 1 more ... | undefined; } & Record<...>) | undefined'}},value:{defaultValue:null,description:"Значение поля ввода",name:"value",required:!1,type:{name:"string"}},readOnly:{defaultValue:null,description:"Поле доступно только для чтения",name:"readOnly",required:!1,type:{name:"boolean"}},success:{defaultValue:null,description:"Отображение иконки успеха",name:"success",required:!1,type:{name:"boolean"}},onInput:{defaultValue:null,description:"Обработчик ввода",name:"onInput",required:!1,type:{name:"((value: string, reason?: OnInputTypeReason) => void)"}},size:{defaultValue:null,description:"Размер компонента\n@description s, m, l, xl deprecated, используйте вместо них 48, 56, 64, 72 соответственно",name:"size",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"l"'},{value:'"xl"'},{value:"40"},{value:"48"},{value:"56"},{value:"64"},{value:"72"}]}},onChange:{defaultValue:null,description:"Обработчик выбора",name:"onChange",required:!1,type:{name:"((payload: BaseSelectChangePayload) => void)"}},disabled:{defaultValue:null,description:"Управление возможностью выбора значения",name:"disabled",required:!1,type:{name:"boolean"}},multiple:{defaultValue:null,description:"Возможность выбрать несколько значений",name:"multiple",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"Атрибут name",name:"name",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Плейсхолдер поля",name:"placeholder",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"Дополнительный класс",name:"className",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"Атрибут id",name:"id",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Обработчик фокуса поля",name:"onFocus",required:!1,type:{name:"((event: FocusEvent<HTMLInputElement | HTMLDivElement, Element>) => void)"}},onBlur:{defaultValue:null,description:"Обработчик блюра поля",name:"onBlur",required:!1,type:{name:"((event: FocusEvent<HTMLInputElement | HTMLDivElement, Element>) => void)"}},onScroll:{defaultValue:null,description:"Обработчик скрола",name:"onScroll",required:!1,type:{name:"((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)"}},block:{defaultValue:null,description:"Растягивает компонент на ширину контейнера",name:"block",required:!1,type:{name:"boolean"}},clear:{defaultValue:null,description:"Флаг, показать крестик для очистки поля",name:"clear",required:!1,type:{name:"boolean"}},error:{defaultValue:null,description:"Отображение ошибки",name:"error",required:!1,type:{name:"ReactNode"}},hint:{defaultValue:null,description:"Подсказка под полем",name:"hint",required:!1,type:{name:"ReactNode"}},label:{defaultValue:null,description:"Лейбл поля",name:"label",required:!1,type:{name:"ReactNode"}},labelView:{defaultValue:null,description:"Вид лейбла внутри / снаружи",name:"labelView",required:!1,type:{name:"enum",value:[{value:'"inner"'},{value:'"outer"'}]}},fieldClassName:{defaultValue:null,description:"Дополнительный класс для поля",name:"fieldClassName",required:!1,type:{name:"string"}},onClear:{defaultValue:null,description:"Обработчик нажатия на крестик для очистки поля",name:"onClear",required:!1,type:{name:"((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void)"}},dataTestId:{defaultValue:null,description:"Идентификатор для систем автоматизированного тестирования.\nДля пункта меню используется модификатор -option, компонента поиска -search,\nкомпонента выпадающего меню -options-list, компонента BottomSheet -bottom-sheet,\nкомпонента поля -field, компонета FormControl -field-form-control",name:"dataTestId",required:!1,type:{name:"string"}},open:{defaultValue:null,description:"Управление открытием",name:"open",required:!1,type:{name:"boolean"}},popoverProps:{defaultValue:null,description:"Дополнительные пропсы для Popover",name:"popoverProps",required:!1,type:{name:'Omit<PopoverProps, "className" | "dataTestId" | "open" | "position" | "zIndex" | "update" | "anchorElement" | "preventFlip">'}},onOpen:{defaultValue:null,description:"Обработчик открытия\\закрытия селекта",name:"onOpen",required:!1,type:{name:"((payload: { open?: boolean; name?: string; }) => void) | undefined"}},updatePopover:{defaultValue:null,description:"Хранит функцию, с помощью которой можно обновить положение поповера",name:"updatePopover",required:!1,type:{name:"MutableRefObject<(() => void)>"}},preventFlip:{defaultValue:null,description:"Запрещает поповеру менять свою позицию.\nНапример, если места снизу недостаточно,то он все равно будет показан снизу",name:"preventFlip",required:!1,type:{name:"boolean"}},selected:{defaultValue:null,description:"Список value выбранных пунктов (controlled-селект)",name:"selected",required:!1,type:{name:"string | OptionShape | (string | OptionShape)[] | null"}},fieldProps:{defaultValue:null,description:"Пропсы, которые будут прокинуты в компонент поля",name:"fieldProps",required:!1,type:{name:"unknown"}},optionsListClassName:{defaultValue:null,description:"Дополнительный класс выпадающего меню",name:"optionsListClassName",required:!1,type:{name:"string"}},optionClassName:{defaultValue:null,description:"Дополнительный класс для пункта меню",name:"optionClassName",required:!1,type:{name:"string"}},optionGroupClassName:{defaultValue:null,description:"Дополнительный класс для компонента группы пунктов",name:"optionGroupClassName",required:!1,type:{name:"string"}},popperClassName:{defaultValue:null,description:"Дополнительный класс для поповера",name:"popperClassName",required:!1,type:{name:"string"}},options:{defaultValue:null,description:"Список вариантов выбора",name:"options",required:!0,type:{name:"(OptionShape | GroupShape)[]"}},defaultOpen:{defaultValue:null,description:"Начальное состояние селекта",name:"defaultOpen",required:!1,type:{name:"boolean"}},optionsSize:{defaultValue:null,description:"Размер пунктов меню\n@description s, m, l, xl deprecated, используйте вместо них 48, 56, 64, 72 соответственно",name:"optionsSize",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"l"'},{value:'"xl"'},{value:"40"},{value:"48"},{value:"56"},{value:"64"},{value:"72"}]}},optionsListWidth:{defaultValue:null,description:"Управляет шириной выпадающего меню.\nШирину определяет контент, либо ширина равна ширине поля",name:"optionsListWidth",required:!1,type:{name:"enum",value:[{value:'"content"'},{value:'"field"'}]}},allowUnselect:{defaultValue:null,description:"Позволяет снять выбранное значение",name:"allowUnselect",required:!1,type:{name:"boolean"}},closeOnSelect:{defaultValue:null,description:"Закрывать меню после выбора?",name:"closeOnSelect",required:!1,type:{name:"boolean"}},circularNavigation:{defaultValue:null,description:"При навигации с клавиатуры переходить от последнего пункта меню к первому и наоборот.",name:"circularNavigation",required:!1,type:{name:"boolean"}},popoverPosition:{defaultValue:null,description:"Позиционирование выпадающего списка",name:"popoverPosition",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'},{value:'"right"'},{value:'"left"'},{value:'"top-start"'},{value:'"top-end"'},{value:'"bottom-start"'},{value:'"bottom-end"'},{value:'"right-start"'},{value:'"right-end"'},{value:'"left-start"'},{value:'"left-end"'}]}},visibleOptions:{defaultValue:null,description:"Количество видимых пунктов меню (5 = 5.5)",name:"visibleOptions",required:!1,type:{name:"number"}},Arrow:{defaultValue:null,description:"Компонент стрелки",name:"Arrow",required:!1,type:{name:"false | ComponentType<ArrowProps> | null"}},optionsListProps:{defaultValue:null,description:"Пропсы, которые будут прокинуты в компонент списка",name:"optionsListProps",required:!1,type:{name:"unknown"}},optionProps:{defaultValue:null,description:"Пропсы, которые будут прокинуты в компонент пункта меню",name:"optionProps",required:!1,type:{name:"unknown"}},groupOptionProps:{defaultValue:null,description:"Пропсы, которые будут прокинуты в компонент группового пункта меню",name:"groupOptionProps",required:!1,type:{name:"AnyObject"}},OptionsList:{defaultValue:null,description:"Компонент выпадающего меню",name:"OptionsList",required:!1,type:{name:"ComponentType<OptionsListProps & RefAttributes<HTMLDivElement>>"}},Optgroup:{defaultValue:null,description:"Компонент группы",name:"Optgroup",required:!1,type:{name:"ComponentType<OptgroupProps>"}},Option:{defaultValue:null,description:"Компонент пункта меню",name:"Option",required:!1,type:{name:"ComponentType<OptionProps>"}},zIndexPopover:{defaultValue:null,description:"z-index поповера",name:"zIndexPopover",required:!1,type:{name:"number"}},showEmptyOptionsList:{defaultValue:null,description:"Показывать OptionsList, если он пустой",name:"showEmptyOptionsList",required:!1,type:{name:"boolean"}},limitDynamicOptionGroupSize:{defaultValue:null,description:"Ограничение динамического размера группы вариантов выбора",name:"limitDynamicOptionGroupSize",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/input-autocomplete/src/Component.responsive.tsx#InputAutocomplete"]={docgenInfo:InputAutocomplete.__docgenInfo,name:"InputAutocomplete",path:"packages/input-autocomplete/src/Component.responsive.tsx#InputAutocomplete"})}catch(__react_docgen_typescript_loader_error){}},"./packages/input-autocomplete/src/desktop/index.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{InputAutocompleteDesktop:function(){return InputAutocompleteDesktop}});var objectSpread2=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),objectWithoutProperties=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),react=__webpack_require__("./node_modules/react/index.js"),modern=__webpack_require__("./dist/popover/modern/index.js"),shared=__webpack_require__("./dist/select/modern/shared/index.js"),defineProperty=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),react_merge_refs_esm=__webpack_require__("./node_modules/react-merge-refs/dist/react-merge-refs.esm.js"),classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),desktop=__webpack_require__("./dist/input/modern/desktop/index.js"),enums=__webpack_require__("./packages/input-autocomplete/src/enums.ts"),index_module={arrow:"arrow_RWc1Z",error:"error_HXxNm"},jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),AutocompleteField=function(_ref){var label=_ref.label,_ref$labelView=_ref.labelView,placeholder=_ref.placeholder,size=_ref.size,Arrow=_ref.Arrow,_ref$Input=_ref.Input,Input=void 0===_ref$Input?desktop.InputDesktop:_ref$Input,value=_ref.value,error=_ref.error,success=_ref.success,hint=_ref.hint,disabled=_ref.disabled,readOnly=_ref.readOnly,onInput=_ref.onInput,_ref$inputProps=_ref.inputProps,inputProps=void 0===_ref$inputProps?{}:_ref$inputProps,innerProps=_ref.innerProps,dataTestId=_ref.dataTestId,inputRef=(0,react.useRef)(null),onClick=innerProps.onClick,onFocus=innerProps.onFocus,inputDisabled=disabled||readOnly,handleClick=(0,react.useCallback)(function(event){onClick&&onClick(event),inputRef.current&&inputRef.current.focus()},[onClick]);return(0,jsx_runtime.jsx)(Input,(0,objectSpread2.Z)((0,objectSpread2.Z)((0,objectSpread2.Z)({dataTestId:dataTestId},inputProps),innerProps),{},{wrapperRef:(0,react_merge_refs_esm.Z)([innerProps.ref,inputProps.wrapperRef]),ref:(0,react_merge_refs_esm.Z)([inputRef,inputProps.ref]),disabled:disabled,readOnly:readOnly,block:!0,label:label,labelView:void 0===_ref$labelView?"inner":_ref$labelView,placeholder:placeholder,size:size,error:error,success:success,hint:hint,onChange:function(_,payload){return null==onInput?void 0:onInput(payload.value,enums.V.Change)},onClick:inputDisabled?void 0:handleClick,onFocus:inputDisabled?void 0:onFocus,autoComplete:"off",value:value,rightAddons:(Arrow||inputProps.rightAddons)&&(0,jsx_runtime.jsxs)(react.Fragment,{children:[inputProps.rightAddons,Arrow&&(0,jsx_runtime.jsx)("span",{className:classnames_default()(index_module.arrow,(0,defineProperty.Z)({},index_module.error,error)),children:Arrow})]})}))};try{AutocompleteField.displayName="AutocompleteField",AutocompleteField.__docgenInfo={description:"",displayName:"AutocompleteField",props:{className:{defaultValue:null,description:"Дополнительный класс",name:"className",required:!1,type:{name:"string"}},selected:{defaultValue:null,description:"Выбранный пункт",name:"selected",required:!1,type:{name:"OptionShape"}},selectedMultiple:{defaultValue:null,description:"Список выбранных пунктов",name:"selectedMultiple",required:!1,type:{name:"OptionShape[]"}},setSelectedItems:{defaultValue:null,description:"Метод для ручной установки выбранных пунктов",name:"setSelectedItems",required:!0,type:{name:"(selected: OptionShape[]) => void"}},toggleMenu:{defaultValue:null,description:"Метод переключающий видимость выпадающего списка",name:"toggleMenu",required:!0,type:{name:"() => void"}},multiple:{defaultValue:null,description:"Флаг, можно ли выбрать несколько значений",name:"multiple",required:!1,type:{name:"boolean"}},open:{defaultValue:null,description:"Флаг, открыто ли меню",name:"open",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"Флаг, поле заблокировано",name:"disabled",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"Лейбл поля",name:"label",required:!1,type:{name:"ReactNode"}},labelView:{defaultValue:{value:"inner"},description:"Вид лейбла внутри / снаружи",name:"labelView",required:!1,type:{name:"enum",value:[{value:'"inner"'},{value:'"outer"'}]}},placeholder:{defaultValue:null,description:"Плейсхолдер поля",name:"placeholder",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"Отображение ошибки",name:"error",required:!1,type:{name:"ReactNode"}},success:{defaultValue:null,description:"Отображение иконки успеха",name:"success",required:!1,type:{name:"boolean"}},hint:{defaultValue:null,description:"Подсказка под полем",name:"hint",required:!1,type:{name:"ReactNode"}},Arrow:{defaultValue:null,description:"Компонент стрелки",name:"Arrow",required:!1,type:{name:"false | ReactElement<any, string | JSXElementConstructor<any>> | null"}},valueRenderer:{defaultValue:null,description:"Кастомный рендер выбранного пункта",name:"valueRenderer",required:!1,type:{name:"(({ selected, selectedMultiple, }: { selected?: OptionShape; selectedMultiple: OptionShape[]; }) => ReactNode)"}},innerProps:{defaultValue:null,description:"Внутренние свойства, которые должны быть установлены компоненту.",name:"innerProps",required:!0,type:{name:"{ onBlur?: ((event: FocusEvent<HTMLInputElement | HTMLDivElement, Element>) => void) | undefined; onFocus?: ((event: FocusEvent<HTMLInputElement | HTMLDivElement, Element>) => void) | undefined; onClick?: ((event: MouseEvent<...>) => void) | undefined; tabIndex?: number | undefined; id: string; } & RefAttributes<......"}},dataTestId:{defaultValue:null,description:"Идентификатор для систем автоматизированного тестирования",name:"dataTestId",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"Значение поля ввода",name:"value",required:!1,type:{name:"string"}},readOnly:{defaultValue:null,description:"Поле доступно только для чтения",name:"readOnly",required:!1,type:{name:"boolean"}},onInput:{defaultValue:null,description:"Обработчик ввода",name:"onInput",required:!1,type:{name:"((value: string, reason?: OnInputTypeReason) => void)"}},Input:{defaultValue:{value:"forwardRef<HTMLInputElement, InputDesktopProps>((restProps, ref) => (\n    <BaseInput {...restProps} FormControlComponent={FormControlDesktop} ref={ref} />\n))"},description:"Компонент ввода значения",name:"Input",required:!1,type:{name:'ComponentType<Omit<BaseInputProps, "FormControlComponent"> & { breakpoint?: number; client?: "desktop" | "mobile"; defaultMatchMediaValue?: boolean | ... 1 more ... | undefined; } & RefAttributes<...>> | undefined'}},inputProps:{defaultValue:{value:"{}"},description:"Пропсы, которые будут прокинуты в инпут",name:"inputProps",required:!1,type:{name:'(Omit<BaseInputProps, "FormControlComponent"> & { breakpoint?: number; client?: "desktop" | "mobile"; defaultMatchMediaValue?: boolean | ... 1 more ... | undefined; } & Record<...>) | undefined'}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/input-autocomplete/src/autocomplete-field/Component.tsx#AutocompleteField"]={docgenInfo:AutocompleteField.__docgenInfo,name:"AutocompleteField",path:"packages/input-autocomplete/src/autocomplete-field/Component.tsx#AutocompleteField"})}catch(__react_docgen_typescript_loader_error){}var _excluded=["OptionsList","Optgroup","Option","Input","inputProps","onInput","value","success","readOnly","closeOnSelect","options"],InputAutocompleteDesktop=(0,react.forwardRef)(function(_ref,ref){var _ref$OptionsList=_ref.OptionsList,OptionsList=void 0===_ref$OptionsList?shared.OptionsList:_ref$OptionsList,_ref$Optgroup=_ref.Optgroup,Optgroup=void 0===_ref$Optgroup?shared.Optgroup:_ref$Optgroup,_ref$Option=_ref.Option,Option=void 0===_ref$Option?shared.Option:_ref$Option,Input=_ref.Input,_ref$inputProps=_ref.inputProps,onInput=_ref.onInput,value=_ref.value,success=_ref.success,readOnly=_ref.readOnly,_ref$closeOnSelect=_ref.closeOnSelect,options=_ref.options,restProps=(0,objectWithoutProperties.Z)(_ref,_excluded);return(0,jsx_runtime.jsx)(shared.BaseSelect,(0,objectSpread2.Z)((0,objectSpread2.Z)({view:"desktop",Popover:modern.Popover,ref:ref,autocomplete:!0,options:options,closeOnSelect:void 0!==_ref$closeOnSelect&&_ref$closeOnSelect,Option:Option,Field:AutocompleteField,Optgroup:Optgroup,OptionsList:OptionsList},restProps),{},{fieldProps:(0,objectSpread2.Z)((0,objectSpread2.Z)({},restProps.fieldProps),{},{Input:Input,onInput:onInput,value:value,inputProps:void 0===_ref$inputProps?{}:_ref$inputProps,readOnly:readOnly,success:success})}))});try{InputAutocompleteDesktop.displayName="InputAutocompleteDesktop",InputAutocompleteDesktop.__docgenInfo={description:"",displayName:"InputAutocompleteDesktop",props:{Input:{defaultValue:null,description:"Компонент ввода значения",name:"Input",required:!1,type:{name:'ComponentType<Omit<BaseInputProps, "FormControlComponent"> & { breakpoint?: number; client?: "desktop" | "mobile"; defaultMatchMediaValue?: boolean | ... 1 more ... | undefined; } & RefAttributes<...>> | undefined'}},inputProps:{defaultValue:{value:"{}"},description:"Пропсы, которые будут прокинуты в инпут",name:"inputProps",required:!1,type:{name:'(Omit<BaseInputProps, "FormControlComponent"> & { breakpoint?: number; client?: "desktop" | "mobile"; defaultMatchMediaValue?: boolean | ... 1 more ... | undefined; } & Record<...>) | undefined'}},value:{defaultValue:null,description:"Значение поля ввода",name:"value",required:!1,type:{name:"string"}},readOnly:{defaultValue:null,description:"Поле доступно только для чтения",name:"readOnly",required:!1,type:{name:"boolean"}},success:{defaultValue:null,description:"Отображение иконки успеха",name:"success",required:!1,type:{name:"boolean"}},onInput:{defaultValue:null,description:"Обработчик ввода",name:"onInput",required:!1,type:{name:"((value: string, reason?: OnInputTypeReason) => void)"}},size:{defaultValue:null,description:"Размер компонента\n@description s, m, l, xl deprecated, используйте вместо них 48, 56, 64, 72 соответственно",name:"size",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"l"'},{value:'"xl"'},{value:"40"},{value:"48"},{value:"56"},{value:"64"},{value:"72"}]}},onChange:{defaultValue:null,description:"Обработчик выбора",name:"onChange",required:!1,type:{name:"((payload: BaseSelectChangePayload) => void)"}},disabled:{defaultValue:null,description:"Управление возможностью выбора значения",name:"disabled",required:!1,type:{name:"boolean"}},multiple:{defaultValue:null,description:"Возможность выбрать несколько значений",name:"multiple",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"Атрибут name",name:"name",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Плейсхолдер поля",name:"placeholder",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"Дополнительный класс",name:"className",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"Атрибут id",name:"id",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Обработчик фокуса поля",name:"onFocus",required:!1,type:{name:"((event: FocusEvent<HTMLInputElement | HTMLDivElement, Element>) => void)"}},onBlur:{defaultValue:null,description:"Обработчик блюра поля",name:"onBlur",required:!1,type:{name:"((event: FocusEvent<HTMLInputElement | HTMLDivElement, Element>) => void)"}},onScroll:{defaultValue:null,description:"Обработчик скрола",name:"onScroll",required:!1,type:{name:"((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)"}},block:{defaultValue:null,description:"Растягивает компонент на ширину контейнера",name:"block",required:!1,type:{name:"boolean"}},clear:{defaultValue:null,description:"Флаг, показать крестик для очистки поля",name:"clear",required:!1,type:{name:"boolean"}},error:{defaultValue:null,description:"Отображение ошибки",name:"error",required:!1,type:{name:"ReactNode"}},hint:{defaultValue:null,description:"Подсказка под полем",name:"hint",required:!1,type:{name:"ReactNode"}},label:{defaultValue:null,description:"Лейбл поля",name:"label",required:!1,type:{name:"ReactNode"}},labelView:{defaultValue:null,description:"Вид лейбла внутри / снаружи",name:"labelView",required:!1,type:{name:"enum",value:[{value:'"inner"'},{value:'"outer"'}]}},fieldClassName:{defaultValue:null,description:"Дополнительный класс для поля",name:"fieldClassName",required:!1,type:{name:"string"}},onClear:{defaultValue:null,description:"Обработчик нажатия на крестик для очистки поля",name:"onClear",required:!1,type:{name:"((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void)"}},dataTestId:{defaultValue:null,description:"Идентификатор для систем автоматизированного тестирования.\nДля пункта меню используется модификатор -option, компонента поиска -search,\nкомпонента выпадающего меню -options-list, компонента BottomSheet -bottom-sheet,\nкомпонента поля -field, компонета FormControl -field-form-control",name:"dataTestId",required:!1,type:{name:"string"}},open:{defaultValue:null,description:"Управление открытием",name:"open",required:!1,type:{name:"boolean"}},popoverProps:{defaultValue:null,description:"Дополнительные пропсы для Popover",name:"popoverProps",required:!1,type:{name:'Omit<PopoverProps, "className" | "dataTestId" | "open" | "position" | "zIndex" | "update" | "anchorElement" | "preventFlip">'}},onOpen:{defaultValue:null,description:"Обработчик открытия\\закрытия селекта",name:"onOpen",required:!1,type:{name:"((payload: { open?: boolean; name?: string; }) => void) | undefined"}},updatePopover:{defaultValue:null,description:"Хранит функцию, с помощью которой можно обновить положение поповера",name:"updatePopover",required:!1,type:{name:"MutableRefObject<(() => void)>"}},preventFlip:{defaultValue:null,description:"Запрещает поповеру менять свою позицию.\nНапример, если места снизу недостаточно,то он все равно будет показан снизу",name:"preventFlip",required:!1,type:{name:"boolean"}},selected:{defaultValue:null,description:"Список value выбранных пунктов (controlled-селект)",name:"selected",required:!1,type:{name:"string | OptionShape | (string | OptionShape)[] | null"}},fieldProps:{defaultValue:null,description:"Пропсы, которые будут прокинуты в компонент поля",name:"fieldProps",required:!1,type:{name:"unknown"}},optionsListClassName:{defaultValue:null,description:"Дополнительный класс выпадающего меню",name:"optionsListClassName",required:!1,type:{name:"string"}},optionClassName:{defaultValue:null,description:"Дополнительный класс для пункта меню",name:"optionClassName",required:!1,type:{name:"string"}},optionGroupClassName:{defaultValue:null,description:"Дополнительный класс для компонента группы пунктов",name:"optionGroupClassName",required:!1,type:{name:"string"}},popperClassName:{defaultValue:null,description:"Дополнительный класс для поповера",name:"popperClassName",required:!1,type:{name:"string"}},options:{defaultValue:null,description:"Список вариантов выбора",name:"options",required:!0,type:{name:"(OptionShape | GroupShape)[]"}},defaultOpen:{defaultValue:null,description:"Начальное состояние селекта",name:"defaultOpen",required:!1,type:{name:"boolean"}},optionsSize:{defaultValue:null,description:"Размер пунктов меню\n@description s, m, l, xl deprecated, используйте вместо них 48, 56, 64, 72 соответственно",name:"optionsSize",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"l"'},{value:'"xl"'},{value:"40"},{value:"48"},{value:"56"},{value:"64"},{value:"72"}]}},optionsListWidth:{defaultValue:null,description:"Управляет шириной выпадающего меню.\nШирину определяет контент, либо ширина равна ширине поля",name:"optionsListWidth",required:!1,type:{name:"enum",value:[{value:'"content"'},{value:'"field"'}]}},allowUnselect:{defaultValue:null,description:"Позволяет снять выбранное значение",name:"allowUnselect",required:!1,type:{name:"boolean"}},closeOnSelect:{defaultValue:{value:"false"},description:"Закрывать меню после выбора?",name:"closeOnSelect",required:!1,type:{name:"boolean"}},circularNavigation:{defaultValue:null,description:"При навигации с клавиатуры переходить от последнего пункта меню к первому и наоборот.",name:"circularNavigation",required:!1,type:{name:"boolean"}},popoverPosition:{defaultValue:null,description:"Позиционирование выпадающего списка",name:"popoverPosition",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'},{value:'"right"'},{value:'"left"'},{value:'"top-start"'},{value:'"top-end"'},{value:'"bottom-start"'},{value:'"bottom-end"'},{value:'"right-start"'},{value:'"right-end"'},{value:'"left-start"'},{value:'"left-end"'}]}},visibleOptions:{defaultValue:null,description:"Количество видимых пунктов меню (5 = 5.5)",name:"visibleOptions",required:!1,type:{name:"number"}},Arrow:{defaultValue:null,description:"Компонент стрелки",name:"Arrow",required:!1,type:{name:"false | ComponentType<ArrowProps> | null"}},optionsListProps:{defaultValue:null,description:"Пропсы, которые будут прокинуты в компонент списка",name:"optionsListProps",required:!1,type:{name:"unknown"}},optionProps:{defaultValue:null,description:"Пропсы, которые будут прокинуты в компонент пункта меню",name:"optionProps",required:!1,type:{name:"unknown"}},groupOptionProps:{defaultValue:null,description:"Пропсы, которые будут прокинуты в компонент группового пункта меню",name:"groupOptionProps",required:!1,type:{name:"AnyObject"}},OptionsList:{defaultValue:{value:"forwardRef<HTMLDivElement, OptionsListProps>(\n    (\n        {\n            size = 48,\n            className,\n            optionGroupClassName,\n            footerClassName,\n            scrollbarClassName,\n            Option,\n            getOptionProps,\n            groupOptionProps = {},\n            options = [],\n            Optgroup = DefaultOptgroup,\n            dataTestId,\n            emptyPlaceholder,\n            visibleOptions = DEFAULT_VISIBLE_OPTIONS,\n            onScroll,\n            open,\n            header,\n            footer,\n            showFooter = true,\n            optionsListWidth,\n            nativeScrollbar: nativeScrollbarProp,\n            flatOptions = [],\n            setHighlightedIndex,\n            selectedItems,\n            search,\n            setSelectedItems,\n            multiple,\n            limitDynamicOptionGroupSize = false,\n        },\n        ref,\n    ) => {\n        const [scrollTop, setScrollTop] = useState(true);\n        const [scrollBottom, setScrollBottom] = useState(false);\n\n        const query = '(max-width: 1023px)';\n        let [nativeScrollbar] = useMatchMedia(query, () =>\n            isClient() ? window.matchMedia(query).matches : true,\n        );\n\n        nativeScrollbar = Boolean(nativeScrollbarProp ?? nativeScrollbar);\n\n        const handleScroll = useCallback(\n            (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n                const scrolledToHeader = event.currentTarget.scrollTop <= 0;\n                const scrolledToFooter =\n                    event.currentTarget.scrollHeight - event.currentTarget.offsetHeight <=\n                    event.currentTarget.scrollTop;\n\n                setScrollTop(scrolledToHeader);\n                setScrollBottom(scrolledToFooter);\n\n                onScroll?.(event);\n            },\n            [onScroll],\n        );\n\n        const renderOption = (option: OptionShape, index: number) => (\n            <Option key={option.key} {...getOptionProps(option, index)} />\n        );\n\n        const listRef = useRef<HTMLDivElement>(null);\n        const scrollbarRef = useRef<HTMLDivElement>(null);\n        const counter = createCounter();\n        const renderGroup = (group: GroupShape) => {\n            const groupSelectedItems = selectedItems?.filter(({ key: selectedItemKey }) =>\n                group.options.some((option) => option.key === selectedItemKey),\n            );\n            const handleSelectedItems = (items: OptionShape[]) => {\n                setSelectedItems(\n                    (\n                        selectedItems?.filter(\n                            ({ key: selectedItemKey }) =>\n                                !group.options.some((option) => option.key === selectedItemKey),\n                        ) ?? []\n                    ).concat(items),\n                );\n            };\n\n            return (\n                <Optgroup\n                    className={optionGroupClassName}\n                    label={group.label}\n                    key={group.label}\n                    size={size}\n                    options={group.options}\n                    selectedItems={groupSelectedItems}\n                    setSelectedItems={handleSelectedItems}\n                    search={search}\n                    multiple={multiple}\n                    {...groupOptionProps}\n                >\n                    {group.options.map((option) => renderOption(option, counter()))}\n                </Optgroup>\n            );\n        };\n\n        const actualOptionsCount = limitDynamicOptionGroupSize && options.length > 0;\n\n        const [measured, height] = useVisibleOptions({\n            visibleOptions,\n            listRef,\n            open,\n            options,\n            actualOptionsCount,\n            size: actualOptionsCount\n                ? (() => {\n                      switch (typeof size) {\n                          case 'string':\n                              throw new Error(\n                                  'OptionsList with `limitDynamicOptionGroupSize` enabled needs a `size` with number type',\n                              );\n                          default:\n                              return size;\n                      }\n                  })()\n                : undefined,\n        });\n\n        if (options.length === 0 && !emptyPlaceholder && !header && !footer) {\n            return null;\n        }\n\n        const renderListItems = () => (\n            <React.Fragment>\n                {options.map((option) =>\n                    isGroup(option) ? renderGroup(option) : renderOption(option, counter()),\n                )}\n\n                {emptyPlaceholder && options.length === 0 && (\n                    <div className={styles.emptyPlaceholder}>{emptyPlaceholder}</div>\n                )}\n            </React.Fragment>\n        );\n\n        const renderWithCustomScrollbar = () => {\n            const scrollableNodeProps = {\n                onScroll: handleScroll,\n                'data-test-id': dataTestId,\n                ref: ref as React.RefObject<HTMLDivElement>,\n            };\n\n            return (\n                <Scrollbar\n                    className={cn(styles.scrollable, scrollbarClassName)}\n                    ref={scrollbarRef}\n                    style={{ height }}\n                    horizontalAutoStretch={optionsListWidth === 'content'}\n                    scrollableNodeProps={scrollableNodeProps}\n                    contentNodeProps={{ ref: listRef }}\n                    maskProps={{\n                        /*\n                         * Для корректного подсчета высоты опций(иначе для optionsListWidth: 'field'\n                         * высота опции всегда будет равна высоте одной строчки)\n                         */\n                        className: cn({\n                            [styles.mask]: optionsListWidth === 'content' && !measured,\n                        }),\n                    }}\n                >\n                    {renderListItems()}\n                </Scrollbar>\n            );\n        };\n\n        const renderWithNativeScrollbar = () => (\n            <div\n                className={cn(styles.scrollable, scrollbarClassName)}\n                ref={mergeRefs([listRef, ref])}\n                onScroll={handleScroll}\n                style={{ height }}\n            >\n                {renderListItems()}\n            </div>\n        );\n\n        const resetHighlightedIndex = () => setHighlightedIndex?.(-1);\n\n        return (\n            <div\n                {...(nativeScrollbar && { 'data-test-id': dataTestId })}\n                className={cn(styles.optionsList, styles[SIZE_TO_CLASSNAME_MAP[size]], className)}\n            >\n                {header && (\n                    <div\n                        className={cn(styles.optionsListHeader, {\n                            [styles.headerHighlighted]: !scrollTop,\n                        })}\n                        onMouseEnter={resetHighlightedIndex}\n                    >\n                        {header}\n                    </div>\n                )}\n\n                {nativeScrollbar ? renderWithNativeScrollbar() : renderWithCustomScrollbar()}\n\n                {showFooter && footer && (\n                    <div\n                        onMouseEnter={resetHighlightedIndex}\n                        className={cn(styles.optionsListFooter, footerClassName, {\n                            [styles.withBorder]:\n                                visibleOptions &&\n                                flatOptions.length > visibleOptions &&\n                                !scrollBottom,\n                        })}\n                    >\n                        {footer}\n                    </div>\n                )}\n            </div>\n        );\n    },\n)"},description:"Компонент выпадающего меню",name:"OptionsList",required:!1,type:{name:"ComponentType<OptionsListProps & RefAttributes<HTMLDivElement>>"}},Optgroup:{defaultValue:{value:"({ children, className, label, size = 48 }: OptgroupProps) => (\n    <React.Fragment>\n        <div className={cn(styles.optgroup, className, styles[SIZE_TO_CLASSNAME_MAP[size]])}>\n            <span className={styles.label}>{label}</span>\n        </div>\n        {children}\n    </React.Fragment>\n)"},description:"Компонент группы",name:"Optgroup",required:!1,type:{name:"ComponentType<OptgroupProps>"}},Option:{defaultValue:{value:"({mobile, ...props}: OptionProps) =>\n    mobile ? <OptionMobile {...props} /> : <OptionDesktop {...props} />"},description:"Компонент пункта меню",name:"Option",required:!1,type:{name:"ComponentType<OptionProps>"}},zIndexPopover:{defaultValue:null,description:"z-index поповера",name:"zIndexPopover",required:!1,type:{name:"number"}},showEmptyOptionsList:{defaultValue:null,description:"Показывать OptionsList, если он пустой",name:"showEmptyOptionsList",required:!1,type:{name:"boolean"}},limitDynamicOptionGroupSize:{defaultValue:null,description:"Ограничение динамического размера группы вариантов выбора",name:"limitDynamicOptionGroupSize",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/input-autocomplete/src/desktop/Component.desktop.tsx#InputAutocompleteDesktop"]={docgenInfo:InputAutocompleteDesktop.__docgenInfo,name:"InputAutocompleteDesktop",path:"packages/input-autocomplete/src/desktop/Component.desktop.tsx#InputAutocompleteDesktop"})}catch(__react_docgen_typescript_loader_error){}},"./packages/input-autocomplete/src/enums.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{V:function(){return OnInputReason1}});var OnInputReason,OnInputReason1=((OnInputReason={}).Close="close",OnInputReason.Change="change",OnInputReason)},"./packages/input-autocomplete/src/mobile/index.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{InputAutocompleteMobile:function(){return InputAutocompleteMobile},InputAutocompleteMobileProps:function(){return types_namespaceObject.InputAutocompleteMobileProps},InputAutocompleteModalMobile:function(){return InputAutocompleteModalMobile}});var types_namespaceObject={};__webpack_require__.r(types_namespaceObject);var defineProperty=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),objectSpread2=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),slicedToArray=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/slicedToArray.js"),objectWithoutProperties=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),react=__webpack_require__("./node_modules/react/index.js"),react_merge_refs_esm=__webpack_require__("./node_modules/react-merge-refs/dist/react-merge-refs.esm.js"),index_esm=__webpack_require__("./node_modules/@maskito/core/index.esm.js"),classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),throttle=__webpack_require__("./node_modules/lodash/throttle.js"),throttle_default=__webpack_require__.n(throttle),mobile=__webpack_require__("./dist/select/modern/mobile/index.js"),shared=__webpack_require__("./dist/select/modern/shared/index.js"),modern=__webpack_require__("./dist/shared/modern/index.js"),modern_mobile=__webpack_require__("./dist/form-control/modern/mobile/index.js"),modern_shared=__webpack_require__("./dist/input/modern/shared/index.js"),status_badge_modern=__webpack_require__("./dist/status-badge/modern/index.js"),hook=__webpack_require__("./node_modules/@alfalab/hooks/dist/esm/useFocus/hook.js"),index_module={component:"component_shmZr",field:"field_lHc4C",disabled:"disabled_fvYlN",errorIcon:"errorIcon_FCtSq",successIcon:"successIcon_CydL3",placeholder:"placeholder__30Tu",contentWrapper:"contentWrapper_sbKRl",value:"value_GSNlj",focusVisible:"focusVisible_lmfo8"},jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),_excluded=["size","open","disabled","value","innerProps","dataTestId","fieldClassName","labelView","placeholder","Arrow","valueRenderer","toggleMenu","setSelectedItems","selectedMultiple","FormControlComponent","rightAddons","error","readOnly","clear","success","onClear","onInput","colors"],_excluded2=["tabIndex"],AutocompleteMobileField=function(_ref){var _ref$size=_ref.size,size=void 0===_ref$size?56:_ref$size,open=_ref.open,disabled=_ref.disabled,value=_ref.value,innerProps=_ref.innerProps,dataTestId=_ref.dataTestId,fieldClassName=_ref.fieldClassName,_ref$labelView=_ref.labelView,labelView=void 0===_ref$labelView?"inner":_ref$labelView,placeholder=_ref.placeholder,Arrow=_ref.Arrow,rightAddons=(_ref.valueRenderer,_ref.toggleMenu,_ref.setSelectedItems,_ref.selectedMultiple,_ref.FormControlComponent,_ref.rightAddons),error=_ref.error,readOnly=_ref.readOnly,clear=_ref.clear,success=_ref.success,onClear=_ref.onClear,_ref$colors=(_ref.onInput,_ref.colors),colors=void 0===_ref$colors?"default":_ref$colors,restProps=(0,objectWithoutProperties.Z)(_ref,_excluded),_useState=(0,react.useState)(!1),_useState2=(0,slicedToArray.Z)(_useState,2),focused=_useState2[0],setFocused=_useState2[1],wrapperRef=(0,react.useRef)(null),_useFocus=(0,hook.K)(wrapperRef,"keyboard"),focusVisible=(0,slicedToArray.Z)(_useFocus,1)[0],filled=!!value,showPlaceholder=placeholder&&!filled&&"outer"===labelView,clearButtonVisible=clear&&filled&&!disabled&&!readOnly,tabIndex=innerProps.tabIndex,restInnerProps=(0,objectWithoutProperties.Z)(innerProps,_excluded2),formRightAddons=(Arrow||rightAddons||clearButtonVisible||error||success)&&(0,jsx_runtime.jsxs)(react.Fragment,{children:[clearButtonVisible&&(0,jsx_runtime.jsx)(modern_shared.ClearButton,{onClick:onClear,disabled:disabled,colors:colors}),rightAddons,Arrow,error&&(0,jsx_runtime.jsx)("div",{className:index_module.errorIcon,"data-addon":"error-icon",children:(0,jsx_runtime.jsx)(status_badge_modern.StatusBadge,{view:"negative-alert",size:40===size?16:20,dataTestId:(0,modern.getDataTestId)(dataTestId,"error-icon")})}),success&&!error&&(0,jsx_runtime.jsx)("div",{className:index_module.successIcon,children:(0,jsx_runtime.jsx)(status_badge_modern.StatusBadge,{view:"positive-checkmark",size:40===size?16:20,dataTestId:(0,modern.getDataTestId)(dataTestId,"success-icon")})})]});return(0,jsx_runtime.jsx)("div",{className:index_module.component,ref:wrapperRef,onFocus:function onFocus(){return setFocused(!0)},onBlur:function onBlur(){return setFocused(!1)},children:(0,jsx_runtime.jsx)(modern_mobile.FormControlMobile,(0,objectSpread2.Z)((0,objectSpread2.Z)((0,objectSpread2.Z)({fieldClassName:classnames_default()(index_module.field,fieldClassName,(0,defineProperty.Z)((0,defineProperty.Z)({},index_module.disabled,disabled),index_module.focusVisible,focusVisible)),block:!0,size:size,focused:focused,disabled:disabled,filled:filled,labelView:labelView,dataTestId:(0,modern.getDataTestId)(dataTestId,"form-control"),tabIndex:open?void 0:tabIndex},restProps),restInnerProps),{},{readOnly:readOnly,colors:colors,error:error,rightAddons:formRightAddons,children:(0,jsx_runtime.jsxs)("div",{className:index_module.contentWrapper,children:[showPlaceholder&&(0,jsx_runtime.jsx)("span",{className:index_module.placeholder,children:placeholder}),filled&&(0,jsx_runtime.jsx)("div",{className:index_module.value,children:value})]})}))})};try{AutocompleteMobileField.displayName="AutocompleteMobileField",AutocompleteMobileField.__docgenInfo={description:"",displayName:"AutocompleteMobileField",props:{size:{defaultValue:{value:"56"},description:"Размер компонента\n@description s, m, l, xl deprecated, используйте вместо них 48, 56, 64, 72 соответственно",name:"size",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"l"'},{value:'"xl"'},{value:"40"},{value:"48"},{value:"56"},{value:"64"},{value:"72"}]}},disabled:{defaultValue:null,description:"Заблокированное состояние",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"Cостояние только для чтения",name:"readOnly",required:!1,type:{name:"boolean"}},block:{defaultValue:null,description:"Растягивает компонент на ширину контейнера",name:"block",required:!1,type:{name:"boolean"}},colors:{defaultValue:{value:"default"},description:"Набор цветов для компонента",name:"colors",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"inverted"'}]}},error:{defaultValue:null,description:"Отображение ошибки",name:"error",required:!1,type:{name:"ReactNode"}},hint:{defaultValue:null,description:"Текст подсказки",name:"hint",required:!1,type:{name:"ReactNode"}},label:{defaultValue:null,description:"Лейбл компонента",name:"label",required:!1,type:{name:"ReactNode"}},labelView:{defaultValue:{value:"inner"},description:"Вид лейбла внутри / снаружи",name:"labelView",required:!1,type:{name:"enum",value:[{value:'"inner"'},{value:'"outer"'}]}},leftAddons:{defaultValue:null,description:"Слот слева",name:"leftAddons",required:!1,type:{name:"ReactNode"}},rightAddons:{defaultValue:null,description:"Слот справа",name:"rightAddons",required:!1,type:{name:"ReactNode"}},leftAddonsProps:{defaultValue:null,description:"Свойства для обертки левых аддонов",name:"leftAddonsProps",required:!1,type:{name:"HTMLAttributes<HTMLDivElement>"}},rightAddonsProps:{defaultValue:null,description:"Свойства для обертки правых аддонов",name:"rightAddonsProps",required:!1,type:{name:"HTMLAttributes<HTMLDivElement>"}},bottomAddons:{defaultValue:null,description:"Слот под полем",name:"bottomAddons",required:!1,type:{name:"ReactNode"}},fieldClassName:{defaultValue:null,description:"Дополнительный класс для поля",name:"fieldClassName",required:!1,type:{name:"string"}},labelClassName:{defaultValue:null,description:"Дополнительный класс для лейбла",name:"labelClassName",required:!1,type:{name:"string"}},addonsClassName:{defaultValue:null,description:"Дополнительный класс для аддонов",name:"addonsClassName",required:!1,type:{name:"string"}},dataTestId:{defaultValue:null,description:"Идентификатор для систем автоматизированного тестирования.\nДля слота слева используется модификатор -left-addons, слота справа -right-addons,\nошибки -error-message, текста подсказки -hint, внутренней части компонента -inner",name:"dataTestId",required:!1,type:{name:"string"}},filled:{defaultValue:null,description:"Заполненное состояние",name:"filled",required:!1,type:{name:"boolean"}},focused:{defaultValue:null,description:"Выбранное (фокус) состояние",name:"focused",required:!1,type:{name:"boolean"}},inputWrapperClassName:{defaultValue:null,description:"Дополнительный класс для поля",name:"inputWrapperClassName",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"Значение поля ввода",name:"value",required:!1,type:{name:"string"}},FormControlComponent:{defaultValue:null,description:"Компонент FormControl",name:"FormControlComponent",required:!1,type:{name:"ElementType<any>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/input-autocomplete/src/autocomplete-mobile-field/Component.tsx#AutocompleteMobileField"]={docgenInfo:AutocompleteMobileField.__docgenInfo,name:"AutocompleteMobileField",path:"packages/input-autocomplete/src/autocomplete-mobile-field/Component.tsx#AutocompleteMobileField"})}catch(__react_docgen_typescript_loader_error){}var enums=__webpack_require__("./packages/input-autocomplete/src/enums.ts");function searchFilterStub(){return!0}var Component_mobile_excluded=["Input","value","name","Arrow","label","placeholder","size","open","onInput","onOpen","multiple","inputProps","isBottomSheet","dataTestId","transitionProps","onCancel","onApply","title","success","virtualKeyboard"],InputAutocompleteMobile=react.forwardRef(function(_ref,ref){var _inputProps$clear,Input=_ref.Input,value=_ref.value,name=_ref.name,_ref$Arrow=_ref.Arrow,label=_ref.label,_ref$placeholder=_ref.placeholder,placeholder=void 0===_ref$placeholder?"":_ref$placeholder,_ref$size=_ref.size,openProp=_ref.open,onInput=_ref.onInput,onOpen=_ref.onOpen,multiple=_ref.multiple,inputProps=_ref.inputProps,_ref$isBottomSheet=_ref.isBottomSheet,isBottomSheet=void 0===_ref$isBottomSheet||_ref$isBottomSheet,dataTestId=_ref.dataTestId,transitionProps=_ref.transitionProps,onCancel=_ref.onCancel,onApply=_ref.onApply,title=_ref.title,success=_ref.success,_ref$virtualKeyboard=_ref.virtualKeyboard,restProps=(0,objectWithoutProperties.Z)(_ref,Component_mobile_excluded),_useState=(0,react.useState)(!1),_useState2=(0,slicedToArray.Z)(_useState,2),open=_useState2[0],setOpen=_useState2[1],frozenValue=(0,react.useRef)(""),searchInputRef=(0,react.useRef)(null),targetRef=(0,react.useRef)(null),restorePrevValue=function(){return null==onInput?void 0:onInput(frozenValue.current,enums.V.Close)},setModalVisibility=function(isOpen){isOpen&&(frozenValue.current=value||""),void 0===openProp&&setOpen(isOpen),null==onOpen||onOpen({open:isOpen,name:name})},handleOptionsListTouchMove=(0,react.useMemo)(function(){return throttle_default()(function(){var input=searchInputRef.current;input&&document.activeElement===input&&input.blur()},300)},[]),isOpen=!!(open||openProp),Component=isBottomSheet?mobile.SelectMobile:mobile.SelectModalMobile,componentProps=(0,defineProperty.Z)({title:title||label||placeholder,onClose:restorePrevValue,transitionProps:(0,objectSpread2.Z)((0,objectSpread2.Z)({},transitionProps),{},{onExiting:function(node){var _targetRef$current,_transitionProps$onEx;null===(_targetRef$current=targetRef.current)||void 0===_targetRef$current||_targetRef$current.focus(),null==transitionProps||null===(_transitionProps$onEx=transitionProps.onExiting)||void 0===_transitionProps$onEx||_transitionProps$onEx.call(transitionProps,node)}})},isBottomSheet?"containerProps":"componentDivProps",{onTouchMove:handleOptionsListTouchMove}),clear=null!==(_inputProps$clear=null==inputProps?void 0:inputProps.clear)&&void 0!==_inputProps$clear&&_inputProps$clear,displayValue=isOpen?frozenValue.current:value,fieldValue=(0,react.useMemo)(function(){var mask=null==inputProps?void 0:inputProps.mask;return(0,modern.isNonNullable)(displayValue)&&(0,modern.isMaskitoMask)(mask)?(0,index_esm.CV)(displayValue,{mask:mask}):displayValue},[displayValue,null==inputProps?void 0:inputProps.mask]);return(0,jsx_runtime.jsx)(Component,(0,objectSpread2.Z)((0,objectSpread2.Z)((0,objectSpread2.Z)({Field:AutocompleteMobileField},restProps),isBottomSheet?{bottomSheetProps:(0,objectSpread2.Z)((0,objectSpread2.Z)({},componentProps),{},{virtualKeyboard:void 0!==_ref$virtualKeyboard&&_ref$virtualKeyboard})}:{modalProps:componentProps,modalHeaderProps:{title:title}}),{},{dataTestId:dataTestId,useWithApplyHook:!1,showSearch:!0,searchProps:{value:value,filterFn:searchFilterStub,componentProps:(0,objectSpread2.Z)((0,objectSpread2.Z)({leftAddons:null,placeholder:placeholder},inputProps),{},{className:classnames_default()("input_wTUKr",null==inputProps?void 0:inputProps.className),clear:clear,ref:(0,react_merge_refs_esm.Z)([searchInputRef,null==inputProps?void 0:inputProps.ref]),onChange:function onChange(_,payload){return null==onInput?void 0:onInput(payload.value,enums.V.Change)}})},Search:Input,ref:(0,react_merge_refs_esm.Z)([targetRef,ref]),open:isOpen,onOpen:function(payload){setModalVisibility(!!payload.open)},Arrow:void 0===_ref$Arrow?null:_ref$Arrow,placeholder:placeholder,label:label,size:void 0===_ref$size?48:_ref$size,name:name,multiple:multiple,optionsListProps:(0,objectSpread2.Z)({footer:(0,jsx_runtime.jsx)(shared.Footer,{showClear:!0,handleClear:function(){setModalVisibility(!1),restorePrevValue(),null==onCancel||onCancel()},handleApply:function(){setModalVisibility(!1),null==onApply||onApply()},clearText:"Отмена",applyText:"Продолжить",dataTestId:dataTestId})},restProps.optionsListProps),fieldProps:(0,objectSpread2.Z)({value:fieldValue,clear:clear,onClear:clear?null==inputProps?void 0:inputProps.onClear:void 0,success:success},restProps.fieldProps)}))});try{InputAutocompleteMobile.displayName="InputAutocompleteMobile",InputAutocompleteMobile.__docgenInfo={description:"",displayName:"InputAutocompleteMobile",props:{Input:{defaultValue:null,description:"Компонент ввода значения",name:"Input",required:!1,type:{name:'ComponentType<Omit<BaseInputProps, "FormControlComponent"> & { breakpoint?: number; client?: "desktop" | "mobile"; defaultMatchMediaValue?: boolean | ... 1 more ... | undefined; } & RefAttributes<...>> | undefined'}},inputProps:{defaultValue:null,description:"Пропсы, которые будут прокинуты в инпут",name:"inputProps",required:!1,type:{name:'(Omit<BaseInputProps, "FormControlComponent"> & { breakpoint?: number; client?: "desktop" | "mobile"; defaultMatchMediaValue?: boolean | ... 1 more ... | undefined; } & Record<...>) | undefined'}},value:{defaultValue:null,description:"Значение поля ввода",name:"value",required:!1,type:{name:"string"}},readOnly:{defaultValue:null,description:"Поле доступно только для чтения",name:"readOnly",required:!1,type:{name:"boolean"}},success:{defaultValue:null,description:"Отображение иконки успеха",name:"success",required:!1,type:{name:"boolean"}},onInput:{defaultValue:null,description:"Обработчик ввода",name:"onInput",required:!1,type:{name:"((value: string, reason?: OnInputTypeReason) => void)"}},size:{defaultValue:{value:"48"},description:"Размер компонента\n@description s, m, l, xl deprecated, используйте вместо них 48, 56, 64, 72 соответственно",name:"size",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"l"'},{value:'"xl"'},{value:"40"},{value:"48"},{value:"56"},{value:"64"},{value:"72"}]}},onChange:{defaultValue:null,description:"Обработчик выбора",name:"onChange",required:!1,type:{name:"((payload: BaseSelectChangePayload) => void)"}},disabled:{defaultValue:null,description:"Управление возможностью выбора значения",name:"disabled",required:!1,type:{name:"boolean"}},multiple:{defaultValue:null,description:"Возможность выбрать несколько значений",name:"multiple",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"Атрибут name",name:"name",required:!1,type:{name:"string"}},placeholder:{defaultValue:{value:""},description:"Плейсхолдер поля",name:"placeholder",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"Дополнительный класс",name:"className",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"Атрибут id",name:"id",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Обработчик фокуса поля",name:"onFocus",required:!1,type:{name:"((event: FocusEvent<HTMLInputElement | HTMLDivElement, Element>) => void)"}},onBlur:{defaultValue:null,description:"Обработчик блюра поля",name:"onBlur",required:!1,type:{name:"((event: FocusEvent<HTMLInputElement | HTMLDivElement, Element>) => void)"}},onScroll:{defaultValue:null,description:"Обработчик скрола",name:"onScroll",required:!1,type:{name:"((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)"}},block:{defaultValue:null,description:"Растягивает компонент на ширину контейнера",name:"block",required:!1,type:{name:"boolean"}},clear:{defaultValue:null,description:"Флаг, показать крестик для очистки поля",name:"clear",required:!1,type:{name:"boolean"}},error:{defaultValue:null,description:"Отображение ошибки",name:"error",required:!1,type:{name:"ReactNode"}},hint:{defaultValue:null,description:"Подсказка под полем",name:"hint",required:!1,type:{name:"ReactNode"}},label:{defaultValue:null,description:"Лейбл поля",name:"label",required:!1,type:{name:"ReactNode"}},labelView:{defaultValue:null,description:"Вид лейбла внутри / снаружи",name:"labelView",required:!1,type:{name:"enum",value:[{value:'"inner"'},{value:'"outer"'}]}},fieldClassName:{defaultValue:null,description:"Дополнительный класс для поля",name:"fieldClassName",required:!1,type:{name:"string"}},onClear:{defaultValue:null,description:"Обработчик нажатия на крестик для очистки поля",name:"onClear",required:!1,type:{name:"((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void)"}},dataTestId:{defaultValue:null,description:"Идентификатор для систем автоматизированного тестирования.\nДля пункта меню используется модификатор -option, компонента поиска -search,\nкомпонента выпадающего меню -options-list, компонента BottomSheet -bottom-sheet,\nкомпонента поля -field, компонета FormControl -field-form-control",name:"dataTestId",required:!1,type:{name:"string"}},open:{defaultValue:null,description:"Управление открытием",name:"open",required:!1,type:{name:"boolean"}},popoverProps:{defaultValue:null,description:"Дополнительные пропсы для Popover",name:"popoverProps",required:!1,type:{name:'Omit<PopoverProps, "className" | "dataTestId" | "open" | "position" | "zIndex" | "update" | "anchorElement" | "preventFlip">'}},onOpen:{defaultValue:null,description:"Обработчик открытия\\закрытия селекта",name:"onOpen",required:!1,type:{name:"((payload: { open?: boolean; name?: string; }) => void) | undefined"}},updatePopover:{defaultValue:null,description:"Хранит функцию, с помощью которой можно обновить положение поповера",name:"updatePopover",required:!1,type:{name:"MutableRefObject<(() => void)>"}},preventFlip:{defaultValue:null,description:"Запрещает поповеру менять свою позицию.\nНапример, если места снизу недостаточно,то он все равно будет показан снизу",name:"preventFlip",required:!1,type:{name:"boolean"}},selected:{defaultValue:null,description:"Список value выбранных пунктов (controlled-селект)",name:"selected",required:!1,type:{name:"string | OptionShape | (string | OptionShape)[] | null"}},fieldProps:{defaultValue:null,description:"Пропсы, которые будут прокинуты в компонент поля",name:"fieldProps",required:!1,type:{name:"unknown"}},optionsListClassName:{defaultValue:null,description:"Дополнительный класс выпадающего меню",name:"optionsListClassName",required:!1,type:{name:"string"}},optionClassName:{defaultValue:null,description:"Дополнительный класс для пункта меню",name:"optionClassName",required:!1,type:{name:"string"}},optionGroupClassName:{defaultValue:null,description:"Дополнительный класс для компонента группы пунктов",name:"optionGroupClassName",required:!1,type:{name:"string"}},popperClassName:{defaultValue:null,description:"Дополнительный класс для поповера",name:"popperClassName",required:!1,type:{name:"string"}},options:{defaultValue:null,description:"Список вариантов выбора",name:"options",required:!0,type:{name:"(OptionShape | GroupShape)[]"}},defaultOpen:{defaultValue:null,description:"Начальное состояние селекта",name:"defaultOpen",required:!1,type:{name:"boolean"}},optionsSize:{defaultValue:null,description:"Размер пунктов меню\n@description s, m, l, xl deprecated, используйте вместо них 48, 56, 64, 72 соответственно",name:"optionsSize",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"l"'},{value:'"xl"'},{value:"40"},{value:"48"},{value:"56"},{value:"64"},{value:"72"}]}},optionsListWidth:{defaultValue:null,description:"Управляет шириной выпадающего меню.\nШирину определяет контент, либо ширина равна ширине поля",name:"optionsListWidth",required:!1,type:{name:"enum",value:[{value:'"content"'},{value:'"field"'}]}},allowUnselect:{defaultValue:null,description:"Позволяет снять выбранное значение",name:"allowUnselect",required:!1,type:{name:"boolean"}},closeOnSelect:{defaultValue:null,description:"Закрывать меню после выбора?",name:"closeOnSelect",required:!1,type:{name:"boolean"}},circularNavigation:{defaultValue:null,description:"При навигации с клавиатуры переходить от последнего пункта меню к первому и наоборот.",name:"circularNavigation",required:!1,type:{name:"boolean"}},popoverPosition:{defaultValue:null,description:"Позиционирование выпадающего списка",name:"popoverPosition",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'},{value:'"right"'},{value:'"left"'},{value:'"top-start"'},{value:'"top-end"'},{value:'"bottom-start"'},{value:'"bottom-end"'},{value:'"right-start"'},{value:'"right-end"'},{value:'"left-start"'},{value:'"left-end"'}]}},visibleOptions:{defaultValue:null,description:"Количество видимых пунктов меню (5 = 5.5)",name:"visibleOptions",required:!1,type:{name:"number"}},Arrow:{defaultValue:{value:"null"},description:"Компонент стрелки",name:"Arrow",required:!1,type:{name:"false | ComponentType<ArrowProps> | null"}},optionsListProps:{defaultValue:null,description:"Пропсы, которые будут прокинуты в компонент списка",name:"optionsListProps",required:!1,type:{name:"unknown"}},optionProps:{defaultValue:null,description:"Пропсы, которые будут прокинуты в компонент пункта меню",name:"optionProps",required:!1,type:{name:"unknown"}},groupOptionProps:{defaultValue:null,description:"Пропсы, которые будут прокинуты в компонент группового пункта меню",name:"groupOptionProps",required:!1,type:{name:"AnyObject"}},OptionsList:{defaultValue:null,description:"Компонент выпадающего меню",name:"OptionsList",required:!1,type:{name:"ComponentType<OptionsListProps & RefAttributes<HTMLDivElement>>"}},Optgroup:{defaultValue:null,description:"Компонент группы",name:"Optgroup",required:!1,type:{name:"ComponentType<OptgroupProps>"}},Option:{defaultValue:null,description:"Компонент пункта меню",name:"Option",required:!1,type:{name:"ComponentType<OptionProps>"}},zIndexPopover:{defaultValue:null,description:"z-index поповера",name:"zIndexPopover",required:!1,type:{name:"number"}},showEmptyOptionsList:{defaultValue:null,description:"Показывать OptionsList, если он пустой",name:"showEmptyOptionsList",required:!1,type:{name:"boolean"}},limitDynamicOptionGroupSize:{defaultValue:null,description:"Ограничение динамического размера группы вариантов выбора",name:"limitDynamicOptionGroupSize",required:!1,type:{name:"boolean"}},isBottomSheet:{defaultValue:{value:"true"},description:"Открывать в bottom-sheet",name:"isBottomSheet",required:!1,type:{name:"boolean"}},transitionProps:{defaultValue:null,description:"Пропсы анимации контента (CSSTransition)",name:"transitionProps",required:!1,type:{name:"Partial<TransitionProps<undefined>>"}},onApply:{defaultValue:null,description:"Обработчик нажатия на кнопку \xabПродолжить\xbb в BottomSheet или модальном окне",name:"onApply",required:!1,type:{name:"(() => void)"}},onCancel:{defaultValue:null,description:"Обработчик нажатия на кнопку \xabОтмена\xbb в BottomSheet или модальном окне",name:"onCancel",required:!1,type:{name:"(() => void)"}},title:{defaultValue:null,description:"Заголовок в модальном окне или шторке.\nЕсли не передан, то заголовок будет совпадать с label. Если не передан и label, то заголовок будет равен placeholder",name:"title",required:!1,type:{name:"string"}},virtualKeyboard:{defaultValue:{value:"false"},description:"Учитывать высоту виртуальной клавиатуры в BottomSheet",name:"virtualKeyboard",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/input-autocomplete/src/mobile/Component.mobile.tsx#InputAutocompleteMobile"]={docgenInfo:InputAutocompleteMobile.__docgenInfo,name:"InputAutocompleteMobile",path:"packages/input-autocomplete/src/mobile/Component.mobile.tsx#InputAutocompleteMobile"})}catch(__react_docgen_typescript_loader_error){}var InputAutocompleteModalMobile=react.forwardRef(function(props,ref){return(0,jsx_runtime.jsx)(InputAutocompleteMobile,(0,objectSpread2.Z)((0,objectSpread2.Z)({},props),{},{ref:ref,isBottomSheet:!1}))});try{InputAutocompleteModalMobile.displayName="InputAutocompleteModalMobile",InputAutocompleteModalMobile.__docgenInfo={description:"",displayName:"InputAutocompleteModalMobile",props:{Input:{defaultValue:null,description:"Компонент ввода значения",name:"Input",required:!1,type:{name:'ComponentType<Omit<BaseInputProps, "FormControlComponent"> & { breakpoint?: number; client?: "desktop" | "mobile"; defaultMatchMediaValue?: boolean | ... 1 more ... | undefined; } & RefAttributes<...>> | undefined'}},inputProps:{defaultValue:null,description:"Пропсы, которые будут прокинуты в инпут",name:"inputProps",required:!1,type:{name:'(Omit<BaseInputProps, "FormControlComponent"> & { breakpoint?: number; client?: "desktop" | "mobile"; defaultMatchMediaValue?: boolean | ... 1 more ... | undefined; } & Record<...>) | undefined'}},value:{defaultValue:null,description:"Значение поля ввода",name:"value",required:!1,type:{name:"string"}},readOnly:{defaultValue:null,description:"Поле доступно только для чтения",name:"readOnly",required:!1,type:{name:"boolean"}},success:{defaultValue:null,description:"Отображение иконки успеха",name:"success",required:!1,type:{name:"boolean"}},onInput:{defaultValue:null,description:"Обработчик ввода",name:"onInput",required:!1,type:{name:"((value: string, reason?: OnInputTypeReason) => void)"}},size:{defaultValue:null,description:"Размер компонента\n@description s, m, l, xl deprecated, используйте вместо них 48, 56, 64, 72 соответственно",name:"size",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"l"'},{value:'"xl"'},{value:"40"},{value:"48"},{value:"56"},{value:"64"},{value:"72"}]}},onChange:{defaultValue:null,description:"Обработчик выбора",name:"onChange",required:!1,type:{name:"((payload: BaseSelectChangePayload) => void)"}},disabled:{defaultValue:null,description:"Управление возможностью выбора значения",name:"disabled",required:!1,type:{name:"boolean"}},multiple:{defaultValue:null,description:"Возможность выбрать несколько значений",name:"multiple",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"Атрибут name",name:"name",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"Плейсхолдер поля",name:"placeholder",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"Дополнительный класс",name:"className",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"Атрибут id",name:"id",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"Обработчик фокуса поля",name:"onFocus",required:!1,type:{name:"((event: FocusEvent<HTMLInputElement | HTMLDivElement, Element>) => void)"}},onBlur:{defaultValue:null,description:"Обработчик блюра поля",name:"onBlur",required:!1,type:{name:"((event: FocusEvent<HTMLInputElement | HTMLDivElement, Element>) => void)"}},onScroll:{defaultValue:null,description:"Обработчик скрола",name:"onScroll",required:!1,type:{name:"((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)"}},block:{defaultValue:null,description:"Растягивает компонент на ширину контейнера",name:"block",required:!1,type:{name:"boolean"}},clear:{defaultValue:null,description:"Флаг, показать крестик для очистки поля",name:"clear",required:!1,type:{name:"boolean"}},error:{defaultValue:null,description:"Отображение ошибки",name:"error",required:!1,type:{name:"ReactNode"}},hint:{defaultValue:null,description:"Подсказка под полем",name:"hint",required:!1,type:{name:"ReactNode"}},label:{defaultValue:null,description:"Лейбл поля",name:"label",required:!1,type:{name:"ReactNode"}},labelView:{defaultValue:null,description:"Вид лейбла внутри / снаружи",name:"labelView",required:!1,type:{name:"enum",value:[{value:'"inner"'},{value:'"outer"'}]}},fieldClassName:{defaultValue:null,description:"Дополнительный класс для поля",name:"fieldClassName",required:!1,type:{name:"string"}},onClear:{defaultValue:null,description:"Обработчик нажатия на крестик для очистки поля",name:"onClear",required:!1,type:{name:"((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void)"}},dataTestId:{defaultValue:null,description:"Идентификатор для систем автоматизированного тестирования.\nДля пункта меню используется модификатор -option, компонента поиска -search,\nкомпонента выпадающего меню -options-list, компонента BottomSheet -bottom-sheet,\nкомпонента поля -field, компонета FormControl -field-form-control",name:"dataTestId",required:!1,type:{name:"string"}},open:{defaultValue:null,description:"Управление открытием",name:"open",required:!1,type:{name:"boolean"}},popoverProps:{defaultValue:null,description:"Дополнительные пропсы для Popover",name:"popoverProps",required:!1,type:{name:'Omit<PopoverProps, "className" | "dataTestId" | "open" | "position" | "zIndex" | "update" | "anchorElement" | "preventFlip">'}},onOpen:{defaultValue:null,description:"Обработчик открытия\\закрытия селекта",name:"onOpen",required:!1,type:{name:"((payload: { open?: boolean; name?: string; }) => void) | undefined"}},updatePopover:{defaultValue:null,description:"Хранит функцию, с помощью которой можно обновить положение поповера",name:"updatePopover",required:!1,type:{name:"MutableRefObject<(() => void)>"}},preventFlip:{defaultValue:null,description:"Запрещает поповеру менять свою позицию.\nНапример, если места снизу недостаточно,то он все равно будет показан снизу",name:"preventFlip",required:!1,type:{name:"boolean"}},selected:{defaultValue:null,description:"Список value выбранных пунктов (controlled-селект)",name:"selected",required:!1,type:{name:"string | OptionShape | (string | OptionShape)[] | null"}},fieldProps:{defaultValue:null,description:"Пропсы, которые будут прокинуты в компонент поля",name:"fieldProps",required:!1,type:{name:"unknown"}},optionsListClassName:{defaultValue:null,description:"Дополнительный класс выпадающего меню",name:"optionsListClassName",required:!1,type:{name:"string"}},optionClassName:{defaultValue:null,description:"Дополнительный класс для пункта меню",name:"optionClassName",required:!1,type:{name:"string"}},optionGroupClassName:{defaultValue:null,description:"Дополнительный класс для компонента группы пунктов",name:"optionGroupClassName",required:!1,type:{name:"string"}},popperClassName:{defaultValue:null,description:"Дополнительный класс для поповера",name:"popperClassName",required:!1,type:{name:"string"}},options:{defaultValue:null,description:"Список вариантов выбора",name:"options",required:!0,type:{name:"(OptionShape | GroupShape)[]"}},defaultOpen:{defaultValue:null,description:"Начальное состояние селекта",name:"defaultOpen",required:!1,type:{name:"boolean"}},optionsSize:{defaultValue:null,description:"Размер пунктов меню\n@description s, m, l, xl deprecated, используйте вместо них 48, 56, 64, 72 соответственно",name:"optionsSize",required:!1,type:{name:"enum",value:[{value:'"s"'},{value:'"m"'},{value:'"l"'},{value:'"xl"'},{value:"40"},{value:"48"},{value:"56"},{value:"64"},{value:"72"}]}},optionsListWidth:{defaultValue:null,description:"Управляет шириной выпадающего меню.\nШирину определяет контент, либо ширина равна ширине поля",name:"optionsListWidth",required:!1,type:{name:"enum",value:[{value:'"content"'},{value:'"field"'}]}},allowUnselect:{defaultValue:null,description:"Позволяет снять выбранное значение",name:"allowUnselect",required:!1,type:{name:"boolean"}},closeOnSelect:{defaultValue:null,description:"Закрывать меню после выбора?",name:"closeOnSelect",required:!1,type:{name:"boolean"}},circularNavigation:{defaultValue:null,description:"При навигации с клавиатуры переходить от последнего пункта меню к первому и наоборот.",name:"circularNavigation",required:!1,type:{name:"boolean"}},popoverPosition:{defaultValue:null,description:"Позиционирование выпадающего списка",name:"popoverPosition",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'},{value:'"right"'},{value:'"left"'},{value:'"top-start"'},{value:'"top-end"'},{value:'"bottom-start"'},{value:'"bottom-end"'},{value:'"right-start"'},{value:'"right-end"'},{value:'"left-start"'},{value:'"left-end"'}]}},visibleOptions:{defaultValue:null,description:"Количество видимых пунктов меню (5 = 5.5)",name:"visibleOptions",required:!1,type:{name:"number"}},Arrow:{defaultValue:null,description:"Компонент стрелки",name:"Arrow",required:!1,type:{name:"false | ComponentType<ArrowProps> | null"}},optionsListProps:{defaultValue:null,description:"Пропсы, которые будут прокинуты в компонент списка",name:"optionsListProps",required:!1,type:{name:"unknown"}},optionProps:{defaultValue:null,description:"Пропсы, которые будут прокинуты в компонент пункта меню",name:"optionProps",required:!1,type:{name:"unknown"}},groupOptionProps:{defaultValue:null,description:"Пропсы, которые будут прокинуты в компонент группового пункта меню",name:"groupOptionProps",required:!1,type:{name:"AnyObject"}},OptionsList:{defaultValue:null,description:"Компонент выпадающего меню",name:"OptionsList",required:!1,type:{name:"ComponentType<OptionsListProps & RefAttributes<HTMLDivElement>>"}},Optgroup:{defaultValue:null,description:"Компонент группы",name:"Optgroup",required:!1,type:{name:"ComponentType<OptgroupProps>"}},Option:{defaultValue:null,description:"Компонент пункта меню",name:"Option",required:!1,type:{name:"ComponentType<OptionProps>"}},zIndexPopover:{defaultValue:null,description:"z-index поповера",name:"zIndexPopover",required:!1,type:{name:"number"}},showEmptyOptionsList:{defaultValue:null,description:"Показывать OptionsList, если он пустой",name:"showEmptyOptionsList",required:!1,type:{name:"boolean"}},limitDynamicOptionGroupSize:{defaultValue:null,description:"Ограничение динамического размера группы вариантов выбора",name:"limitDynamicOptionGroupSize",required:!1,type:{name:"boolean"}},isBottomSheet:{defaultValue:null,description:"Открывать в bottom-sheet",name:"isBottomSheet",required:!1,type:{name:"boolean"}},transitionProps:{defaultValue:null,description:"Пропсы анимации контента (CSSTransition)",name:"transitionProps",required:!1,type:{name:"Partial<TransitionProps<undefined>>"}},onApply:{defaultValue:null,description:"Обработчик нажатия на кнопку \xabПродолжить\xbb в BottomSheet или модальном окне",name:"onApply",required:!1,type:{name:"(() => void)"}},onCancel:{defaultValue:null,description:"Обработчик нажатия на кнопку \xabОтмена\xbb в BottomSheet или модальном окне",name:"onCancel",required:!1,type:{name:"(() => void)"}},title:{defaultValue:null,description:"Заголовок в модальном окне или шторке.\nЕсли не передан, то заголовок будет совпадать с label. Если не передан и label, то заголовок будет равен placeholder",name:"title",required:!1,type:{name:"string"}},virtualKeyboard:{defaultValue:{value:"false"},description:"Учитывать высоту виртуальной клавиатуры в BottomSheet",name:"virtualKeyboard",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/input-autocomplete/src/mobile/Component.modal.mobile.tsx#InputAutocompleteModalMobile"]={docgenInfo:InputAutocompleteModalMobile.__docgenInfo,name:"InputAutocompleteModalMobile",path:"packages/input-autocomplete/src/mobile/Component.modal.mobile.tsx#InputAutocompleteModalMobile"})}catch(__react_docgen_typescript_loader_error){}}}]);