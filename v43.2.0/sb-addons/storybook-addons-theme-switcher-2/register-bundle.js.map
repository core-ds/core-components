{
  "version": 3,
  "sources": ["global-externals:react", "global-externals:@storybook/manager-api", "global-externals:@storybook/components", "../../../.storybook/addons/utils.js", "../../../.storybook/addons/theme-switcher/register.js"],
  "sourcesContent": ["export default __REACT__;\nconst { Children, Component, Fragment, Profiler, PureComponent, StrictMode, Suspense, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, cloneElement, createContext, createElement, createFactory, createRef, forwardRef, isValidElement, lazy, memo, useCallback, useContext, useDebugValue, useEffect, useImperativeHandle, useLayoutEffect, useMemo, useReducer, useRef, useState, version } = __REACT__;\nexport { Children, Component, Fragment, Profiler, PureComponent, StrictMode, Suspense, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, cloneElement, createContext, createElement, createFactory, createRef, forwardRef, isValidElement, lazy, memo, useCallback, useContext, useDebugValue, useEffect, useImperativeHandle, useLayoutEffect, useMemo, useReducer, useRef, useState, version };", "export default __STORYBOOKAPI__;\nconst { ActiveTabs, Consumer, ManagerContext, Provider, addons, combineParameters, controlOrMetaKey, controlOrMetaSymbol, eventMatchesShortcut, eventToShortcut, isMacLike, isShortcutTaken, keyToSymbol, merge, mockChannel, optionOrAltSymbol, shortcutMatchesShortcut, shortcutToHumanString, types, useAddonState, useArgTypes, useArgs, useChannel, useGlobalTypes, useGlobals, useParameter, useSharedState, useStoryPrepared, useStorybookApi, useStorybookState } = __STORYBOOKAPI__;\nexport { ActiveTabs, Consumer, ManagerContext, Provider, addons, combineParameters, controlOrMetaKey, controlOrMetaSymbol, eventMatchesShortcut, eventToShortcut, isMacLike, isShortcutTaken, keyToSymbol, merge, mockChannel, optionOrAltSymbol, shortcutMatchesShortcut, shortcutToHumanString, types, useAddonState, useArgTypes, useArgs, useChannel, useGlobalTypes, useGlobals, useParameter, useSharedState, useStoryPrepared, useStorybookApi, useStorybookState };", "export default __STORYBOOKCOMPONENTS__;\nconst { A, ActionBar, AddonPanel, Badge, Bar, Blockquote, Button, ClipboardCode, Code, DL, Div, DocumentWrapper, ErrorFormatter, FlexBar, Form, H1, H2, H3, H4, H5, H6, HR, IconButton, IconButtonSkeleton, Icons, Img, LI, Link, ListItem, Loader, OL, P, Placeholder, Pre, ResetWrapper, ScrollArea, Separator, Spaced, Span, StorybookIcon, StorybookLogo, Symbols, SyntaxHighlighter, TT, TabBar, TabButton, TabWrapper, Table, Tabs, TabsState, TooltipLinkList, TooltipMessage, TooltipNote, UL, WithTooltip, WithTooltipPure, Zoom, codeCommon, components, createCopyToClipboardFunction, getStoryHref, icons, interleaveSeparators, nameSpaceClassNames, resetComponents, withReset } = __STORYBOOKCOMPONENTS__;\nexport { A, ActionBar, AddonPanel, Badge, Bar, Blockquote, Button, ClipboardCode, Code, DL, Div, DocumentWrapper, ErrorFormatter, FlexBar, Form, H1, H2, H3, H4, H5, H6, HR, IconButton, IconButtonSkeleton, Icons, Img, LI, Link, ListItem, Loader, OL, P, Placeholder, Pre, ResetWrapper, ScrollArea, Separator, Spaced, Span, StorybookIcon, StorybookLogo, Symbols, SyntaxHighlighter, TT, TabBar, TabButton, TabWrapper, Table, Tabs, TabsState, TooltipLinkList, TooltipMessage, TooltipNote, UL, WithTooltip, WithTooltipPure, Zoom, codeCommon, components, createCopyToClipboardFunction, getStoryHref, icons, interleaveSeparators, nameSpaceClassNames, resetComponents, withReset };", "import { setMetricConfig, setManagerObserveConnection } from '../metrics';\n\nexport const MODE_COLORS_TAG_ID = 'mode-colors';\n\nexport const getStoryDoc = () => document.querySelector('iframe').contentDocument;\n\nexport const getMobileFrames = () =>\n    Array.from(document.querySelectorAll('iframe[src*=mobileframe]'));\n\nexport function getOrCreateStyleTag(id, beforeId, doc = getStoryDoc()) {\n    const existingTag = doc.getElementById(id);\n    if (existingTag) {\n        return existingTag;\n    }\n\n    const styleTag = doc.createElement('style');\n    styleTag.id = id;\n\n    const before = beforeId ? doc.getElementById(beforeId) : null;\n\n    if (before) {\n        doc.head.insertBefore(styleTag, before);\n    } else {\n        doc.head.appendChild(styleTag);\n    }\n\n    return styleTag;\n}\n\nexport function setGuidelinesStyles(styles) {\n    getOrCreateStyleTag('guidelines', null, document).innerHTML = styles;\n}\n\nexport const extractMixinContent = (css) => css.trim().split('\\n').slice(1, -1).join('\\n');\n\nexport const setManagerMetricsConnection = () => {\n    setMetricConfig();\n    setManagerObserveConnection();\n};\n\nexport function rmCommentsFromCss(css) {\n    return css.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '');\n}\n\nexport const getAsyncStoryDoc = async () => {\n    const iframe = document.querySelector('iframe');\n\n    if (!iframe) {\n        throw new Error('iframe not found');\n    }\n\n    await new Promise((resolve) => {\n        iframe.addEventListener('load', resolve);\n    });\n\n    return iframe.contentDocument;\n};\n", "import React, { useState, useEffect } from 'react';\nimport { addons, types } from '@storybook/manager-api';\nimport { Form } from '@storybook/components';\nimport { getStoryDoc, getAsyncStoryDoc } from '../utils';\n\nexport const ADDON_ID = 'theme-switcher';\n\nconst THEMES = ['default', 'click', 'corp', 'mobile', 'site', 'intranet'];\n\nconst createThemeChangeEvent = (newTheme) =>\n    new CustomEvent('theme-change', { bubbles: true, detail: { theme: newTheme } });\n\nconst Addon = () => {\n    const [theme, setTheme] = useState('default');\n\n    useEffect(() => {\n        const savedTheme = localStorage.getItem('selectedTheme');\n        const themeChangeEvent = createThemeChangeEvent(savedTheme || 'default');\n        \n        setTheme(savedTheme || 'default');\n        \n        getAsyncStoryDoc()\n        .then((storyDoc) => {\n            storyDoc.body.dispatchEvent(themeChangeEvent);\n            document.body.dispatchEvent(themeChangeEvent);\n        })\n        .catch((error) => {\n          console.error('Error:', error);\n        });\n    }, []);\n\n    const handleChange = (event) => {\n        const newTheme = event.target.value;\n        const themeChangeEvent = createThemeChangeEvent(newTheme);\n\n        setTheme(newTheme);\n        document.body.dispatchEvent(themeChangeEvent);\n        getStoryDoc().body.dispatchEvent(themeChangeEvent);\n        localStorage.setItem('selectedTheme', newTheme);\n    };\n\n    return (\n        <div className='tool'>\n            <span className='label'>\u0412\u044B\u0431\u043E\u0440 \u0442\u0435\u043C\u044B: </span>\n            <Form.Select\n                id='storybook-theme-switcher'\n                size={1}\n                onChange={handleChange}\n                className='select'\n                value={theme}\n            >\n                {THEMES.map((themeName) => (\n                    <option value={themeName} key={themeName}>\n                        {themeName}\n                    </option>\n                ))}\n            </Form.Select>\n        </div>\n    );\n};\n\naddons.register(ADDON_ID, () => {\n    addons.add(ADDON_ID, {\n        type: types.TOOL,\n        match: () => true,\n        render: () => <Addon />,\n    });\n});\n"],
  "mappings": "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",
  "names": ["react_default", "Children", "Component", "Fragment", "Profiler", "PureComponent", "StrictMode", "Suspense", "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED", "cloneElement", "createContext", "createElement", "createFactory", "createRef", "forwardRef", "isValidElement", "lazy", "memo", "useCallback", "useContext", "useDebugValue", "useEffect", "useImperativeHandle", "useLayoutEffect", "useMemo", "useReducer", "useRef", "useState", "version", "manager_api_default", "ActiveTabs", "Consumer", "ManagerContext", "Provider", "addons", "combineParameters", "controlOrMetaKey", "controlOrMetaSymbol", "eventMatchesShortcut", "eventToShortcut", "isMacLike", "isShortcutTaken", "keyToSymbol", "merge", "mockChannel", "optionOrAltSymbol", "shortcutMatchesShortcut", "shortcutToHumanString", "types", "useAddonState", "useArgTypes", "useArgs", "useChannel", "useGlobalTypes", "useGlobals", "useParameter", "useSharedState", "useStoryPrepared", "useStorybookApi", "useStorybookState", "components_default", "A", "ActionBar", "AddonPanel", "Badge", "Bar", "Blockquote", "Button", "ClipboardCode", "Code", "DL", "Div", "DocumentWrapper", "ErrorFormatter", "FlexBar", "Form", "H1", "H2", "H3", "H4", "H5", "H6", "HR", "IconButton", "IconButtonSkeleton", "Icons", "Img", "LI", "Link", "ListItem", "Loader", "OL", "P", "Placeholder", "Pre", "ResetWrapper", "ScrollArea", "Separator", "Spaced", "Span", "StorybookIcon", "StorybookLogo", "Symbols", "SyntaxHighlighter", "TT", "TabBar", "TabButton", "TabWrapper", "Table", "Tabs", "TabsState", "TooltipLinkList", "TooltipMessage", "TooltipNote", "UL", "WithTooltip", "WithTooltipPure", "Zoom", "codeCommon", "components", "createCopyToClipboardFunction", "getStoryHref", "icons", "interleaveSeparators", "nameSpaceClassNames", "resetComponents", "withReset", "getStoryDoc", "getAsyncStoryDoc", "iframe", "resolve", "ADDON_ID", "THEMES", "createThemeChangeEvent", "newTheme", "Addon", "theme", "setTheme", "useState", "useEffect", "savedTheme", "themeChangeEvent", "getAsyncStoryDoc", "storyDoc", "error", "handleChange", "event", "getStoryDoc", "react_default", "Form", "themeName", "addons", "types"]
}
