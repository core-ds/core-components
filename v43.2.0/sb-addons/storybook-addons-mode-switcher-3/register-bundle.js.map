{
  "version": 3,
  "sources": ["global-externals:react", "global-externals:@storybook/addons", "global-externals:@storybook/components", "../../../.storybook/addons/utils.js", "../../../.storybook/addons/mode-switcher/register.js"],
  "sourcesContent": ["export default __REACT__;\nconst { Children, Component, Fragment, Profiler, PureComponent, StrictMode, Suspense, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, cloneElement, createContext, createElement, createFactory, createRef, forwardRef, isValidElement, lazy, memo, useCallback, useContext, useDebugValue, useEffect, useImperativeHandle, useLayoutEffect, useMemo, useReducer, useRef, useState, version } = __REACT__;\nexport { Children, Component, Fragment, Profiler, PureComponent, StrictMode, Suspense, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, cloneElement, createContext, createElement, createFactory, createRef, forwardRef, isValidElement, lazy, memo, useCallback, useContext, useDebugValue, useEffect, useImperativeHandle, useLayoutEffect, useMemo, useReducer, useRef, useState, version };", "export default __STORYBOOKADDONS__;\nconst { addons, types, mockChannel } = __STORYBOOKADDONS__;\nexport { addons, types, mockChannel };", "export default __STORYBOOKCOMPONENTS__;\nconst { A, ActionBar, AddonPanel, Badge, Bar, Blockquote, Button, ClipboardCode, Code, DL, Div, DocumentWrapper, ErrorFormatter, FlexBar, Form, H1, H2, H3, H4, H5, H6, HR, IconButton, IconButtonSkeleton, Icons, Img, LI, Link, ListItem, Loader, OL, P, Placeholder, Pre, ResetWrapper, ScrollArea, Separator, Spaced, Span, StorybookIcon, StorybookLogo, Symbols, SyntaxHighlighter, TT, TabBar, TabButton, TabWrapper, Table, Tabs, TabsState, TooltipLinkList, TooltipMessage, TooltipNote, UL, WithTooltip, WithTooltipPure, Zoom, codeCommon, components, createCopyToClipboardFunction, getStoryHref, icons, interleaveSeparators, nameSpaceClassNames, resetComponents, withReset } = __STORYBOOKCOMPONENTS__;\nexport { A, ActionBar, AddonPanel, Badge, Bar, Blockquote, Button, ClipboardCode, Code, DL, Div, DocumentWrapper, ErrorFormatter, FlexBar, Form, H1, H2, H3, H4, H5, H6, HR, IconButton, IconButtonSkeleton, Icons, Img, LI, Link, ListItem, Loader, OL, P, Placeholder, Pre, ResetWrapper, ScrollArea, Separator, Spaced, Span, StorybookIcon, StorybookLogo, Symbols, SyntaxHighlighter, TT, TabBar, TabButton, TabWrapper, Table, Tabs, TabsState, TooltipLinkList, TooltipMessage, TooltipNote, UL, WithTooltip, WithTooltipPure, Zoom, codeCommon, components, createCopyToClipboardFunction, getStoryHref, icons, interleaveSeparators, nameSpaceClassNames, resetComponents, withReset };", "import { setMetricConfig, setManagerObserveConnection } from '../metrics';\n\nexport const MODE_COLORS_TAG_ID = 'mode-colors';\n\nexport const getStoryDoc = () => document.querySelector('iframe').contentDocument;\n\nexport const getMobileFrames = () =>\n    Array.from(document.querySelectorAll('iframe[src*=mobileframe]'));\n\nexport function getOrCreateStyleTag(id, beforeId, doc = getStoryDoc()) {\n    const existingTag = doc.getElementById(id);\n    if (existingTag) {\n        return existingTag;\n    }\n\n    const styleTag = doc.createElement('style');\n    styleTag.id = id;\n\n    const before = beforeId ? doc.getElementById(beforeId) : null;\n\n    if (before) {\n        doc.head.insertBefore(styleTag, before);\n    } else {\n        doc.head.appendChild(styleTag);\n    }\n\n    return styleTag;\n}\n\nexport function setGuidelinesStyles(styles) {\n    getOrCreateStyleTag('guidelines', null, document).innerHTML = styles;\n}\n\nexport const extractMixinContent = (css) => css.trim().split('\\n').slice(1, -1).join('\\n');\n\nexport const setManagerMetricsConnection = () => {\n    setMetricConfig();\n    setManagerObserveConnection();\n};\n\nexport function rmCommentsFromCss(css) {\n    return css.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '');\n}\n\nexport const getAsyncStoryDoc = async () => {\n    const iframe = document.querySelector('iframe');\n\n    if (!iframe) {\n        throw new Error('iframe not found');\n    }\n\n    await new Promise((resolve) => {\n        iframe.addEventListener('load', resolve);\n    });\n\n    return iframe.contentDocument;\n};\n", "import React, { useCallback, useState } from 'react';\nimport { addons, types } from '@storybook/addons';\nimport { Form } from '@storybook/components';\nimport { getStoryDoc } from '../utils';\n\nexport const ADDON_ID = 'mode-switcher';\n\nconst MODES = ['light', 'dark'];\n\nconst createModeChangeEvent = (newMode) =>\n    new CustomEvent('mode-change', { bubbles: true, detail: { mode: newMode } });\n\nconst Addon = () => {\n    const [mode, setMode] = useState('light');\n\n    const handleChange = useCallback((event) => {\n        const newMode = event.target.value;\n\n        setMode(newMode);\n\n        const modeChangeEvent = createModeChangeEvent(newMode);\n\n        document.body.dispatchEvent(modeChangeEvent);\n        getStoryDoc().body.dispatchEvent(modeChangeEvent);\n    }, []);\n\n    return (\n        <div className='tool'>\n            <Form.Select\n                id='storybook-mode-switcher'\n                size={1}\n                onChange={handleChange}\n                className='select'\n                value={mode}\n            >\n                {MODES.map((mode) => (\n                    <option value={mode} key={mode}>\n                        {mode}\n                    </option>\n                ))}\n            </Form.Select>\n        </div>\n    );\n};\n\naddons.register(ADDON_ID, () => {\n    addons.add(ADDON_ID, {\n        type: types.TOOL,\n        match: () => true,\n        render: () => <Addon />,\n        paramKey: ADDON_ID,\n    });\n});\n"],
  "mappings": ";AAAA,IAAOA,EAAQ,UACT,CAAE,SAAAC,EAAU,UAAAC,EAAW,SAAAC,EAAU,SAAAC,EAAU,cAAAC,EAAe,WAAAC,EAAY,SAAAC,EAAU,mDAAAC,EAAoD,aAAAC,EAAc,cAAAC,EAAe,cAAAC,EAAe,cAAAC,EAAe,UAAAC,EAAW,WAAAC,EAAY,eAAAC,EAAgB,KAAAC,EAAM,KAAAC,EAAM,YAAAC,EAAa,WAAAC,EAAY,cAAAC,EAAe,UAAAC,EAAW,oBAAAC,EAAqB,gBAAAC,EAAiB,QAAAC,EAAS,WAAAC,EAAY,OAAAC,EAAQ,SAAAC,EAAU,QAAAC,CAAQ,EAAI,UCDpY,IAAOC,GAAQ,oBACT,CAAE,OAAAC,EAAQ,MAAAC,EAAO,YAAAC,EAAY,EAAI,oBCDvC,IAAOC,GAAQ,wBACT,CAAE,EAAAC,GAAG,UAAAC,GAAW,WAAAC,GAAY,MAAAC,GAAO,IAAAC,GAAK,WAAAC,GAAY,OAAAC,GAAQ,cAAAC,GAAe,KAAAC,GAAM,GAAAC,GAAI,IAAAC,GAAK,gBAAAC,GAAiB,eAAAC,GAAgB,QAAAC,GAAS,KAAAC,EAAM,GAAAC,GAAI,GAAAC,GAAI,GAAAC,GAAI,GAAAC,GAAI,GAAAC,GAAI,GAAAC,GAAI,GAAAC,GAAI,WAAAC,GAAY,mBAAAC,GAAoB,MAAAC,GAAO,IAAAC,GAAK,GAAAC,GAAI,KAAAC,GAAM,SAAAC,GAAU,OAAAC,GAAQ,GAAAC,GAAI,EAAAC,GAAG,YAAAC,GAAa,IAAAC,GAAK,aAAAC,GAAc,WAAAC,GAAY,UAAAC,GAAW,OAAAC,GAAQ,KAAAC,GAAM,cAAAC,GAAe,cAAAC,GAAe,QAAAC,GAAS,kBAAAC,GAAmB,GAAAC,GAAI,OAAAC,GAAQ,UAAAC,GAAW,WAAAC,GAAY,MAAAC,GAAO,KAAAC,GAAM,UAAAC,GAAW,gBAAAC,GAAiB,eAAAC,GAAgB,YAAAC,GAAa,GAAAC,GAAI,YAAAC,GAAa,gBAAAC,GAAiB,KAAAC,GAAM,WAAAC,GAAY,WAAAC,GAAY,8BAAAC,GAA+B,aAAAC,GAAc,MAAAC,GAAO,qBAAAC,GAAsB,oBAAAC,GAAqB,gBAAAC,GAAiB,UAAAC,EAAU,EAAI,wBCG1pB,IAAMC,EAAc,IAAM,SAAS,cAAc,QAAQ,EAAE,gBCC3D,IAAMC,EAAW,gBAElBC,EAAQ,CAAC,QAAS,MAAM,EAExBC,EAAyBC,GAC3B,IAAI,YAAY,cAAe,CAAE,QAAS,GAAM,OAAQ,CAAE,KAAMA,CAAQ,CAAE,CAAC,EAEzEC,EAAQ,IAAM,CAChB,GAAM,CAACC,EAAMC,CAAO,EAAIC,EAAS,OAAO,EAElCC,EAAeC,EAAaC,GAAU,CACxC,IAAMP,EAAUO,EAAM,OAAO,MAE7BJ,EAAQH,CAAO,EAEf,IAAMQ,EAAkBT,EAAsBC,CAAO,EAErD,SAAS,KAAK,cAAcQ,CAAe,EAC3CC,EAAY,EAAE,KAAK,cAAcD,CAAe,CACpD,EAAG,CAAC,CAAC,EAEL,OACIE,EAAA,cAAC,OAAI,UAAU,QACXA,EAAA,cAACC,EAAK,OAAL,CACG,GAAG,0BACH,KAAM,EACN,SAAUN,EACV,UAAU,SACV,MAAOH,GAENJ,EAAM,IAAKI,GACRQ,EAAA,cAAC,UAAO,MAAOR,EAAM,IAAKA,GACrBA,CACL,CACH,CACL,CACJ,CAER,EAEAU,EAAO,SAASf,EAAU,IAAM,CAC5Be,EAAO,IAAIf,EAAU,CACjB,KAAMgB,EAAM,KACZ,MAAO,IAAM,GACb,OAAQ,IAAMH,EAAA,cAACT,EAAA,IAAM,EACrB,SAAUJ,CACd,CAAC,CACL,CAAC",
  "names": ["react_default", "Children", "Component", "Fragment", "Profiler", "PureComponent", "StrictMode", "Suspense", "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED", "cloneElement", "createContext", "createElement", "createFactory", "createRef", "forwardRef", "isValidElement", "lazy", "memo", "useCallback", "useContext", "useDebugValue", "useEffect", "useImperativeHandle", "useLayoutEffect", "useMemo", "useReducer", "useRef", "useState", "version", "addons_default", "addons", "types", "mockChannel", "components_default", "A", "ActionBar", "AddonPanel", "Badge", "Bar", "Blockquote", "Button", "ClipboardCode", "Code", "DL", "Div", "DocumentWrapper", "ErrorFormatter", "FlexBar", "Form", "H1", "H2", "H3", "H4", "H5", "H6", "HR", "IconButton", "IconButtonSkeleton", "Icons", "Img", "LI", "Link", "ListItem", "Loader", "OL", "P", "Placeholder", "Pre", "ResetWrapper", "ScrollArea", "Separator", "Spaced", "Span", "StorybookIcon", "StorybookLogo", "Symbols", "SyntaxHighlighter", "TT", "TabBar", "TabButton", "TabWrapper", "Table", "Tabs", "TabsState", "TooltipLinkList", "TooltipMessage", "TooltipNote", "UL", "WithTooltip", "WithTooltipPure", "Zoom", "codeCommon", "components", "createCopyToClipboardFunction", "getStoryHref", "icons", "interleaveSeparators", "nameSpaceClassNames", "resetComponents", "withReset", "getStoryDoc", "ADDON_ID", "MODES", "createModeChangeEvent", "newMode", "Addon", "mode", "setMode", "useState", "handleChange", "useCallback", "event", "modeChangeEvent", "getStoryDoc", "react_default", "Form", "addons", "types"]
}
