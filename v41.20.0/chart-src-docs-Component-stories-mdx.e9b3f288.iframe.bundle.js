"use strict";(self.webpackChunk_alfalab_core_components=self.webpackChunk_alfalab_core_components||[]).push([[6970],{"./node_modules/@mdx-js/react/lib/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{NF:function(){return withMDXComponents},Zo:function(){return MDXProvider},ah:function(){return useMDXComponents},pC:function(){return MDXContext}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents:allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components:components,children:children,disableParentContext:disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./node_modules/@storybook/addon-docs/dist/chunk-S4VUQJ4A.mjs":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{r:function(){return DocsRenderer}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_storybook_react_dom_shim__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/react-dom-shim/dist/react-18.mjs"),_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs"),defaultComponents={code:_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.bD,a:_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.Ct,..._storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.lO},ErrorBoundary=class extends react__WEBPACK_IMPORTED_MODULE_0__.Component{constructor(){super(...arguments),this.state={hasError:!1}}static getDerivedStateFromError(){return{hasError:!0}}componentDidCatch(err){let{showException:showException}=this.props;showException(err)}render(){let{hasError:hasError}=this.state,{children:children}=this.props;return hasError?null:children}},DocsRenderer=class{constructor(){this.render=async(context,docsParameter,element)=>{let components={...defaultComponents,...docsParameter?.components},TDocs=_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.WI;return new Promise(((resolve,reject)=>{__webpack_require__.e(9433).then(__webpack_require__.bind(__webpack_require__,"./node_modules/@mdx-js/react/index.js")).then((({MDXProvider:MDXProvider})=>(0,_storybook_react_dom_shim__WEBPACK_IMPORTED_MODULE_2__.l)(react__WEBPACK_IMPORTED_MODULE_0__.createElement(ErrorBoundary,{showException:reject,key:Math.random()},react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXProvider,{components:components},react__WEBPACK_IMPORTED_MODULE_0__.createElement(TDocs,{context:context,docsParameter:docsParameter}))),element))).then((()=>resolve()))}))},this.unmount=element=>{(0,_storybook_react_dom_shim__WEBPACK_IMPORTED_MODULE_2__.K)(element)}}}},"./node_modules/@storybook/addon-docs/dist/index.mjs":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{$4:function(){return _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.$4},UG:function(){return _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.UG},h_:function(){return _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.h_},oG:function(){return _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.oG}});__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-S4VUQJ4A.mjs");var _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs")},"./packages/chart/src/docs/Component.stories.mdx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{chartBar:function(){return chartBar},chartHistogram:function(){return chartHistogram},chartLine:function(){return chartLine},default:function(){return Component_stories}});var react=__webpack_require__("./node_modules/react/index.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),format=__webpack_require__("./node_modules/date-fns/esm/format/index.js"),modern=__webpack_require__("./dist/chart/modern/index.js"),Component=__webpack_require__("./packages/chart/src/Component.tsx"),dist=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs"),blocks=__webpack_require__("./.storybook/blocks/index.ts"),addon_knobs_dist=__webpack_require__("./node_modules/@storybook/addon-knobs/dist/index.js"),package_namespaceObject={i8:"3.1.12"},jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _createMdxContent(props){const _components=Object.assign({p:"p",code:"code",h2:"h2",ul:"ul",li:"li",pre:"pre"},(0,lib.ah)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsxs)(_components.p,{children:["Компонент для построения графиков основан на библиотеке основаной на D3 с лицензией - MIT https://recharts.org.\nВ данный момент компонент поддерживает три типа графиков: ",(0,jsx_runtime.jsx)(_components.code,{children:"bar"}),", ",(0,jsx_runtime.jsx)(_components.code,{children:"line"}),", ",(0,jsx_runtime.jsx)(_components.code,{children:"area"}),"."]}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"данные-для-отрисовки",children:"Данные для отрисовки"}),"\n",(0,jsx_runtime.jsxs)(_components.ul,{children:["\n",(0,jsx_runtime.jsxs)(_components.li,{children:[(0,jsx_runtime.jsx)(_components.code,{children:"options.labels"})," - массив меток ",(0,jsx_runtime.jsx)(_components.code,{children:"string | number"})]}),"\n",(0,jsx_runtime.jsxs)(_components.li,{children:[(0,jsx_runtime.jsx)(_components.code,{children:"options.series"})," - массив объектов с параметрами грaфиков с обязательным полем ",(0,jsx_runtime.jsx)(_components.code,{children:"data"})]}),"\n",(0,jsx_runtime.jsxs)(_components.li,{children:[(0,jsx_runtime.jsx)(_components.code,{children:"options.series.data"})," - массив данных, который должен состоять из меток ",(0,jsx_runtime.jsx)(_components.code,{children:"label: string | number"})," и значений ",(0,jsx_runtime.jsx)(_components.code,{children:"value: number"})]}),"\n"]}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"пример-объекта-с-дефолтными-значениями",children:"Пример объекта с дефолтными значениями"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"options: {\n    /**\n     * Oбязательное уникальное поле, такие елменты как `legend`\n     * `linearGradient` используют его\n     */\n    id,\n\n    /**\n     * Компонент контейнера, позволяющий адаптировать диаграммы к размеру\n     * родительского контейнера\n     */\n    responsiveContainer?: {\n        /**\n         * Значение для debounce функции при ресайзе\n         */\n        debounce?: 0,\n    },\n\n    /*\n     * Диграмма для построения графиков с разными типами\n     */\n    composeChart: {\n        /*\n        * Отступы графика на момент инициализации компонента\n        */\n        initMargin?: {\n            top?: 5,\n            right?: 5,\n            bottom?: 5,\n            left?: 5,\n        },\n\n        /*\n        * Максимальная ширина графиков типа bar\n        */\n        maxBarSize?,\n\n        /*\n        * Разрыв между двумя категориями столбцов,\n        который может быть процентным или фиксированным значением\n        */\n        barCategoryGap?: '10%',\n\n        /*\n        * Разрыв между двумя столбцами одной категории\n        */\n        barGap?: 4,\n    },\n\n    /**\n     * Отображение линий осей графика\n     */\n    cartesianGrid?: {\n        /**\n         * Отображение горизонтальной сетки\n         */\n        horizontal?: true,\n\n        /**\n         * Отображение вертикальной сетки\n         */\n        vertical?: true,\n\n        /**\n         * Штрихи для осей\n         */\n        strokeDasharray?,\n\n        /**\n         * Цвет разметки сетки\n         */\n        stroke?,\n\n        /**\n         * Цвет заливки графика\n         */\n        fill?,\n    },\n\n    /**\n     * Настройки оси Х\n     */\n    xAxis: {\n        /**\n         * Скрыть ось\n         */\n        hide?: false,\n\n        /**\n         * Отображение линии оси.\n         */\n        axisLine?: true,\n\n        /**\n         * Тип оси.\n         */\n        type: 'category',\n\n        /**\n         * Разрешить значениям оси быть десятичными или нет.\n         */\n        allowDecimals?: true,\n\n        /**\n         * Разрешить или нет на оси дублировать категории,\n         * если \"type\" оси - \"category\".\n         */\n        allowDuplicatedCategory?: true,\n\n        /**\n         * Угол наклона значений оси.\n         */\n        angle?: 0,\n\n        /**\n         * Количество делений оси. Не используется,\n         * если \"тип\" - \"категория\".\n         */\n        tickCount?: 5,\n\n        /**\n         * Интревал линий деления оси\n         */\n        interval?: 'preserveEnd',\n\n        /**\n         * Минимальный зазор между двумя соседними делениями оси.\n         */\n        minTickGap?: 5,\n\n        /**\n         * Отображение линий деления оси\n         */\n        tickLine?: true,\n\n        /**\n         * Размер линий деления оси\n         */\n        tickSize?: 6,\n\n        /**\n         * Если установлено значение true,\n         * галочки переворачиваются вокруг оси,\n         * отображая метки внутри диаграммы, а не снаружи.\n         */\n\n        mirror?: false,\n\n        /**\n         * Отображение горизонтальной сетки\n         */\n        reversed?: false,\n\n        /**\n         * Реверсировать ось или нет\n         */\n        tickMargin?: 0,\n\n        /**\n         * Функция форматирования значения деления оси.\n         */\n        tickFormatter?,\n\n        /**\n         * Ключ данных, отображаемых на оси.\n         */\n        dataKey,\n\n        /**\n         * Ориентация оси\n         */\n        orientation?: 'bottom',\n\n        /**\n         * Тип деления оси\n         */\n        tickType?,\n    },\n\n    /**\n     * Настройки оси Y\n     */\n    yAxis: {\n        /**\n         * Скрыть ось\n         */\n        hide?: false,\n\n        /**\n         * Отображение линии оси.\n         */\n        axisLine?: true,\n\n        /**\n         * Тип оси.\n         */\n        type: 'number',\n\n        /**\n         * Разрешить значениям оси быть десятичными или нет.\n         */\n        allowDecimals?: true,\n\n        /**\n         * Разрешить или нет на оси дублировать категории,\n         * если \"type\" оси - \"category\".\n         */\n        allowDuplicatedCategory?: true,\n\n        /**\n         * Угол наклона значений оси.\n         */\n        angle?: 0,\n\n        /**\n         * Количество делений оси.\n         * Не используется, если \"тип\" - \"категория\".\n         */\n        tickCount?: 5,\n\n        /**\n         * Интревал линий деления оси\n         */\n        interval?: 'preserveEnd',\n\n        /**\n         * Минимальный зазор между двумя соседними делениями оси.\n         */\n        minTickGap?: 5,\n\n        /**\n         * Отображение линий деления оси\n         */\n        tickLine?: true,\n\n        /**\n         * Размер линий деления оси\n         */\n        tickSize?: 6,\n\n        /**\n         * Если установлено значение true,\n         * галочки переворачиваются вокруг оси,\n         * отображая метки внутри диаграммы, а не снаружи.\n         */\n        mirror?: false,\n\n        /**\n         * Отображение горизонтальной сетки\n         */\n        reversed?: false,\n\n        /**\n         * Реверсировать ось или нет\n         */\n        tickMargin?: 0,\n\n        /**\n         * Функция форматирования значения деления оси.\n         */\n        tickFormatter?,\n\n        /**\n         * Ключ данных, отображаемых на оси.\n         */\n        orientation?: 'bottom',\n    },\n\n    /**\n     * Всплывающаяся подсказка\n     */\n    tooltip?: {\n        /**\n         * Разделитель между именем и значением\n         */\n        separator?,\n\n        /**\n         * Размер смещения между положением всплывающей\n         * подсказки и активной позицией\n         */\n        offset?: 10,\n\n        /**\n         * Когда элемент полезной нагрузки имеет значение null или undefined,\n         * этот элемент не отображается\n         */\n        filterNull: true,\n\n        /**\n         * Если установлено false, курсор не будет отображаться, когда всплывающая подсказка активна.\n         * Если установлен объект, опция - это конфигурация курсора.\n         * Если установлен элемент React, опция является настраиваемым элементом реакции курсора рисования.\n         */\n        cursor?: {\n            /**\n             * Цвет линии\n             */\n            stroke: cursorStroke,\n\n            /**\n             * Ширина линии\n             */\n            strokeWidth: cursorStrokeWidth,\n        },\n\n        /**\n         * Если это поле установлено, положение всплывающей подсказки\n         * будет фиксированным и больше не будет перемещаться.\n         */\n        position?: {\n            x,\n            y,\n        };\n\n        /**\n         * Если установлено false, анимация всплывающей подсказки будет отключена.\n         */\n        isAnimationActive?: true,\n\n        /**\n         * Указывает, когда должна начинаться анимация,\n         * единица измерения этого параметра - мс.\n         */\n        animationBegin?: 0,\n\n        /**\n         * Определяет продолжительность анимации,\n         * единица измерения этого параметра - мс.\n         */\n        animationDuration?: 1500,\n\n        /**\n         * Тип функции плавности\n         */\n        animationEasing?: 'ease',\n\n        /**\n         * Отображение стрелки тултипа\n         */\n        arrow?: false,\n    };\n\n    /**\n     * Компонент маштабирования графика\n     */\n    brush?: {\n        /**\n         * Ключ данных\n         */\n        dataKey,\n\n        /**\n         * Ширина ползунков\n         */\n        travellerWidth?: 5,\n\n        /**\n         * Начальный индекс интервала показа\n         */\n        startIndex?,\n\n        /**\n         * Конечный индекс интервала показа\n         */\n        endIndex?,\n\n        /**\n         * Отступ\n         */\n        brushMargin?: 0,\n\n        /**\n         * Высота\n         */\n        height?: 40,\n\n        /**\n         * Форматирование значений\n         */\n        tickFormatter?,\n\n        /**\n         * Всегда показывать значение текущего интервала\n         */\n        alwaysShowText?: false,\n\n        /**\n         * Цвет\n         */\n        stroke?: brushStroke,\n    }\n\n    /**\n     * Компонент подписи графиков\n     */\n    legend?: {\n        /**\n         * Выравнивание элементов легенды в вертикальном направлении\n         */\n        verticalAlign?: 'middle',\n\n        /**\n         * Функция форматирования каждого текста в легенде\n         */\n        formatter?,\n\n        /**\n         * Выравнивание элементов легенды в горизонтальном направлении\n         */\n        align?: 'center',\n\n        /**\n         * Вертикальный отступ\n         */\n        marginTop?: 0,\n\n        /**\n         * Высота иконок\n         */\n        iconHeight?: 16,\n    },\n\n    /**\n     * Mассив меток\n     */\n    labels: Array<string | number>,\n\n    /**\n     * Mассив объектов с параметрами грaфиков с обязательным полем\n     */\n    series: [\n        /*\n         * Пример графика типа bar\n         */\n        {\n            /*\n             * Скрыть график\n             */\n            hide?: false,\n\n            /*\n             * Скрыть график в легенде\n             */\n            hideLegend?: false,\n\n            /*\n             * Скрыть график в тултипe\n             */\n            hideTooltip?: false,\n\n            /*\n             * Z-index графика\n             */\n            zIndex,\n\n            /*\n             * Тип графика\n             */\n            chart: 'bar',\n\n            /**\n             * Радиус закругления углов графика типа bar\n             */\n            radius?: {\n                /**\n                 * Верхний pадиус закругления углов графика типа bar\n                 */\n                top?,\n\n                /**\n                 * Нижний радиус закругления углов графика типа bar\n                 */\n                bottom?,\n            },\n\n            /*\n             * Тип иконки для графика\n             */\n            icon,\n\n            /*\n             * Параметры графика\n             */\n            properties: {\n\n                /*\n                * Название графика (отображается в легендах и тултипе)\n                */\n                name,\n\n                /*\n                * Ключ данных\n                */\n                dataKey,\n\n                /*\n                * Форматирование значения графика для тултипа\n                */\n                formatter?,\n\n                /*\n                * Цвет заливки графика\n                */\n                fill,\n\n                /*\n                * Цвет бордера графика\n                */\n                strokeWidth?,\n            },\n\n            /**\n             * Данные для построения графика\n             */\n            data: [\n                /**\n                 * Метка\n                 */\n                label,\n\n                /**\n                 * Значение\n                 */\n                value\n            ];\n        },\n\n        /*\n         * Пример графика типа line\n         */\n        {\n            /*\n             * Скрыть график\n             */\n            hide?: false,\n\n            /*\n             * Скрыть график в легенде\n             */\n            hideLegend?: false,\n\n            /*\n             * Скрыть график в тултипe\n             */\n            hideTooltip?: false,\n\n            /*\n             * Z-index графика\n             */\n            zIndex,\n\n            /*\n             * Тип графика\n             */\n            chart: 'line',\n\n            /*\n             * Тип иконки для графика\n             */\n            icon,\n\n            /*\n             * Параметры графика\n             */\n            properties: {\n\n                /*\n                 * Название графика (отображается в легендах и тултипе)\n                 */\n                name,\n\n                /*\n                 * Ключ данных\n                 */\n                dataKey,\n\n                /*\n                 * Цвет линии графика\n                 */\n                stroke?: '#3182bd',\n\n                /*\n                 * Отображение точек на графике\n                 */\n                dot?,\n\n                /*\n                 * Параметры для точек грфика (если dot: true)\n                 */\n                dotSettings: [{\n\n                    /*\n                     * Значение media query\n                     */\n                    media,\n\n                    /*\n                     * Значение маштаба при ховере\n                     */\n                    scale,\n\n                    /*\n                     * Начальный значения маштаба\n                     */\n                    initScale,\n\n                    /*\n                     * Ширина точки\n                     */\n                    width,\n\n                    /*\n                     * Высота точки\n                     */\n                    height,\n                }],\n\n                /*\n                 * Наследование цвета\n                 */\n                inheritStroke?: false,\n\n                /*\n                 * Форматирование значения графика для тултипа\n                 */\n                formatter?,\n\n                /*\n                 * Тип линии\n                 */\n                type? 'linear',\n\n                /*\n                 * Толщина линии\n                 */\n                strokeWidth?: 1,\n\n                /*\n                 * Прерывистость линии\n                 */\n                strokeDasharray?,\n            },\n\n            /*\n             *  Массив данных для отрисовки\n             */\n            data: [\n\n                /**\n                 * Метка\n                 */\n                label,\n\n                /**\n                 * Значение\n                 */\n                value,\n            ],\n        },\n\n        /*\n         * Пример графика типа area\n         */\n        {\n            /*\n             * Скрыть график\n             */\n            hide?: false,\n\n            /*\n             * Скрыть график в легенде\n             */\n            hideLegend?: false,\n\n            /*\n             * Скрыть график в тултипe\n             */\n            hideTooltip?: false,\n\n            /*\n             * Z-index графика\n             */\n            zIndex,\n\n            /*\n             * Тип графика\n             */\n            chart: 'ara',\n\n            /*\n             * Тип иконки для графика\n             */\n            icon,\n\n            /*\n             * Оффсет для градиента (только для типа area)\n             */\n            offset,\n\n            /**\n             * Параметры градиента\n             */\n            gradient: {\n\n                /**\n                 * Индефикатор градиента\n                 */\n                gid,\n\n                /**\n                 * Параметра точек для градиента\n                 */\n                points: [\n\n                    /**\n                     * Отступ\n                     */\n                    offset: number,\n\n                    /**\n                     * Цвет\n                     */\n                    stopColor: string,\n\n                    /**\n                     * Прозрачность\n                     */\n                    stopOpacity: number,\n                ];\n            };\n\n            /*\n             * Параметры графика\n             */\n            properties: {\n\n                /*\n                 * Название графика (отображается в легендах и тултипе)\n                 */\n                name,\n\n                /*\n                 * Ключ данных\n                 */\n                dataKey,\n\n                /*\n                 * Цвет линии графика\n                 */\n                stroke?: '#3182bd',\n\n                /*\n                 * Отображение точек на графике\n                 */\n                dot?,\n\n                /*\n                 * Параметры для точек грфика (если dot: true)\n                 */\n                dotSettings: [{\n\n                    /*\n                     * Значение media query\n                     */\n                    media,\n\n                    /*\n                     * Значение маштаба при ховере\n                     */\n                    scale,\n\n                    /*\n                     * Начальный значения маштаба\n                     */\n                    initScale,\n\n                    /*\n                     * Ширина точки\n                     */\n                    width,\n\n                    /*\n                     * Высота точки\n                     */\n                    height,\n                }],\n\n                /*\n                 * Наследование цвета\n                 */\n                inheritStroke?: false,\n\n                /*\n                 * Форматирование значения графика для тултипа\n                 */\n                formatter?,\n\n                /*\n                 * Тип линии\n                 */\n                type? 'linear',\n\n                /*\n                 * Толщина линии\n                 */\n                strokeWidth?: 1,\n\n                /*\n                 * Прерывистость линии\n                 */\n                strokeDasharray?,\n            },\n\n            /**\n             * Данные для построения графика\n             */\n            data: [\n\n                /**\n                 * Метка\n                 */\n                label,\n\n                /**\n                 * Значение\n                 */\n                value,\n            ]\n        },\n    ],\n};\n"})})]})}var description=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(_createMdxContent,props)})):_createMdxContent(props)},CHANGELOGraw_namespaceObject="# Change Log\n\n## 3.1.12\n\n### Patch Changes\n\n### [#766](https://github.com/core-ds/core-components/pull/766)\n\n-   Удален скрипт отправки статистики (send-stats)\n\n-   Обновлены зависимости\n    -   typography@3.2.2\n\n## 3.1.11\n\n### Patch Changes\n\n### [#632](https://github.com/core-ds/core-components/pull/632)\n\n-   Исправлено название свойства strokeDasharray (strokeDashArray -> strokeDasharray)\n\n## 3.1.10\n\n### Patch Changes\n\n### [#588](https://github.com/core-ds/core-components/pull/588)\n\n-   Добавлен \\_\\_esModule в cjs экспорт\n\n-   Обновлены зависимости\n    -   typography@3.2.1\n\n## 3.1.9\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@3.2.0\n\n## 3.1.8\n\n### Patch Changes\n\n### [#526](https://github.com/core-ds/core-components/pull/526)\n\n-   В зависимости добавлена библиотека tslib\n\n-   Обновлены зависимости\n    -   typography@3.1.1\n\n## 3.1.7\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@3.1.0\n\n## 3.1.6\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@3.0.8\n\n## 3.1.5\n\n### Patch Changes\n\n### [#418](https://github.com/core-ds/core-components/pull/418)\n\n-   Исправлена проблема с default-импортом в cjs форматах\n\n-   Обновлены зависимости\n    -   typography@3.0.7\n\n## 3.1.4\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@3.0.6\n\n## 3.1.3\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@3.0.5\n\n## 3.1.2\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@3.0.4\n\n## 3.1.1\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@3.0.3\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\n\n# [3.1.0](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@3.0.1...@alfalab/core-components-chart@3.1.0) (2022-09-01)\n\n### Features\n\n-   testing-library versions update ([#216](https://github.com/core-ds/core-components/issues/216)) ([33b6225](https://github.com/core-ds/core-components/commit/33b62259a1332f535f367502590ea37e7ad051d4))\n\n## [3.0.1](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@3.0.0...@alfalab/core-components-chart@3.0.1) (2022-08-19)\n\n**Note:** Version bump only for package @alfalab/core-components-chart\n\n# [3.0.0](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@2.2.1...@alfalab/core-components-chart@3.0.0) (2022-08-17)\n\n### Features\n\n-   removed dist directory in published packages ([#200](https://github.com/core-ds/core-components/issues/200)) ([8af8fee](https://github.com/core-ds/core-components/commit/8af8fee53ca0bd19fa2d1ca1422e0df23096e2c8))\n\n### BREAKING CHANGES\n\n-   Изменена директория расположения индексных файлов в опубликованных пакетах (удалена\n    директория dist)\n\nCo-authored-by: Vladimir Gevak <VGevak@alfabank.ru>\n\n## [2.2.1](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@2.2.0...@alfalab/core-components-chart@2.2.1) (2022-08-17)\n\n### Bug Fixes\n\n-   returned dist directory ([#199](https://github.com/core-ds/core-components/issues/199)) ([fabc15e](https://github.com/core-ds/core-components/commit/fabc15effa1457ca65ec7238206f1b1fc2a2a613))\n\n# [2.2.0](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@2.1.3...@alfalab/core-components-chart@2.2.0) (2022-08-04)\n\n### Features\n\n-   react 18 support ([#159](https://github.com/core-ds/core-components/issues/159)) ([2e6693c](https://github.com/core-ds/core-components/commit/2e6693c62f534e333aadb7d3fff4ffd78ac84c63))\n\n## [2.1.3](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@2.1.2...@alfalab/core-components-chart@2.1.3) (2022-07-18)\n\n**Note:** Version bump only for package @alfalab/core-components-chart\n\n## [2.1.2](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@2.1.1...@alfalab/core-components-chart@2.1.2) (2022-07-15)\n\n### Bug Fixes\n\n-   bump packages version ([#153](https://github.com/core-ds/core-components/issues/153)) ([fd3e082](https://github.com/core-ds/core-components/commit/fd3e08205672129cdce04e1000c673f2cd9c10da))\n\n## [2.1.1](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@2.1.0...@alfalab/core-components-chart@2.1.1) (2022-07-14)\n\n**Note:** Version bump only for package @alfalab/core-components-chart\n\n# [2.1.0](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@2.0.5...@alfalab/core-components-chart@2.1.0) (2022-06-28)\n\n### Features\n\n-   circumflexus retrieval ([#57](https://github.com/core-ds/core-components/issues/57)) ([3820da8](https://github.com/core-ds/core-components/commit/3820da818bcdcbee6904c648b3e29c3c828fe202))\n\n## [2.0.2](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@2.0.1...@alfalab/core-components-chart@2.0.2) (2022-03-30)\n\n**Note:** Version bump only for package @alfalab/core-components-chart\n\n## [2.0.1](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@2.0.0...@alfalab/core-components-chart@2.0.1) (2022-03-03)\n\n**Note:** Version bump only for package @alfalab/core-components-chart\n\n# [2.0.0](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@1.2.2...@alfalab/core-components-chart@2.0.0) (2022-03-01)\n\n### Features\n\n-   Исправить импорты в сторях. ([#998](https://github.com/core-ds/core-components/issues/998)) ([e6a654a](https://github.com/core-ds/core-components/commit/e6a654a0599451c7d149484cb61d8067eed083b7))\n\n-   refactor/calendar-range (#984) ([714f615](https://github.com/core-ds/core-components/commit/714f61590586bafe1060e652943e95c133ed002a)), closes [#984](https://github.com/core-ds/core-components/issues/984)\n\n### BREAKING CHANGES\n\n-   Большое обновление CalendarRange\n\n-   feat(date-input): add some improvements\n\n-   feat(date-input): some updates\n\n-   feat(date-input): validation\n\n-   feat(calendar): change period selection logic\n\n-   fix(calendar): range styles\n\n-   fix(calendar): fix styles, add rangeComplete flag\n\n-   refactor(calendar-range): temporary\n\n-   fix(calendar-range): fix hook\n\n-   fix(calendar-range): fix period\n\n-   fix(calendar-range): fix tests, fix max date\n\n-   fix: update exports\n\n-   feat(calendar): allow empty values for PeriodSlider, update today\n\n-   fix(calendar-range): hide error icon\n\n-   chore(calendar-range): demo\n\n-   feat(calendar): use IconButton\n\n-   feat(calendar-range): add onChange, update demo\n\n-   fix(calendar-range): update width\n\n-   test(calendar-range): update snapshot\n\n-   fix: import date-fns separately\n\n-   fix(calendar-range): fix rest props\n\nCo-authored-by: dmitrsavk <dmitrsavk@yandex.ru>\n\n## [1.2.2](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@1.2.1...@alfalab/core-components-chart@1.2.2) (2022-01-17)\n\n**Note:** Version bump only for package @alfalab/core-components-chart\n\n## [1.2.1](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@1.2.0...@alfalab/core-components-chart@1.2.1) (2021-10-19)\n\n### Bug Fixes\n\n-   **chart:** fix deps, export types ([b46450a](https://github.com/core-ds/core-components/commit/b46450ae954b10f0138c393482fe1271b001f085))\n\n# [1.2.0](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@1.1.0...@alfalab/core-components-chart@1.2.0) (2021-10-11)\n\n### Features\n\n-   **chart:** added border radius to bar charts ([cfd0ad2](https://github.com/core-ds/core-components/commit/cfd0ad2c23a2b80de0bc5dfae7b65a14263e37e9))\n-   **chart:** added chart component ([1119943](https://github.com/core-ds/core-components/commit/11199435e9ab53ae159707e94714a34952ad56c1))\n-   **chart:** added description ([8275346](https://github.com/core-ds/core-components/commit/827534640af0c0b06c1105755e9435d43cae8acd))\n-   **chart:** added props for legend icons height ([5c9b321](https://github.com/core-ds/core-components/commit/5c9b32154e6f39cddd3ac9668830959adba64648))\n-   **chart:** bar radius ([e39251a](https://github.com/core-ds/core-components/commit/e39251a37a52b6f434932439da0b86a03a26d901))\n-   **chart:** beautifyed ([67cc96e](https://github.com/core-ds/core-components/commit/67cc96e6afc020c3af5491d3d7ba0b89f50dbaf3))\n-   **chart:** edited doc ([8728271](https://github.com/core-ds/core-components/commit/8728271dc7f733c9b14a27c83a7136c22ef39ed6))\n-   **chart:** fix doc ([9d1e888](https://github.com/core-ds/core-components/commit/9d1e8889615f0701a43a9fbceca867557002ef31))\n-   **chart:** fixed after pull master ) ([4c7d241](https://github.com/core-ds/core-components/commit/4c7d241da264cde81e50573f96a2f035c31306e1))\n-   **chart:** fixed build error ([2efdd22](https://github.com/core-ds/core-components/commit/2efdd22f27e8229b2ad4cb7d355f61b218ea1bc1))\n-   **chart:** fixed comments ([a611b9c](https://github.com/core-ds/core-components/commit/a611b9c1c9bab1d5a15c2021bff270e9bbf5a934))\n-   **chart:** fixed comments ([7ad1caf](https://github.com/core-ds/core-components/commit/7ad1caf5be9f2da6a218b2c97cc7d96efb4d286d))\n-   **chart:** fixed comments ([555acb6](https://github.com/core-ds/core-components/commit/555acb699549c52f85d0dd58009ab1692344eb44))\n-   **chart:** fixed comments ([379e53d](https://github.com/core-ds/core-components/commit/379e53ddf8c857424600d5fc49b41c03f5ac11ea))\n-   **chart:** more description ([9a4c076](https://github.com/core-ds/core-components/commit/9a4c0762782c2f8ccee0e0c7c660514a10119960))\n-   **chart:** pulled master ([176f7ae](https://github.com/core-ds/core-components/commit/176f7ae6e7cdb2a3e18d2136523e5be6ecdbde3e))\n-   **chart:** resolved conflicts ([7f734ba](https://github.com/core-ds/core-components/commit/7f734bab0347af6e5d56d717d8b5cc0cf192f9f3))\n\n# 1.1.0 (2021-09-30)\n\n### Features\n\n-   **chart:** add component ([#835](https://github.com/core-ds/core-components/issues/835)) ([17d840b](https://github.com/core-ds/core-components/commit/17d840b9f9f64474491d3ec58d3cda53ad07f0ca))\n";function Component_stories_createMdxContent(props){const _components=Object.assign({div:"div",pre:"pre",code:"code"},(0,lib.ah)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"Components/Chart",id:"Chart"}),"\n","\n",(0,jsx_runtime.jsx)(dist.oG,{name:"Chart.Bar",children:react.createElement((()=>{const iconTypes={circleLine:"circleLine",filledCircle:"filledCircle",strokeCircle:"strokeCircle",circle:"circle"},debounce=(0,addon_knobs_dist.number)("debounce",0,{},"responsiveContainer"),vertical=(0,addon_knobs_dist.boolean)("vertical",!1,"cartesianGrid"),horizontal=(0,addon_knobs_dist.boolean)("horizontal",!0,"cartesianGrid"),strokeDasharray=(0,addon_knobs_dist.number)("strokeDasharray",0,{},"cartesianGrid"),stroke=(0,addon_knobs_dist.text)("stroke","var(--color-light-border-primary)","cartesianGrid"),fill=(0,addon_knobs_dist.text)("fill","var(--color-light-bg-primary)","cartesianGrid"),initMarginTop=(0,addon_knobs_dist.number)("initMargin.top",40,{},"composeChart"),initMarginBottom=(0,addon_knobs_dist.number)("initMargin.bottom",20,{},"composeChart"),marginLeft=(0,addon_knobs_dist.number)("initMargin.left",20,{},"composeChart"),marginRight=(0,addon_knobs_dist.number)("initMargin.right",50,{},"composeChart"),barCategoryGap=(0,addon_knobs_dist.text)("barCategoryGap","30%","composeChart"),barGap=(0,addon_knobs_dist.number)("barGap",4,{},"composeChart"),maxBarSize=(0,addon_knobs_dist.number)("maxBarSize",24,{},"composeChart"),xAxisHide=(0,addon_knobs_dist.boolean)("hide",!1,"xAxis"),xAxisOrientation=(0,addon_knobs_dist.select)("orientation",{bottom:"bottom",top:"top"},"bottom","xAxis"),xAxisAngle=(0,addon_knobs_dist.number)("angle",0,{},"xAxis"),xAxisTickLine=(0,addon_knobs_dist.boolean)("tickLine",!1,"xAxis"),xAxisTickSize=(0,addon_knobs_dist.number)("tickSize",6,{},"xAxis"),xAxisMirror=(0,addon_knobs_dist.boolean)("mirror",!1,"xAxis"),xAxisReversed=(0,addon_knobs_dist.boolean)("reversed",!1,"xAxis"),xAxisTickMargin=(0,addon_knobs_dist.number)("tickMargin",10,{},"xAxis"),xAxisMinTickGap=(0,addon_knobs_dist.number)("minTickGap",5,{},"xAxis"),xAxisLine=(0,addon_knobs_dist.boolean)("axisLine",!1,"xAxis"),yAxisHide=(0,addon_knobs_dist.boolean)("hide",!1,"yAxis"),yAxisOrientation=(0,addon_knobs_dist.select)("orientation",{left:"left",right:"right"},"left","yAxis"),yAxisAngle=(0,addon_knobs_dist.number)("angle",0,{},"yAxis"),yAxisTickLine=(0,addon_knobs_dist.boolean)("tickLine",!1,"yAxis"),yAxisTickSize=(0,addon_knobs_dist.number)("tickSize",6,{},"yAxis"),yAxisMirror=(0,addon_knobs_dist.boolean)("mirror",!1,"yAxis"),yAxisReversed=(0,addon_knobs_dist.boolean)("reversed",!1,"yAxis"),yAxisTickCoiunt=(0,addon_knobs_dist.number)("tickCount",6,{},"yAxis"),yAxisTickMargin=(0,addon_knobs_dist.number)("tickMargin",0,{},"yAxis"),yAxisMinTickGap=(0,addon_knobs_dist.number)("minTickGap",5,{},"yAxis"),yAxisLine=(0,addon_knobs_dist.boolean)("axisLine",!1,"yAxis"),yAxisLabel=(0,addon_knobs_dist.text)("label","тыс.","yAxis"),legendAlign=(0,addon_knobs_dist.select)("align",{left:"left",center:"center",right:"right"},"center","legend"),legendVerticalAlign=(0,addon_knobs_dist.select)("verticalAlign",{bottom:"bottom",middle:"middle",top:"top"},"bottom","legend"),legendMarginTop=(0,addon_knobs_dist.number)("marginTop",10,{},"legend"),legendIconHeight=(0,addon_knobs_dist.number)("iconHeight",16,{},"legend"),tooltipArrow=(0,addon_knobs_dist.boolean)("arrow",!0,"tooltip"),tooltipIsAnimationActive=(0,addon_knobs_dist.boolean)("isAnimationActive",!0,"tooltip"),tooltipSeparator=(0,addon_knobs_dist.text)("separator"," ","tooltip"),tooltipOffset=(0,addon_knobs_dist.number)("offset",20,{},"tooltip"),cursorStroke=(0,addon_knobs_dist.text)("cursor.stroke","var(--color-light-border-primary)","tooltip"),cursorStrokeWidth=(0,addon_knobs_dist.number)("cursor.strokeWidth",1,{},"tooltip"),tooltipFilterNull=(0,addon_knobs_dist.boolean)("filterNull",!0,"tooltip"),tooltipAnimationBegin=(0,addon_knobs_dist.number)("animationBegin",0,{},"tooltip"),tooltipAnimationDuration=(0,addon_knobs_dist.number)("animationDuration",500,{},"tooltip"),tooltipAnimationEasing=(0,addon_knobs_dist.select)("animationEasing",{ease:"ease","ease-in":"ease-in","ease-out":"ease-out","ease-in-out":"ease-in-out",linear:"linear"},"ease","tooltip"),travellerWidth=(0,addon_knobs_dist.number)("travellerWidth",20,{},"brush"),brushHeight=(0,addon_knobs_dist.number)("height",20,{},"brush"),brushStartIndex=(0,addon_knobs_dist.number)("startIndex",0,{min:0,max:5},"brush"),brushEndIndex=(0,addon_knobs_dist.number)("endIndex",5,{min:0,max:5},"brush"),brushStroke=(0,addon_knobs_dist.text)("stroke","var(--color-static-status-blue)","brush"),brushMargin=(0,addon_knobs_dist.number)("brushMargin",10,{min:0,max:100},"brush"),brushHeightAlwaysShowText=(0,addon_knobs_dist.boolean)("alwaysShowText",!0,"brush"),lineHide=(0,addon_knobs_dist.boolean)("hide",!1,"line"),lineHideLegend=(0,addon_knobs_dist.boolean)("hideLegend",!1,"line"),lineHideTooltip=(0,addon_knobs_dist.boolean)("hideTooltip",!1,"line"),lineZIndex=(0,addon_knobs_dist.number)("zIndex",50,{},"line"),lineIcon=(0,addon_knobs_dist.select)("icon",iconTypes,"circleLine","line"),lineName=(0,addon_knobs_dist.text)("properties.name","остаток","line"),lineStroke=(0,addon_knobs_dist.text)("properties.stroke","var(--color-static-status-blue)","line"),lineDot=(0,addon_knobs_dist.boolean)("properties.dot",!0,"line"),lineScale=(0,addon_knobs_dist.number)("properties.dotSettings.scale",1.5,{},"line"),lineInitScale=(0,addon_knobs_dist.number)("properties.dotSettings.initScale",1,{},"line"),lineWidth=(0,addon_knobs_dist.number)("properties.dotSettings.width",18,{},"line"),lineType=(0,addon_knobs_dist.select)("properties.type",{linear:"linear",monotone:"monotone",step:"step"},"monotone","line"),lineInheritStroke=(0,addon_knobs_dist.boolean)("properties.inheritStroke",!0,"line"),lineStrokeWidth=(0,addon_knobs_dist.number)("properties.strokeWidth",2,{},"line"),lineStrokeDasharray=(0,addon_knobs_dist.text)("properties.strokeDasharray","1 0","line"),barHideLegendFirst=((0,addon_knobs_dist.boolean)("hide",!1,"barFirst"),(0,addon_knobs_dist.boolean)("hideLegend",!1,"barFirst")),barHideTooltipFirst=(0,addon_knobs_dist.boolean)("hideTooltip",!1,"barFirst"),barZIndexFirst=(0,addon_knobs_dist.number)("zIndex",1,{},"barFirst"),barIconFirst=(0,addon_knobs_dist.select)("icon",iconTypes,"circle","barFirst"),barFillFirst=(0,addon_knobs_dist.text)("properties.fill","var(--color-static-graphic-persimmon)","barFirst"),barNameFirst=(0,addon_knobs_dist.text)("properties.name","расход","barFirst"),barHideLegendSecond=((0,addon_knobs_dist.boolean)("hide",!1,"barSecond"),(0,addon_knobs_dist.boolean)("hideLegend",!1,"barSecond")),barHideTooltipSecond=(0,addon_knobs_dist.boolean)("hideTooltip",!1,"barSecond"),barZIndexSecond=(0,addon_knobs_dist.number)("zIndex",10,{},"barSecond"),barIconSecond=(0,addon_knobs_dist.select)("icon",iconTypes,"circle","barSecond"),barFillSecond=(0,addon_knobs_dist.text)("properties.fill","var(--color-static-graphic-green-jungle)","barSecond"),responsiveContainer={debounce:debounce},cartesianGrid={vertical:vertical,horizontal:horizontal,strokeDasharray:strokeDasharray,stroke:stroke,fill:fill},composeChart={initMargin:{top:initMarginTop,bottom:initMarginBottom,left:marginLeft,right:marginRight},barGap:barGap,maxBarSize:maxBarSize,barCategoryGap:barCategoryGap},xAxis={hide:xAxisHide,axisLine:xAxisLine,type:"category",allowDecimals:!0,allowDuplicatedCategory:!0,angle:xAxisAngle,tickCount:5,interval:"preserveStartEnd",minTickGap:xAxisMinTickGap,tickLine:xAxisTickLine,tickSize:xAxisTickSize,mirror:xAxisMirror,reversed:xAxisReversed,tickMargin:xAxisTickMargin,dataKey:"label",orientation:xAxisOrientation},yAxis={hide:yAxisHide,axisLine:yAxisLine,type:"number",allowDecimals:!0,allowDuplicatedCategory:!0,angle:yAxisAngle,tickCount:yAxisTickCoiunt,interval:"preserveStartEnd",minTickGap:yAxisMinTickGap,tickLine:yAxisTickLine,tickSize:yAxisTickSize,mirror:yAxisMirror,reversed:yAxisReversed,tickMargin:yAxisTickMargin,tickFormatter:decimal=>`${decimal} ${yAxisLabel}`,orientation:yAxisOrientation},legend={verticalAlign:legendVerticalAlign,align:legendAlign,marginTop:legendMarginTop,iconHeight:legendIconHeight},tooltip={separator:tooltipSeparator,offset:tooltipOffset,filterNull:tooltipFilterNull,cursor:{stroke:cursorStroke,strokeWidth:cursorStrokeWidth},isAnimationActive:tooltipIsAnimationActive,animationBegin:tooltipAnimationBegin,animationDuration:tooltipAnimationDuration,animationEasing:tooltipAnimationEasing,arrow:tooltipArrow},brush={dataKey:"label",travellerWidth:travellerWidth,startIndex:brushStartIndex,endIndex:brushEndIndex,brushMargin:brushMargin,height:brushHeight,alwaysShowText:brushHeightAlwaysShowText,stroke:brushStroke},labelsBarChart=["Январь","Февраль","Март","Апрель","Май","Июнь"],barChartFirst={hide:barHideLegendFirst,hideLegend:barHideLegendFirst,hideTooltip:barHideTooltipFirst,zIndex:barZIndexFirst,chart:"bar",icon:barIconFirst,properties:{name:barNameFirst,dataKey:"uv",formatter:decimal=>""+1e3*decimal,fill:barFillFirst},data:[{label:"Январь",value:80},{label:"Февраль",value:140},{label:"Март",value:70},{label:"Апрель",value:210},{label:"Май",value:80},{label:"Июнь",value:20}]},barChartSecond={hide:barHideLegendSecond,hideLegend:barHideLegendSecond,hideTooltip:barHideTooltipSecond,zIndex:barZIndexSecond,chart:"bar",icon:barIconSecond,properties:{name:(0,addon_knobs_dist.text)("properties.name","приход","barSecond"),dataKey:"pv",formatter:decimal=>""+1e3*decimal,fill:barFillSecond},data:[{label:"Январь",value:110},{label:"Февраль",value:190},{label:"Март",value:60},{label:"Апрель",value:230},{label:"Май",value:190},{label:"Июнь",value:30}]},lineChart={hide:lineHide,hideLegend:lineHideLegend,hideTooltip:lineHideTooltip,zIndex:lineZIndex,chart:"line",icon:lineIcon,properties:{name:lineName,dataKey:"cnt",stroke:lineStroke,dot:lineDot,dotSettings:{scale:lineScale,initScale:lineInitScale,width:lineWidth,height:lineWidth},inheritStroke:lineInheritStroke,formatter:decimal=>""+1e3*decimal,type:lineType,strokeWidth:lineStrokeWidth,strokeDasharray:lineStrokeDasharray},data:[{label:"Январь",value:60},{label:"Февраль",value:95},{label:"Март",value:20},{label:"Апрель",value:180},{label:"Май",value:70},{label:"Июнь",value:10}]},barChartOptions={id:"bar-chart",composeChart:composeChart,responsiveContainer:responsiveContainer,cartesianGrid:cartesianGrid,xAxis:xAxis,yAxis:yAxis,tooltip:tooltip,legend:legend,brush:brush,labels:labelsBarChart,series:[barChartFirst,barChartSecond,lineChart]};return(0,jsx_runtime.jsxs)(_components.div,{style:{display:"flex"},children:[(0,jsx_runtime.jsx)(_components.div,{style:{marginBottom:"20px",top:25,width:"1050px",height:"600px"},children:(0,jsx_runtime.jsx)(modern.Chart,{id:"bar-chart",composeChart:composeChart,responsiveContainer:responsiveContainer,cartesianGrid:cartesianGrid,xAxis:xAxis,yAxis:yAxis,tooltip:tooltip,legend:legend,brush:brush,labels:labelsBarChart,series:[barChartFirst,barChartSecond,lineChart]})}),(0,jsx_runtime.jsx)(_components.div,{style:{width:"500px",height:"600px",overflow:"auto"},children:(0,jsx_runtime.jsx)(_components.pre,{children:JSON.stringify((obj=>{const series=JSON.parse(JSON.stringify(obj)).series.map((item=>(item.data=[{label:"label",value:"value"},"..."],item)));return{...obj,labels:["label","label","..."],series:series}})(barChartOptions),null,2)})})]})}))}),"\n","\n",(0,jsx_runtime.jsx)(dist.oG,{name:"Chart.Line",children:react.createElement((()=>{const formatXAxis=time=>(0,format.Z)(time,"dd LLL"),linesType={linear:"linear",monotone:"monotone",step:"step"},iconTypes={circleLine:"circleLine",filledCircle:"filledCircle",strokeCircle:"strokeCircle",circle:"circle"},xAxisId="xAxisId",yAxisId="yAxisId",lineId="lineId",areaId="areaId",debounce=(0,addon_knobs_dist.number)("debounce",0,{},"responsiveContainerId"),vertical=(0,addon_knobs_dist.boolean)("vertical",!0,"cartesianGridId"),horizontal=(0,addon_knobs_dist.boolean)("horizontal",!0,"cartesianGridId"),strokeDasharray=(0,addon_knobs_dist.number)("strokeDasharray",0,{},"cartesianGridId"),stroke=(0,addon_knobs_dist.text)("stroke","var(--color-light-border-primary)","cartesianGridId"),fill=(0,addon_knobs_dist.text)("fill","var(--color-light-bg-primary)","cartesianGridId"),initMarginTop=(0,addon_knobs_dist.number)("initMargin.top",40,{},"composeChartId"),initMarginBottom=(0,addon_knobs_dist.number)("initMargin.bottom",20,{},"composeChartId"),marginLeft=(0,addon_knobs_dist.number)("initMargin.left",20,{},"composeChartId"),marginRight=(0,addon_knobs_dist.number)("initMargin.right",70,{},"composeChartId"),barCategoryGap=(0,addon_knobs_dist.text)("barCategoryGap","30%","composeChartId"),barSize=((0,addon_knobs_dist.number)("barGap",4,{},"composeChartId"),(0,addon_knobs_dist.number)("barSize",24,{},"composeChartId")),maxBarSize=(0,addon_knobs_dist.number)("maxBarSize",24,{},"composeChartId"),xAxisHide=(0,addon_knobs_dist.boolean)("hide",!1,xAxisId),xAxisOrientation=(0,addon_knobs_dist.select)("orientation",{bottom:"bottom",top:"top"},"bottom",xAxisId),xAxisAngle=(0,addon_knobs_dist.number)("angle",0,{},xAxisId),xAxisTickLine=(0,addon_knobs_dist.boolean)("tickLine",!1,xAxisId),xAxisTickSize=(0,addon_knobs_dist.number)("tickSize",6,{},xAxisId),xAxisMirror=(0,addon_knobs_dist.boolean)("mirror",!1,xAxisId),xAxisReversed=(0,addon_knobs_dist.boolean)("reversed",!1,xAxisId),xAxisTickMargin=(0,addon_knobs_dist.number)("tickMargin",2,{},xAxisId),xAxisMinTickGap=(0,addon_knobs_dist.number)("minTickGap",20,{},xAxisId),xAxisLine=(0,addon_knobs_dist.boolean)("axisLine",!1,xAxisId),yAxisHide=(0,addon_knobs_dist.boolean)("hide",!1,yAxisId),yAxisOrientation=(0,addon_knobs_dist.select)("orientation",{left:"left",right:"right"},"left",yAxisId),yAxisAngle=(0,addon_knobs_dist.number)("angle",0,{},yAxisId),yAxisTickLine=(0,addon_knobs_dist.boolean)("tickLine",!1,yAxisId),yAxisTickSize=(0,addon_knobs_dist.number)("tickSize",6,{},yAxisId),yAxisMirror=(0,addon_knobs_dist.boolean)("mirror",!1,yAxisId),yAxisReversed=(0,addon_knobs_dist.boolean)("reversed",!1,yAxisId),yAxisTickCoiunt=(0,addon_knobs_dist.number)("tickCount",6,{},yAxisId),yAxisMinTickGap=(0,addon_knobs_dist.number)("minTickGap",5,{},yAxisId),yAxisTickMargin=(0,addon_knobs_dist.number)("tickMargin",0,{},yAxisId),yAxisLine=(0,addon_knobs_dist.boolean)("axisLine",!1,yAxisId),yAxisLabel=(0,addon_knobs_dist.text)("label","",yAxisId),legendAlign=(0,addon_knobs_dist.select)("align",{left:"left",center:"center",right:"right"},"right","legendId"),legendVerticalAlign=(0,addon_knobs_dist.select)("verticalAlign",{bottom:"bottom",middle:"middle",top:"top"},"top","legendId"),legendMarginTop=(0,addon_knobs_dist.number)("marginTop",20,{},"legendId"),legendIconHeight=(0,addon_knobs_dist.number)("iconHeight",20,{},"legendId"),tooltipArrow=(0,addon_knobs_dist.boolean)("arrow",!0,"tooltipId"),tooltipIsAnimationActive=(0,addon_knobs_dist.boolean)("isAnimationActive",!0,"tooltipId"),tooltipSeparator=(0,addon_knobs_dist.text)("separator"," ","tooltipId"),tooltipOffset=(0,addon_knobs_dist.number)("offset",20,{},"tooltipId"),cursorStroke=(0,addon_knobs_dist.text)("cursor.stroke","var(--color-light-border-primary)","tooltipId"),cursorStrokeWidth=(0,addon_knobs_dist.number)("cursor.strokeWidth",1,{},"tooltipId"),tooltipFilterNull=(0,addon_knobs_dist.boolean)("filterNull",!0,"tooltipId"),tooltipAnimationBegin=(0,addon_knobs_dist.number)("animationBegin",0,{},"tooltipId"),tooltipAnimationDuration=(0,addon_knobs_dist.number)("animationDuration",500,{},"tooltipId"),tooltipAnimationEasing=(0,addon_knobs_dist.select)("animationEasing",{ease:"ease","ease-in":"ease-in","ease-out":"ease-out","ease-in-out":"ease-in-out",linear:"linear"},"ease","tooltipId"),travellerWidth=(0,addon_knobs_dist.number)("travellerWidth",20,{},"brushId"),brushHeight=(0,addon_knobs_dist.number)("height",20,{},"brushId"),brushStartIndex=(0,addon_knobs_dist.number)("startIndex",0,{min:0,max:47},"brushId"),brushEndIndex=(0,addon_knobs_dist.number)("endIndex",47,{min:0,max:47},"brushId"),brushStroke=(0,addon_knobs_dist.text)("stroke","var(--color-static-status-blue)","brushId"),brushMargin=(0,addon_knobs_dist.number)("brushMargin",10,{min:0,max:100},"brushId"),brushHeightAlwaysShowText=(0,addon_knobs_dist.boolean)("alwaysShowText",!0,"brushId"),lineHide=(0,addon_knobs_dist.boolean)("hide",!1,lineId),lineHideLegend=(0,addon_knobs_dist.boolean)("hideLegend",!1,lineId),lineHideTooltip=(0,addon_knobs_dist.boolean)("hideTooltip",!1,lineId),lineIcon=((0,addon_knobs_dist.number)("zIndex",50,{},lineId),(0,addon_knobs_dist.select)("icon",iconTypes,"strokeCircle",lineId)),lineName=(0,addon_knobs_dist.text)("properties.name","текущий период",lineId),lineStroke=(0,addon_knobs_dist.text)("properties.stroke","var(--color-static-status-blue)",lineId),lineDot=(0,addon_knobs_dist.boolean)("properties.dot",!0,lineId),lineScale=(0,addon_knobs_dist.number)("properties.dotSettings.scale",1.5,{},lineId),lineInitScale=(0,addon_knobs_dist.number)("properties.dotSettings.initScale",0,{},lineId),lineStrokeWidth=(0,addon_knobs_dist.number)("properties.strokeWidth",2,{},lineId),lineInheritStroke=(0,addon_knobs_dist.boolean)("properties.inheritStroke",!0,lineId),lineType=(0,addon_knobs_dist.select)("properties.type",linesType,"monotone",lineId),lineWidth=(0,addon_knobs_dist.number)("properties.dotSettings.width",18,{},lineId),lineStrokeDasharray=(0,addon_knobs_dist.text)("properties.strokeDasharray","10 10",lineId),areaHide=(0,addon_knobs_dist.boolean)("hide",!1,areaId),areaHideLegend=(0,addon_knobs_dist.boolean)("hideLegend",!1,areaId),areaHideTooltip=(0,addon_knobs_dist.boolean)("hideTooltip",!1,areaId),areaZIndex=(0,addon_knobs_dist.number)("zIndex",100,{},areaId),areaIcon=(0,addon_knobs_dist.select)("icon",iconTypes,"filledCircle",areaId),areaOffset=(0,addon_knobs_dist.number)("offset",.1,{min:0,max:1,step:.1},areaId),areaColor_1=(0,addon_knobs_dist.text)("gradient.points.color above","rgba(0, 112, 224, 0.2)",areaId),areaColorOpacity_1=(0,addon_knobs_dist.number)("gradient.points.opacity of color above",1,{min:0,max:1,step:.1},areaId),areaColor_2=(0,addon_knobs_dist.text)("gradient.points.color below","rgba(0, 128, 255, 0)",areaId),areaColorOpacity_2=(0,addon_knobs_dist.number)("gradient opacity of color below",1,{min:0,max:1,step:.1},areaId),areaName=(0,addon_knobs_dist.text)("properties.name","предыдущий период",areaId),areaType=(0,addon_knobs_dist.select)("properties.type",linesType,"monotone",areaId),areaStroke=(0,addon_knobs_dist.text)("properties.stroke","var(--color-static-status-blue)",areaId),areaScale=(0,addon_knobs_dist.number)("properties.dotSettings.scale",1.5,{},areaId),areaInitScale=(0,addon_knobs_dist.number)("properties.dotSettings.initScale",0,{},areaId),areaWidth=(0,addon_knobs_dist.number)("properties.dotSettings.width",18,{},areaId),areaStrokeWidth=(0,addon_knobs_dist.number)("properties.strokeWidth",2,{},areaId),areaDot=(0,addon_knobs_dist.boolean)("properties.dot",!0,areaId),responsiveContainer=((0,addon_knobs_dist.text)("properties.strokeDasharray","10 10",areaId),{debounce:debounce}),cartesianGrid={vertical:vertical,horizontal:horizontal,strokeDasharray:strokeDasharray,stroke:stroke,fill:fill},composeChart={initMargin:{top:initMarginTop,bottom:initMarginBottom,left:marginLeft,right:marginRight},barCategoryGap:barCategoryGap,barSize:barSize,maxBarSize:maxBarSize},xAxis={hide:xAxisHide,axisLine:xAxisLine,type:"category",allowDecimals:!0,allowDuplicatedCategory:!0,angle:xAxisAngle,tickCount:5,interval:"preserveStartEnd",minTickGap:xAxisMinTickGap,tickLine:xAxisTickLine,tickSize:xAxisTickSize,mirror:xAxisMirror,reversed:xAxisReversed,dataKey:"label",tickMargin:xAxisTickMargin,orientation:xAxisOrientation,tickFormatter:formatXAxis,tickType:"point"},yAxis={hide:yAxisHide,axisLine:yAxisLine,type:"number",allowDecimals:!0,allowDuplicatedCategory:!0,angle:yAxisAngle,tickCount:yAxisTickCoiunt,interval:"preserveStartEnd",minTickGap:yAxisMinTickGap,tickLine:yAxisTickLine,tickSize:yAxisTickSize,mirror:yAxisMirror,reversed:yAxisReversed,tickFormatter:decimal=>`${decimal} ${yAxisLabel}`,orientation:yAxisOrientation,tickMargin:yAxisTickMargin},legend={verticalAlign:legendVerticalAlign,align:legendAlign,marginTop:legendMarginTop,iconHeight:legendIconHeight},tooltip={separator:tooltipSeparator,offset:tooltipOffset,filterNull:tooltipFilterNull,cursor:{stroke:cursorStroke,strokeWidth:cursorStrokeWidth},isAnimationActive:tooltipIsAnimationActive,animationBegin:tooltipAnimationBegin,animationDuration:tooltipAnimationDuration,animationEasing:tooltipAnimationEasing,arrow:tooltipArrow,labelFormatter:formatXAxis},brush={dataKey:"label",travellerWidth:travellerWidth,startIndex:brushStartIndex,endIndex:brushEndIndex,brushMargin:brushMargin,height:brushHeight,stroke:brushStroke,alwaysShowText:brushHeightAlwaysShowText,tickFormatter:formatXAxis},labelsLineChart=[16082424e5,16083288e5,16084152e5,16085016e5,1608588e6,16086744e5,16087608e5,16088472e5,16089336e5,160902e7,16091064e5,16091928e5,16092792e5,16093656e5,1609452e6,16095384e5,16096248e5,16097112e5,16097976e5,1609884e6,16099704e5,16100568e5,16101432e5,16102296e5,1610316e6,16104024e5,16104888e5,16105752e5,16106616e5,1610748e6,16108344e5,16109208e5,16110072e5,16110936e5,161118e7,16112664e5,16113528e5,16114392e5,16115256e5,1611612e6,16116984e5,16117848e5,16118712e5,16119576e5,1612044e6,16121304e5,16122168e5,16123032e5],lineChart={hide:lineHide,hideLegend:lineHideLegend,hideTooltip:lineHideTooltip,zIndex:200,chart:"line",icon:lineIcon,properties:{name:lineName,dataKey:"b",stroke:lineStroke,dot:lineDot,dotSettings:{scale:lineScale,initScale:lineInitScale,width:lineWidth,height:lineWidth},inheritStroke:lineInheritStroke,type:lineType,strokeWidth:lineStrokeWidth,strokeDasharray:lineStrokeDasharray},data:[{label:16082424e5,value:35},{label:16083288e5,value:20},{label:16084152e5,value:34},{label:16085016e5,value:42},{label:1608588e6,value:14},{label:16086744e5,value:37},{label:16087608e5,value:19},{label:16088472e5,value:37},{label:16089336e5,value:22},{label:160902e7,value:21},{label:16091064e5,value:28},{label:16091928e5,value:26},{label:16092792e5,value:31},{label:16093656e5,value:37},{label:1609452e6,value:40},{label:16095384e5,value:39},{label:16096248e5,value:45},{label:16097112e5,value:40},{label:16097976e5,value:45},{label:1609884e6,value:40},{label:16099704e5,value:45},{label:16100568e5,value:46},{label:16101432e5,value:36},{label:16102296e5,value:50},{label:1610316e6,value:44},{label:16104024e5,value:55},{label:16104888e5,value:59},{label:16105752e5,value:65},{label:16106616e5,value:49},{label:1610748e6,value:51},{label:16108344e5,value:69},{label:16109208e5,value:61},{label:16110072e5,value:63},{label:16110936e5,value:57},{label:161118e7,value:61},{label:16112664e5,value:43},{label:16113528e5,value:68},{label:16114392e5,value:69},{label:16115256e5,value:69},{label:1611612e6,value:76},{label:16116984e5,value:61},{label:16117848e5,value:84},{label:16118712e5,value:96},{label:16119576e5,value:97},{label:1612044e6,value:72},{label:16121304e5,value:71},{label:16122168e5,value:88},{label:16123032e5,value:87}]},areaChart={hide:areaHide,hideLegend:areaHideLegend,hideTooltip:areaHideTooltip,zIndex:areaZIndex,chart:"area",icon:areaIcon,offset:areaOffset,gradient:{gid:"ar-grad",points:[{offset:0,stopColor:areaColor_1,stopOpacity:areaColorOpacity_1},{offset:95,stopColor:areaColor_2,stopOpacity:areaColorOpacity_2}]},properties:{name:areaName,dataKey:"a",type:areaType,stroke:areaStroke,dotSettings:{scale:areaScale,initScale:areaInitScale,width:areaWidth,height:areaWidth},dot:areaDot,strokeWidth:areaStrokeWidth},data:[{label:16082424e5,value:70},{label:16083288e5,value:40},{label:16084152e5,value:69},{label:16085016e5,value:84},{label:1608588e6,value:29},{label:16086744e5,value:74},{label:16087608e5,value:39},{label:16088472e5,value:74},{label:16089336e5,value:44},{label:160902e7,value:43},{label:16091064e5,value:57},{label:16091928e5,value:52},{label:16092792e5,value:62},{label:16093656e5,value:74},{label:1609452e6,value:81},{label:16095384e5,value:78},{label:16096248e5,value:91},{label:16097112e5,value:80},{label:16097976e5,value:90},{label:1609884e6,value:80},{label:16099704e5,value:91},{label:16100568e5,value:93},{label:16101432e5,value:72},{label:16102296e5,value:101},{label:1610316e6,value:88},{label:16104024e5,value:110},{label:16104888e5,value:119},{label:16105752e5,value:130},{label:16106616e5,value:98},{label:1610748e6,value:102},{label:16108344e5,value:139},{label:16109208e5,value:123},{label:16110072e5,value:127},{label:16110936e5,value:114},{label:161118e7,value:123},{label:16112664e5,value:86},{label:16113528e5,value:136},{label:16114392e5,value:139},{label:16115256e5,value:138},{label:1611612e6,value:153},{label:16116984e5,value:122},{label:16117848e5,value:169},{label:16118712e5,value:192},{label:16119576e5,value:195},{label:1612044e6,value:144},{label:16121304e5,value:142},{label:16122168e5,value:176},{label:16123032e5,value:174}]},lineChartOptions={id:"line-chart",composeChart:composeChart,responsiveContainer:responsiveContainer,cartesianGrid:cartesianGrid,xAxis:xAxis,yAxis:yAxis,tooltip:tooltip,legend:legend,brush:brush,labels:labelsLineChart,series:[areaChart]};return(0,jsx_runtime.jsxs)(_components.div,{style:{display:"flex"},children:[(0,jsx_runtime.jsx)(_components.div,{style:{marginBottom:"20px",top:25,width:"1050px",height:"600px"},children:(0,jsx_runtime.jsx)(modern.Chart,{id:"line-chart",composeChart:composeChart,responsiveContainer:responsiveContainer,cartesianGrid:cartesianGrid,xAxis:xAxis,yAxis:yAxis,tooltip:tooltip,legend:legend,brush:brush,labels:labelsLineChart,series:[lineChart,areaChart]})}),(0,jsx_runtime.jsx)(_components.div,{style:{width:"500px",height:"600px",overflow:"auto"},children:(0,jsx_runtime.jsx)(_components.pre,{children:JSON.stringify((obj=>{const series=JSON.parse(JSON.stringify(obj)).series.map((item=>(item.data=[{label:"label",value:"value"},"..."],item)));return{...obj,labels:["label","label","..."],series:series}})(lineChartOptions),null,2)})})]})}))}),"\n","\n",(0,jsx_runtime.jsx)(dist.oG,{name:"Chart.Histogram",children:react.createElement((()=>{const debounce=(0,addon_knobs_dist.number)("debounce",0,{},"responsiveContainer"),vertical=(0,addon_knobs_dist.boolean)("vertical",!1,"cartesianGrid"),horizontal=(0,addon_knobs_dist.boolean)("horizontal",!1,"cartesianGrid"),initMarginTop=(0,addon_knobs_dist.number)("initMargin.top",40,{},"composeChart"),initMarginBottom=(0,addon_knobs_dist.number)("initMargin.bottom",20,{},"composeChart"),marginLeft=(0,addon_knobs_dist.number)("initMargin.left",20,{},"composeChart"),marginRight=(0,addon_knobs_dist.number)("initMargin.right",50,{},"composeChart"),barCategoryGap=(0,addon_knobs_dist.text)("barCategoryGap","10%","composeChart"),barGap=(0,addon_knobs_dist.number)("barGap",4,{},"composeChart"),maxBarSize=(0,addon_knobs_dist.number)("maxBarSize",64,{},"composeChart"),xAxisHide=(0,addon_knobs_dist.boolean)("hide",!1,"xAxis"),xAxisOrientation=(0,addon_knobs_dist.select)("orientation",{bottom:"bottom",top:"top"},"bottom","xAxis"),xAxisTickLine=(0,addon_knobs_dist.boolean)("tickLine",!1,"xAxis"),xAxisTickSize=(0,addon_knobs_dist.number)("tickSize",6,{},"xAxis"),xAxisTickMargin=(0,addon_knobs_dist.number)("tickMargin",10,{},"xAxis"),xAxisMinTickGap=(0,addon_knobs_dist.number)("minTickGap",5,{},"xAxis"),xAxisLine=(0,addon_knobs_dist.boolean)("axisLine",!1,"xAxis"),yAxisHide=(0,addon_knobs_dist.boolean)("hide",!0,"yAxis"),barHideLegend=((0,addon_knobs_dist.boolean)("hide",!1,"bar"),(0,addon_knobs_dist.boolean)("hideLegend",!1,"bar")),barHideTooltip=(0,addon_knobs_dist.boolean)("hideTooltip",!1,"bar"),barZIndex=(0,addon_knobs_dist.number)("zIndex",10,{},"bar"),barIcon=(0,addon_knobs_dist.select)("icon",{circleLine:"circleLine",filledCircle:"filledCircle",strokeCircle:"strokeCircle",circle:"circle"},"circle","bar"),barRadius=(0,addon_knobs_dist.object)("radius",{top:10,bottom:10},"bar"),barFormatter=(0,addon_knobs_dist.text)("labelList.formatter","","bar"),barLabelListOffset=(0,addon_knobs_dist.number)("labelList.offset",10,{},"bar"),barFill=(0,addon_knobs_dist.text)("properties.fill","var(--color-static-graphic-green-jungle)","bar"),responsiveContainer={debounce:debounce},cartesianGrid={vertical:vertical,horizontal:horizontal},composeChart={initMargin:{top:initMarginTop,bottom:initMarginBottom,left:marginLeft,right:marginRight},barGap:barGap,maxBarSize:maxBarSize,barCategoryGap:barCategoryGap},xAxis={hide:xAxisHide,axisLine:xAxisLine,type:"category",allowDecimals:!0,allowDuplicatedCategory:!0,interval:"preserveStartEnd",minTickGap:xAxisMinTickGap,tickLine:xAxisTickLine,tickSize:xAxisTickSize,tickMargin:xAxisTickMargin,dataKey:"label",orientation:xAxisOrientation},yAxis={hide:yAxisHide},labelsBarChart=["Long label","Label1","Label2","Label3","Label4","Label5","Label6","Label7"],barChart={hide:barHideLegend,hideLegend:barHideLegend,hideTooltip:barHideTooltip,zIndex:barZIndex,chart:"bar",icon:barIcon,radius:barRadius||0,labelList:{formatter:decimal=>`${decimal}${barFormatter}`,offset:barLabelListOffset},properties:{name:(0,addon_knobs_dist.text)("properties.name","приход","bar"),dataKey:"cm",formatter:decimal=>""+1e3*decimal,fill:barFill},data:[{label:"Long label",value:5e3},{label:"Label1",value:650},{label:"Label2",value:3522},{label:"Label3",value:0},{label:"Label4",value:2e3},{label:"Label5",value:1043},{label:"Label6",value:600},{label:"Label7",value:1}]},barChartOptions={id:"bar-chart",composeChart:composeChart,responsiveContainer:responsiveContainer,cartesianGrid:cartesianGrid,xAxis:xAxis,yAxis:yAxis,labels:labelsBarChart,series:[barChart]};return(0,jsx_runtime.jsxs)(_components.div,{style:{display:"flex"},children:[(0,jsx_runtime.jsx)(_components.div,{style:{marginBottom:"20px",top:25,width:"1050px",height:"600px"},children:(0,jsx_runtime.jsx)(modern.Chart,{id:"bar-chart",composeChart:composeChart,responsiveContainer:responsiveContainer,cartesianGrid:cartesianGrid,xAxis:xAxis,yAxis:yAxis,labels:labelsBarChart,series:[barChart]})}),(0,jsx_runtime.jsx)(_components.div,{style:{width:"500px",height:"600px",overflow:"auto"},children:(0,jsx_runtime.jsx)(_components.pre,{children:JSON.stringify((obj=>{const series=JSON.parse(JSON.stringify(obj)).series.map((item=>(item.data=[{label:"label",value:"value"},"..."],item)));return{...obj,labels:["label","label","..."],series:series}})(barChartOptions),null,2)})})]})}))}),"\n","\n",(0,jsx_runtime.jsx)(blocks.yt,{name:"Chart",version:package_namespaceObject.i8,package:"@alfalab/core-components/chart"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"import { Chart } from '@alfalab/core-components/chart';\n"})}),"\n",(0,jsx_runtime.jsx)(blocks.mQ,{description:(0,jsx_runtime.jsx)(description,{}),changelog:(0,jsx_runtime.jsx)(dist.UG,{children:CHANGELOGraw_namespaceObject}),props:(0,jsx_runtime.jsx)(dist.$4,{of:Component.k})})]})}const chartBar=()=>react.createElement((()=>{const iconTypes={circleLine:"circleLine",filledCircle:"filledCircle",strokeCircle:"strokeCircle",circle:"circle"},debounce=(0,addon_knobs_dist.number)("debounce",0,{},"responsiveContainer"),vertical=(0,addon_knobs_dist.boolean)("vertical",!1,"cartesianGrid"),horizontal=(0,addon_knobs_dist.boolean)("horizontal",!0,"cartesianGrid"),strokeDasharray=(0,addon_knobs_dist.number)("strokeDasharray",0,{},"cartesianGrid"),stroke=(0,addon_knobs_dist.text)("stroke","var(--color-light-border-primary)","cartesianGrid"),fill=(0,addon_knobs_dist.text)("fill","var(--color-light-bg-primary)","cartesianGrid"),initMarginTop=(0,addon_knobs_dist.number)("initMargin.top",40,{},"composeChart"),initMarginBottom=(0,addon_knobs_dist.number)("initMargin.bottom",20,{},"composeChart"),marginLeft=(0,addon_knobs_dist.number)("initMargin.left",20,{},"composeChart"),marginRight=(0,addon_knobs_dist.number)("initMargin.right",50,{},"composeChart"),barCategoryGap=(0,addon_knobs_dist.text)("barCategoryGap","30%","composeChart"),barGap=(0,addon_knobs_dist.number)("barGap",4,{},"composeChart"),maxBarSize=(0,addon_knobs_dist.number)("maxBarSize",24,{},"composeChart"),xAxisHide=(0,addon_knobs_dist.boolean)("hide",!1,"xAxis"),xAxisOrientation=(0,addon_knobs_dist.select)("orientation",{bottom:"bottom",top:"top"},"bottom","xAxis"),xAxisAngle=(0,addon_knobs_dist.number)("angle",0,{},"xAxis"),xAxisTickLine=(0,addon_knobs_dist.boolean)("tickLine",!1,"xAxis"),xAxisTickSize=(0,addon_knobs_dist.number)("tickSize",6,{},"xAxis"),xAxisMirror=(0,addon_knobs_dist.boolean)("mirror",!1,"xAxis"),xAxisReversed=(0,addon_knobs_dist.boolean)("reversed",!1,"xAxis"),xAxisTickMargin=(0,addon_knobs_dist.number)("tickMargin",10,{},"xAxis"),xAxisMinTickGap=(0,addon_knobs_dist.number)("minTickGap",5,{},"xAxis"),xAxisLine=(0,addon_knobs_dist.boolean)("axisLine",!1,"xAxis"),yAxisHide=(0,addon_knobs_dist.boolean)("hide",!1,"yAxis"),yAxisOrientation=(0,addon_knobs_dist.select)("orientation",{left:"left",right:"right"},"left","yAxis"),yAxisAngle=(0,addon_knobs_dist.number)("angle",0,{},"yAxis"),yAxisTickLine=(0,addon_knobs_dist.boolean)("tickLine",!1,"yAxis"),yAxisTickSize=(0,addon_knobs_dist.number)("tickSize",6,{},"yAxis"),yAxisMirror=(0,addon_knobs_dist.boolean)("mirror",!1,"yAxis"),yAxisReversed=(0,addon_knobs_dist.boolean)("reversed",!1,"yAxis"),yAxisTickCoiunt=(0,addon_knobs_dist.number)("tickCount",6,{},"yAxis"),yAxisTickMargin=(0,addon_knobs_dist.number)("tickMargin",0,{},"yAxis"),yAxisMinTickGap=(0,addon_knobs_dist.number)("minTickGap",5,{},"yAxis"),yAxisLine=(0,addon_knobs_dist.boolean)("axisLine",!1,"yAxis"),yAxisLabel=(0,addon_knobs_dist.text)("label","тыс.","yAxis"),legendAlign=(0,addon_knobs_dist.select)("align",{left:"left",center:"center",right:"right"},"center","legend"),legendVerticalAlign=(0,addon_knobs_dist.select)("verticalAlign",{bottom:"bottom",middle:"middle",top:"top"},"bottom","legend"),legendMarginTop=(0,addon_knobs_dist.number)("marginTop",10,{},"legend"),legendIconHeight=(0,addon_knobs_dist.number)("iconHeight",16,{},"legend"),tooltipArrow=(0,addon_knobs_dist.boolean)("arrow",!0,"tooltip"),tooltipIsAnimationActive=(0,addon_knobs_dist.boolean)("isAnimationActive",!0,"tooltip"),tooltipSeparator=(0,addon_knobs_dist.text)("separator"," ","tooltip"),tooltipOffset=(0,addon_knobs_dist.number)("offset",20,{},"tooltip"),cursorStroke=(0,addon_knobs_dist.text)("cursor.stroke","var(--color-light-border-primary)","tooltip"),cursorStrokeWidth=(0,addon_knobs_dist.number)("cursor.strokeWidth",1,{},"tooltip"),tooltipFilterNull=(0,addon_knobs_dist.boolean)("filterNull",!0,"tooltip"),tooltipAnimationBegin=(0,addon_knobs_dist.number)("animationBegin",0,{},"tooltip"),tooltipAnimationDuration=(0,addon_knobs_dist.number)("animationDuration",500,{},"tooltip"),tooltipAnimationEasing=(0,addon_knobs_dist.select)("animationEasing",{ease:"ease","ease-in":"ease-in","ease-out":"ease-out","ease-in-out":"ease-in-out",linear:"linear"},"ease","tooltip"),travellerWidth=(0,addon_knobs_dist.number)("travellerWidth",20,{},"brush"),brushHeight=(0,addon_knobs_dist.number)("height",20,{},"brush"),brushStartIndex=(0,addon_knobs_dist.number)("startIndex",0,{min:0,max:5},"brush"),brushEndIndex=(0,addon_knobs_dist.number)("endIndex",5,{min:0,max:5},"brush"),brushStroke=(0,addon_knobs_dist.text)("stroke","var(--color-static-status-blue)","brush"),brushMargin=(0,addon_knobs_dist.number)("brushMargin",10,{min:0,max:100},"brush"),brushHeightAlwaysShowText=(0,addon_knobs_dist.boolean)("alwaysShowText",!0,"brush"),lineHide=(0,addon_knobs_dist.boolean)("hide",!1,"line"),lineHideLegend=(0,addon_knobs_dist.boolean)("hideLegend",!1,"line"),lineHideTooltip=(0,addon_knobs_dist.boolean)("hideTooltip",!1,"line"),lineZIndex=(0,addon_knobs_dist.number)("zIndex",50,{},"line"),lineIcon=(0,addon_knobs_dist.select)("icon",iconTypes,"circleLine","line"),lineName=(0,addon_knobs_dist.text)("properties.name","остаток","line"),lineStroke=(0,addon_knobs_dist.text)("properties.stroke","var(--color-static-status-blue)","line"),lineDot=(0,addon_knobs_dist.boolean)("properties.dot",!0,"line"),lineScale=(0,addon_knobs_dist.number)("properties.dotSettings.scale",1.5,{},"line"),lineInitScale=(0,addon_knobs_dist.number)("properties.dotSettings.initScale",1,{},"line"),lineWidth=(0,addon_knobs_dist.number)("properties.dotSettings.width",18,{},"line"),lineType=(0,addon_knobs_dist.select)("properties.type",{linear:"linear",monotone:"monotone",step:"step"},"monotone","line"),lineInheritStroke=(0,addon_knobs_dist.boolean)("properties.inheritStroke",!0,"line"),lineStrokeWidth=(0,addon_knobs_dist.number)("properties.strokeWidth",2,{},"line"),lineStrokeDasharray=(0,addon_knobs_dist.text)("properties.strokeDasharray","1 0","line"),barHideLegendFirst=((0,addon_knobs_dist.boolean)("hide",!1,"barFirst"),(0,addon_knobs_dist.boolean)("hideLegend",!1,"barFirst")),barHideTooltipFirst=(0,addon_knobs_dist.boolean)("hideTooltip",!1,"barFirst"),barZIndexFirst=(0,addon_knobs_dist.number)("zIndex",1,{},"barFirst"),barIconFirst=(0,addon_knobs_dist.select)("icon",iconTypes,"circle","barFirst"),barFillFirst=(0,addon_knobs_dist.text)("properties.fill","var(--color-static-graphic-persimmon)","barFirst"),barNameFirst=(0,addon_knobs_dist.text)("properties.name","расход","barFirst"),barHideLegendSecond=((0,addon_knobs_dist.boolean)("hide",!1,"barSecond"),(0,addon_knobs_dist.boolean)("hideLegend",!1,"barSecond")),barHideTooltipSecond=(0,addon_knobs_dist.boolean)("hideTooltip",!1,"barSecond"),barZIndexSecond=(0,addon_knobs_dist.number)("zIndex",10,{},"barSecond"),barIconSecond=(0,addon_knobs_dist.select)("icon",iconTypes,"circle","barSecond"),barFillSecond=(0,addon_knobs_dist.text)("properties.fill","var(--color-static-graphic-green-jungle)","barSecond"),responsiveContainer={debounce:debounce},cartesianGrid={vertical:vertical,horizontal:horizontal,strokeDasharray:strokeDasharray,stroke:stroke,fill:fill},composeChart={initMargin:{top:initMarginTop,bottom:initMarginBottom,left:marginLeft,right:marginRight},barGap:barGap,maxBarSize:maxBarSize,barCategoryGap:barCategoryGap},xAxis={hide:xAxisHide,axisLine:xAxisLine,type:"category",allowDecimals:!0,allowDuplicatedCategory:!0,angle:xAxisAngle,tickCount:5,interval:"preserveStartEnd",minTickGap:xAxisMinTickGap,tickLine:xAxisTickLine,tickSize:xAxisTickSize,mirror:xAxisMirror,reversed:xAxisReversed,tickMargin:xAxisTickMargin,dataKey:"label",orientation:xAxisOrientation},yAxis={hide:yAxisHide,axisLine:yAxisLine,type:"number",allowDecimals:!0,allowDuplicatedCategory:!0,angle:yAxisAngle,tickCount:yAxisTickCoiunt,interval:"preserveStartEnd",minTickGap:yAxisMinTickGap,tickLine:yAxisTickLine,tickSize:yAxisTickSize,mirror:yAxisMirror,reversed:yAxisReversed,tickMargin:yAxisTickMargin,tickFormatter:decimal=>`${decimal} ${yAxisLabel}`,orientation:yAxisOrientation},legend={verticalAlign:legendVerticalAlign,align:legendAlign,marginTop:legendMarginTop,iconHeight:legendIconHeight},tooltip={separator:tooltipSeparator,offset:tooltipOffset,filterNull:tooltipFilterNull,cursor:{stroke:cursorStroke,strokeWidth:cursorStrokeWidth},isAnimationActive:tooltipIsAnimationActive,animationBegin:tooltipAnimationBegin,animationDuration:tooltipAnimationDuration,animationEasing:tooltipAnimationEasing,arrow:tooltipArrow},brush={dataKey:"label",travellerWidth:travellerWidth,startIndex:brushStartIndex,endIndex:brushEndIndex,brushMargin:brushMargin,height:brushHeight,alwaysShowText:brushHeightAlwaysShowText,stroke:brushStroke},labelsBarChart=["Январь","Февраль","Март","Апрель","Май","Июнь"],barChartFirst={hide:barHideLegendFirst,hideLegend:barHideLegendFirst,hideTooltip:barHideTooltipFirst,zIndex:barZIndexFirst,chart:"bar",icon:barIconFirst,properties:{name:barNameFirst,dataKey:"uv",formatter:decimal=>""+1e3*decimal,fill:barFillFirst},data:[{label:"Январь",value:80},{label:"Февраль",value:140},{label:"Март",value:70},{label:"Апрель",value:210},{label:"Май",value:80},{label:"Июнь",value:20}]},barChartSecond={hide:barHideLegendSecond,hideLegend:barHideLegendSecond,hideTooltip:barHideTooltipSecond,zIndex:barZIndexSecond,chart:"bar",icon:barIconSecond,properties:{name:(0,addon_knobs_dist.text)("properties.name","приход","barSecond"),dataKey:"pv",formatter:decimal=>""+1e3*decimal,fill:barFillSecond},data:[{label:"Январь",value:110},{label:"Февраль",value:190},{label:"Март",value:60},{label:"Апрель",value:230},{label:"Май",value:190},{label:"Июнь",value:30}]},lineChart={hide:lineHide,hideLegend:lineHideLegend,hideTooltip:lineHideTooltip,zIndex:lineZIndex,chart:"line",icon:lineIcon,properties:{name:lineName,dataKey:"cnt",stroke:lineStroke,dot:lineDot,dotSettings:{scale:lineScale,initScale:lineInitScale,width:lineWidth,height:lineWidth},inheritStroke:lineInheritStroke,formatter:decimal=>""+1e3*decimal,type:lineType,strokeWidth:lineStrokeWidth,strokeDasharray:lineStrokeDasharray},data:[{label:"Январь",value:60},{label:"Февраль",value:95},{label:"Март",value:20},{label:"Апрель",value:180},{label:"Май",value:70},{label:"Июнь",value:10}]},barChartOptions={id:"bar-chart",composeChart:composeChart,responsiveContainer:responsiveContainer,cartesianGrid:cartesianGrid,xAxis:xAxis,yAxis:yAxis,tooltip:tooltip,legend:legend,brush:brush,labels:labelsBarChart,series:[barChartFirst,barChartSecond,lineChart]};return(0,jsx_runtime.jsxs)("div",{style:{display:"flex"},children:[(0,jsx_runtime.jsx)("div",{style:{marginBottom:"20px",top:25,width:"1050px",height:"600px"},children:(0,jsx_runtime.jsx)(modern.Chart,{id:"bar-chart",composeChart:composeChart,responsiveContainer:responsiveContainer,cartesianGrid:cartesianGrid,xAxis:xAxis,yAxis:yAxis,tooltip:tooltip,legend:legend,brush:brush,labels:labelsBarChart,series:[barChartFirst,barChartSecond,lineChart]})}),(0,jsx_runtime.jsx)("div",{style:{width:"500px",height:"600px",overflow:"auto"},children:(0,jsx_runtime.jsx)("pre",{children:JSON.stringify((obj=>{const series=JSON.parse(JSON.stringify(obj)).series.map((item=>(item.data=[{label:"label",value:"value"},"..."],item)));return{...obj,labels:["label","label","..."],series:series}})(barChartOptions),null,2)})})]})}));chartBar.storyName="Chart.Bar",chartBar.parameters={storySource:{source:'React.createElement(() => {\n  const clearData = obj => {\n    const copy = JSON.parse(JSON.stringify(obj));\n    const labels = ["label", "label", "..."];\n    const series = copy.series.map(item => {\n      item.data = [{\n        label: "label",\n        value: "value"\n      }, "..."];\n      return item;\n    });\n    return {\n      ...obj,\n      labels,\n      series\n    };\n  };\n  const orientationVertical = {\n    bottom: "bottom",\n    top: "top"\n  };\n  const orientationHorizontal = {\n    left: "left",\n    right: "right"\n  };\n  const alignHorizontal = {\n    left: "left",\n    center: "center",\n    right: "right"\n  };\n  const alignVertical = {\n    bottom: "bottom",\n    middle: "middle",\n    top: "top"\n  };\n  const linesType = {\n    linear: "linear",\n    monotone: "monotone",\n    step: "step"\n  };\n  const animationType = {\n    ease: "ease",\n    "ease-in": "ease-in",\n    "ease-out": "ease-out",\n    "ease-in-out": "ease-in-out",\n    linear: "linear"\n  };\n  const iconTypes = {\n    circleLine: "circleLine",\n    filledCircle: "filledCircle",\n    strokeCircle: "strokeCircle",\n    circle: "circle"\n  };\n  const responsiveContainerId = "responsiveContainer";\n  const cartesianGridId = "cartesianGrid";\n  const composeChartId = "composeChart";\n  const xAxisId = "xAxis";\n  const yAxisId = "yAxis";\n  const legendId = "legend";\n  const tooltipId = "tooltip";\n  const brushId = "brush";\n  const lineId = "line";\n  const barIdFirst = "barFirst";\n  const barIdSecond = "barSecond";\n  const debounce = number("debounce", 0, {}, responsiveContainerId);\n  const vertical = boolean("vertical", false, cartesianGridId);\n  const horizontal = boolean("horizontal", true, cartesianGridId);\n  const strokeDasharray = number("strokeDasharray", 0, {}, cartesianGridId);\n  const stroke = text("stroke", "var(--color-light-border-primary)", cartesianGridId);\n  const fill = text("fill", "var(--color-light-bg-primary)", cartesianGridId);\n  const initMarginTop = number("initMargin.top", 40, {}, composeChartId);\n  const initMarginBottom = number("initMargin.bottom", 20, {}, composeChartId);\n  const marginLeft = number("initMargin.left", 20, {}, composeChartId);\n  const marginRight = number("initMargin.right", 50, {}, composeChartId);\n  const barCategoryGap = text("barCategoryGap", "30%", composeChartId);\n  const barGap = number("barGap", 4, {}, composeChartId);\n  const maxBarSize = number("maxBarSize", 24, {}, composeChartId);\n  const xAxisHide = boolean("hide", false, xAxisId);\n  const xAxisOrientation = select("orientation", orientationVertical, "bottom", xAxisId);\n  const xAxisAngle = number("angle", 0, {}, xAxisId);\n  const xAxisTickLine = boolean("tickLine", false, xAxisId);\n  const xAxisTickSize = number("tickSize", 6, {}, xAxisId);\n  const xAxisMirror = boolean("mirror", false, xAxisId);\n  const xAxisReversed = boolean("reversed", false, xAxisId);\n  const xAxisTickMargin = number("tickMargin", 10, {}, xAxisId);\n  const xAxisMinTickGap = number("minTickGap", 5, {}, xAxisId);\n  const xAxisLine = boolean("axisLine", false, xAxisId);\n  const yAxisHide = boolean("hide", false, yAxisId);\n  const yAxisOrientation = select("orientation", orientationHorizontal, "left", yAxisId);\n  const yAxisAngle = number("angle", 0, {}, yAxisId);\n  const yAxisTickLine = boolean("tickLine", false, yAxisId);\n  const yAxisTickSize = number("tickSize", 6, {}, yAxisId);\n  const yAxisMirror = boolean("mirror", false, yAxisId);\n  const yAxisReversed = boolean("reversed", false, yAxisId);\n  const yAxisTickCoiunt = number("tickCount", 6, {}, yAxisId);\n  const yAxisTickMargin = number("tickMargin", 0, {}, yAxisId);\n  const yAxisMinTickGap = number("minTickGap", 5, {}, yAxisId);\n  const yAxisLine = boolean("axisLine", false, yAxisId);\n  const yAxisLabel = text("label", "\\u0442\\u044B\\u0441.", yAxisId);\n  const legendAlign = select("align", alignHorizontal, "center", legendId);\n  const legendVerticalAlign = select("verticalAlign", alignVertical, "bottom", legendId);\n  const legendMarginTop = number("marginTop", 10, {}, legendId);\n  const legendIconHeight = number("iconHeight", 16, {}, legendId);\n  const tooltipArrow = boolean("arrow", true, tooltipId);\n  const tooltipIsAnimationActive = boolean("isAnimationActive", true, tooltipId);\n  const tooltipSeparator = text("separator", " ", tooltipId);\n  const tooltipOffset = number("offset", 20, {}, tooltipId);\n  const cursorStroke = text("cursor.stroke", "var(--color-light-border-primary)", tooltipId);\n  const cursorStrokeWidth = number("cursor.strokeWidth", 1, {}, tooltipId);\n  const tooltipFilterNull = boolean("filterNull", true, tooltipId);\n  const tooltipAnimationBegin = number("animationBegin", 0, {}, tooltipId);\n  const tooltipAnimationDuration = number("animationDuration", 500, {}, tooltipId);\n  const tooltipAnimationEasing = select("animationEasing", animationType, "ease", tooltipId);\n  const travellerWidth = number("travellerWidth", 20, {}, brushId);\n  const brushHeight = number("height", 20, {}, brushId);\n  const brushStartIndex = number("startIndex", 0, {\n    min: 0,\n    max: 5\n  }, brushId);\n  const brushEndIndex = number("endIndex", 5, {\n    min: 0,\n    max: 5\n  }, brushId);\n  const brushStroke = text("stroke", "var(--color-static-status-blue)", brushId);\n  const brushMargin = number("brushMargin", 10, {\n    min: 0,\n    max: 100\n  }, brushId);\n  const brushHeightAlwaysShowText = boolean("alwaysShowText", true, brushId);\n  const lineHide = boolean("hide", false, lineId);\n  const lineHideLegend = boolean("hideLegend", false, lineId);\n  const lineHideTooltip = boolean("hideTooltip", false, lineId);\n  const lineZIndex = number("zIndex", 50, {}, lineId);\n  const lineIcon = select("icon", iconTypes, "circleLine", lineId);\n  const lineName = text("properties.name", "\\u043E\\u0441\\u0442\\u0430\\u0442\\u043E\\u043A", lineId);\n  const lineStroke = text("properties.stroke", "var(--color-static-status-blue)", lineId);\n  const lineDot = boolean("properties.dot", true, lineId);\n  const lineScale = number("properties.dotSettings.scale", 1.5, {}, lineId);\n  const lineInitScale = number("properties.dotSettings.initScale", 1, {}, lineId);\n  const lineWidth = number("properties.dotSettings.width", 18, {}, lineId);\n  const lineType = select("properties.type", linesType, "monotone", lineId);\n  const lineInheritStroke = boolean("properties.inheritStroke", true, lineId);\n  const lineStrokeWidth = number("properties.strokeWidth", 2, {}, lineId);\n  const lineStrokeDasharray = text("properties.strokeDasharray", "1 0", lineId);\n  const barHideFirst = boolean("hide", false, barIdFirst);\n  const barHideLegendFirst = boolean("hideLegend", false, barIdFirst);\n  const barHideTooltipFirst = boolean("hideTooltip", false, barIdFirst);\n  const barZIndexFirst = number("zIndex", 1, {}, barIdFirst);\n  const barIconFirst = select("icon", iconTypes, "circle", barIdFirst);\n  const barFillFirst = text("properties.fill", "var(--color-static-graphic-persimmon)", barIdFirst);\n  const barNameFirst = text("properties.name", "\\u0440\\u0430\\u0441\\u0445\\u043E\\u0434", barIdFirst);\n  const barHideSecond = boolean("hide", false, barIdSecond);\n  const barHideLegendSecond = boolean("hideLegend", false, barIdSecond);\n  const barHideTooltipSecond = boolean("hideTooltip", false, barIdSecond);\n  const barZIndexSecond = number("zIndex", 10, {}, barIdSecond);\n  const barIconSecond = select("icon", iconTypes, "circle", barIdSecond);\n  const barFillSecond = text("properties.fill", "var(--color-static-graphic-green-jungle)", barIdSecond);\n  const barNameSecond = text("properties.name", "\\u043F\\u0440\\u0438\\u0445\\u043E\\u0434", barIdSecond);\n  const responsiveContainer = {\n    debounce\n  };\n  const cartesianGrid = {\n    vertical,\n    horizontal,\n    strokeDasharray,\n    stroke,\n    fill\n  };\n  const composeChart = {\n    initMargin: {\n      top: initMarginTop,\n      bottom: initMarginBottom,\n      left: marginLeft,\n      right: marginRight\n    },\n    barGap,\n    maxBarSize,\n    barCategoryGap\n  };\n  const xAxis = {\n    hide: xAxisHide,\n    axisLine: xAxisLine,\n    type: "category",\n    allowDecimals: true,\n    allowDuplicatedCategory: true,\n    angle: xAxisAngle,\n    tickCount: 5,\n    interval: "preserveStartEnd",\n    minTickGap: xAxisMinTickGap,\n    tickLine: xAxisTickLine,\n    tickSize: xAxisTickSize,\n    mirror: xAxisMirror,\n    reversed: xAxisReversed,\n    tickMargin: xAxisTickMargin,\n    dataKey: "label",\n    orientation: xAxisOrientation\n  };\n  const yAxis = {\n    hide: yAxisHide,\n    axisLine: yAxisLine,\n    type: "number",\n    allowDecimals: true,\n    allowDuplicatedCategory: true,\n    angle: yAxisAngle,\n    tickCount: yAxisTickCoiunt,\n    interval: "preserveStartEnd",\n    minTickGap: yAxisMinTickGap,\n    tickLine: yAxisTickLine,\n    tickSize: yAxisTickSize,\n    mirror: yAxisMirror,\n    reversed: yAxisReversed,\n    tickMargin: yAxisTickMargin,\n    tickFormatter: decimal => `${decimal}\\xa0${yAxisLabel}`,\n    orientation: yAxisOrientation\n  };\n  const legend = {\n    verticalAlign: legendVerticalAlign,\n    align: legendAlign,\n    marginTop: legendMarginTop,\n    iconHeight: legendIconHeight\n  };\n  const tooltip = {\n    separator: tooltipSeparator,\n    offset: tooltipOffset,\n    filterNull: tooltipFilterNull,\n    cursor: {\n      stroke: cursorStroke,\n      strokeWidth: cursorStrokeWidth\n    },\n    isAnimationActive: tooltipIsAnimationActive,\n    animationBegin: tooltipAnimationBegin,\n    animationDuration: tooltipAnimationDuration,\n    animationEasing: tooltipAnimationEasing,\n    arrow: tooltipArrow\n  };\n  const brush = {\n    dataKey: "label",\n    travellerWidth,\n    startIndex: brushStartIndex,\n    endIndex: brushEndIndex,\n    brushMargin: brushMargin,\n    height: brushHeight,\n    alwaysShowText: brushHeightAlwaysShowText,\n    stroke: brushStroke\n  };\n  const labelsBarChart = ["\\u042F\\u043D\\u0432\\u0430\\u0440\\u044C", "\\u0424\\u0435\\u0432\\u0440\\u0430\\u043B\\u044C", "\\u041C\\u0430\\u0440\\u0442", "\\u0410\\u043F\\u0440\\u0435\\u043B\\u044C", "\\u041C\\u0430\\u0439", "\\u0418\\u044E\\u043D\\u044C"];\n  const barChartFirst = {\n    hide: barHideLegendFirst,\n    hideLegend: barHideLegendFirst,\n    hideTooltip: barHideTooltipFirst,\n    zIndex: barZIndexFirst,\n    chart: "bar",\n    icon: barIconFirst,\n    properties: {\n      name: barNameFirst,\n      dataKey: "uv",\n      formatter: decimal => `${decimal * 1000}`,\n      fill: barFillFirst\n    },\n    data: [{\n      label: "\\u042F\\u043D\\u0432\\u0430\\u0440\\u044C",\n      value: 80\n    }, {\n      label: "\\u0424\\u0435\\u0432\\u0440\\u0430\\u043B\\u044C",\n      value: 140\n    }, {\n      label: "\\u041C\\u0430\\u0440\\u0442",\n      value: 70\n    }, {\n      label: "\\u0410\\u043F\\u0440\\u0435\\u043B\\u044C",\n      value: 210\n    }, {\n      label: "\\u041C\\u0430\\u0439",\n      value: 80\n    }, {\n      label: "\\u0418\\u044E\\u043D\\u044C",\n      value: 20\n    }]\n  };\n  const barChartSecond = {\n    hide: barHideLegendSecond,\n    hideLegend: barHideLegendSecond,\n    hideTooltip: barHideTooltipSecond,\n    zIndex: barZIndexSecond,\n    chart: "bar",\n    icon: barIconSecond,\n    properties: {\n      name: barNameSecond,\n      dataKey: "pv",\n      formatter: decimal => `${decimal * 1000}`,\n      fill: barFillSecond\n    },\n    data: [{\n      label: "\\u042F\\u043D\\u0432\\u0430\\u0440\\u044C",\n      value: 110\n    }, {\n      label: "\\u0424\\u0435\\u0432\\u0440\\u0430\\u043B\\u044C",\n      value: 190\n    }, {\n      label: "\\u041C\\u0430\\u0440\\u0442",\n      value: 60\n    }, {\n      label: "\\u0410\\u043F\\u0440\\u0435\\u043B\\u044C",\n      value: 230\n    }, {\n      label: "\\u041C\\u0430\\u0439",\n      value: 190\n    }, {\n      label: "\\u0418\\u044E\\u043D\\u044C",\n      value: 30\n    }]\n  };\n  const lineChart = {\n    hide: lineHide,\n    hideLegend: lineHideLegend,\n    hideTooltip: lineHideTooltip,\n    zIndex: lineZIndex,\n    chart: "line",\n    icon: lineIcon,\n    properties: {\n      name: lineName,\n      dataKey: "cnt",\n      stroke: lineStroke,\n      dot: lineDot,\n      dotSettings: {\n        scale: lineScale,\n        initScale: lineInitScale,\n        width: lineWidth,\n        height: lineWidth\n      },\n      inheritStroke: lineInheritStroke,\n      formatter: decimal => `${decimal * 1000}`,\n      type: lineType,\n      strokeWidth: lineStrokeWidth,\n      strokeDasharray: lineStrokeDasharray\n    },\n    data: [{\n      label: "\\u042F\\u043D\\u0432\\u0430\\u0440\\u044C",\n      value: 60\n    }, {\n      label: "\\u0424\\u0435\\u0432\\u0440\\u0430\\u043B\\u044C",\n      value: 95\n    }, {\n      label: "\\u041C\\u0430\\u0440\\u0442",\n      value: 20\n    }, {\n      label: "\\u0410\\u043F\\u0440\\u0435\\u043B\\u044C",\n      value: 180\n    }, {\n      label: "\\u041C\\u0430\\u0439",\n      value: 70\n    }, {\n      label: "\\u0418\\u044E\\u043D\\u044C",\n      value: 10\n    }]\n  };\n  const barChartOptions = {\n    id: "bar-chart",\n    composeChart,\n    responsiveContainer,\n    cartesianGrid,\n    xAxis,\n    yAxis,\n    tooltip,\n    legend,\n    brush,\n    labels: labelsBarChart,\n    series: [barChartFirst, barChartSecond, lineChart]\n  };\n  return <div style={{\n    display: "flex"\n  }}>\n                <div style={{\n      marginBottom: "20px",\n      top: 25,\n      width: "1050px",\n      height: "600px"\n    }}>\n                    <Chart id="bar-chart" composeChart={composeChart} responsiveContainer={responsiveContainer} cartesianGrid={cartesianGrid} xAxis={xAxis} yAxis={yAxis} tooltip={tooltip} legend={legend} brush={brush} labels={labelsBarChart} series={[barChartFirst, barChartSecond, lineChart]} />\n                </div>\n                <div style={{\n      width: "500px",\n      height: "600px",\n      overflow: "auto"\n    }}>\n                    <pre>{JSON.stringify(clearData(barChartOptions), null, 2)}</pre>\n                </div>\n            </div>;\n})'}};const chartLine=()=>react.createElement((()=>{const formatXAxis=time=>(0,format.Z)(time,"dd LLL"),linesType={linear:"linear",monotone:"monotone",step:"step"},iconTypes={circleLine:"circleLine",filledCircle:"filledCircle",strokeCircle:"strokeCircle",circle:"circle"},xAxisId="xAxisId",yAxisId="yAxisId",lineId="lineId",areaId="areaId",debounce=(0,addon_knobs_dist.number)("debounce",0,{},"responsiveContainerId"),vertical=(0,addon_knobs_dist.boolean)("vertical",!0,"cartesianGridId"),horizontal=(0,addon_knobs_dist.boolean)("horizontal",!0,"cartesianGridId"),strokeDasharray=(0,addon_knobs_dist.number)("strokeDasharray",0,{},"cartesianGridId"),stroke=(0,addon_knobs_dist.text)("stroke","var(--color-light-border-primary)","cartesianGridId"),fill=(0,addon_knobs_dist.text)("fill","var(--color-light-bg-primary)","cartesianGridId"),initMarginTop=(0,addon_knobs_dist.number)("initMargin.top",40,{},"composeChartId"),initMarginBottom=(0,addon_knobs_dist.number)("initMargin.bottom",20,{},"composeChartId"),marginLeft=(0,addon_knobs_dist.number)("initMargin.left",20,{},"composeChartId"),marginRight=(0,addon_knobs_dist.number)("initMargin.right",70,{},"composeChartId"),barCategoryGap=(0,addon_knobs_dist.text)("barCategoryGap","30%","composeChartId"),barSize=((0,addon_knobs_dist.number)("barGap",4,{},"composeChartId"),(0,addon_knobs_dist.number)("barSize",24,{},"composeChartId")),maxBarSize=(0,addon_knobs_dist.number)("maxBarSize",24,{},"composeChartId"),xAxisHide=(0,addon_knobs_dist.boolean)("hide",!1,xAxisId),xAxisOrientation=(0,addon_knobs_dist.select)("orientation",{bottom:"bottom",top:"top"},"bottom",xAxisId),xAxisAngle=(0,addon_knobs_dist.number)("angle",0,{},xAxisId),xAxisTickLine=(0,addon_knobs_dist.boolean)("tickLine",!1,xAxisId),xAxisTickSize=(0,addon_knobs_dist.number)("tickSize",6,{},xAxisId),xAxisMirror=(0,addon_knobs_dist.boolean)("mirror",!1,xAxisId),xAxisReversed=(0,addon_knobs_dist.boolean)("reversed",!1,xAxisId),xAxisTickMargin=(0,addon_knobs_dist.number)("tickMargin",2,{},xAxisId),xAxisMinTickGap=(0,addon_knobs_dist.number)("minTickGap",20,{},xAxisId),xAxisLine=(0,addon_knobs_dist.boolean)("axisLine",!1,xAxisId),yAxisHide=(0,addon_knobs_dist.boolean)("hide",!1,yAxisId),yAxisOrientation=(0,addon_knobs_dist.select)("orientation",{left:"left",right:"right"},"left",yAxisId),yAxisAngle=(0,addon_knobs_dist.number)("angle",0,{},yAxisId),yAxisTickLine=(0,addon_knobs_dist.boolean)("tickLine",!1,yAxisId),yAxisTickSize=(0,addon_knobs_dist.number)("tickSize",6,{},yAxisId),yAxisMirror=(0,addon_knobs_dist.boolean)("mirror",!1,yAxisId),yAxisReversed=(0,addon_knobs_dist.boolean)("reversed",!1,yAxisId),yAxisTickCoiunt=(0,addon_knobs_dist.number)("tickCount",6,{},yAxisId),yAxisMinTickGap=(0,addon_knobs_dist.number)("minTickGap",5,{},yAxisId),yAxisTickMargin=(0,addon_knobs_dist.number)("tickMargin",0,{},yAxisId),yAxisLine=(0,addon_knobs_dist.boolean)("axisLine",!1,yAxisId),yAxisLabel=(0,addon_knobs_dist.text)("label","",yAxisId),legendAlign=(0,addon_knobs_dist.select)("align",{left:"left",center:"center",right:"right"},"right","legendId"),legendVerticalAlign=(0,addon_knobs_dist.select)("verticalAlign",{bottom:"bottom",middle:"middle",top:"top"},"top","legendId"),legendMarginTop=(0,addon_knobs_dist.number)("marginTop",20,{},"legendId"),legendIconHeight=(0,addon_knobs_dist.number)("iconHeight",20,{},"legendId"),tooltipArrow=(0,addon_knobs_dist.boolean)("arrow",!0,"tooltipId"),tooltipIsAnimationActive=(0,addon_knobs_dist.boolean)("isAnimationActive",!0,"tooltipId"),tooltipSeparator=(0,addon_knobs_dist.text)("separator"," ","tooltipId"),tooltipOffset=(0,addon_knobs_dist.number)("offset",20,{},"tooltipId"),cursorStroke=(0,addon_knobs_dist.text)("cursor.stroke","var(--color-light-border-primary)","tooltipId"),cursorStrokeWidth=(0,addon_knobs_dist.number)("cursor.strokeWidth",1,{},"tooltipId"),tooltipFilterNull=(0,addon_knobs_dist.boolean)("filterNull",!0,"tooltipId"),tooltipAnimationBegin=(0,addon_knobs_dist.number)("animationBegin",0,{},"tooltipId"),tooltipAnimationDuration=(0,addon_knobs_dist.number)("animationDuration",500,{},"tooltipId"),tooltipAnimationEasing=(0,addon_knobs_dist.select)("animationEasing",{ease:"ease","ease-in":"ease-in","ease-out":"ease-out","ease-in-out":"ease-in-out",linear:"linear"},"ease","tooltipId"),travellerWidth=(0,addon_knobs_dist.number)("travellerWidth",20,{},"brushId"),brushHeight=(0,addon_knobs_dist.number)("height",20,{},"brushId"),brushStartIndex=(0,addon_knobs_dist.number)("startIndex",0,{min:0,max:47},"brushId"),brushEndIndex=(0,addon_knobs_dist.number)("endIndex",47,{min:0,max:47},"brushId"),brushStroke=(0,addon_knobs_dist.text)("stroke","var(--color-static-status-blue)","brushId"),brushMargin=(0,addon_knobs_dist.number)("brushMargin",10,{min:0,max:100},"brushId"),brushHeightAlwaysShowText=(0,addon_knobs_dist.boolean)("alwaysShowText",!0,"brushId"),lineHide=(0,addon_knobs_dist.boolean)("hide",!1,lineId),lineHideLegend=(0,addon_knobs_dist.boolean)("hideLegend",!1,lineId),lineHideTooltip=(0,addon_knobs_dist.boolean)("hideTooltip",!1,lineId),lineIcon=((0,addon_knobs_dist.number)("zIndex",50,{},lineId),(0,addon_knobs_dist.select)("icon",iconTypes,"strokeCircle",lineId)),lineName=(0,addon_knobs_dist.text)("properties.name","текущий период",lineId),lineStroke=(0,addon_knobs_dist.text)("properties.stroke","var(--color-static-status-blue)",lineId),lineDot=(0,addon_knobs_dist.boolean)("properties.dot",!0,lineId),lineScale=(0,addon_knobs_dist.number)("properties.dotSettings.scale",1.5,{},lineId),lineInitScale=(0,addon_knobs_dist.number)("properties.dotSettings.initScale",0,{},lineId),lineStrokeWidth=(0,addon_knobs_dist.number)("properties.strokeWidth",2,{},lineId),lineInheritStroke=(0,addon_knobs_dist.boolean)("properties.inheritStroke",!0,lineId),lineType=(0,addon_knobs_dist.select)("properties.type",linesType,"monotone",lineId),lineWidth=(0,addon_knobs_dist.number)("properties.dotSettings.width",18,{},lineId),lineStrokeDasharray=(0,addon_knobs_dist.text)("properties.strokeDasharray","10 10",lineId),areaHide=(0,addon_knobs_dist.boolean)("hide",!1,areaId),areaHideLegend=(0,addon_knobs_dist.boolean)("hideLegend",!1,areaId),areaHideTooltip=(0,addon_knobs_dist.boolean)("hideTooltip",!1,areaId),areaZIndex=(0,addon_knobs_dist.number)("zIndex",100,{},areaId),areaIcon=(0,addon_knobs_dist.select)("icon",iconTypes,"filledCircle",areaId),areaOffset=(0,addon_knobs_dist.number)("offset",.1,{min:0,max:1,step:.1},areaId),areaColor_1=(0,addon_knobs_dist.text)("gradient.points.color above","rgba(0, 112, 224, 0.2)",areaId),areaColorOpacity_1=(0,addon_knobs_dist.number)("gradient.points.opacity of color above",1,{min:0,max:1,step:.1},areaId),areaColor_2=(0,addon_knobs_dist.text)("gradient.points.color below","rgba(0, 128, 255, 0)",areaId),areaColorOpacity_2=(0,addon_knobs_dist.number)("gradient opacity of color below",1,{min:0,max:1,step:.1},areaId),areaName=(0,addon_knobs_dist.text)("properties.name","предыдущий период",areaId),areaType=(0,addon_knobs_dist.select)("properties.type",linesType,"monotone",areaId),areaStroke=(0,addon_knobs_dist.text)("properties.stroke","var(--color-static-status-blue)",areaId),areaScale=(0,addon_knobs_dist.number)("properties.dotSettings.scale",1.5,{},areaId),areaInitScale=(0,addon_knobs_dist.number)("properties.dotSettings.initScale",0,{},areaId),areaWidth=(0,addon_knobs_dist.number)("properties.dotSettings.width",18,{},areaId),areaStrokeWidth=(0,addon_knobs_dist.number)("properties.strokeWidth",2,{},areaId),areaDot=(0,addon_knobs_dist.boolean)("properties.dot",!0,areaId),responsiveContainer=((0,addon_knobs_dist.text)("properties.strokeDasharray","10 10",areaId),{debounce:debounce}),cartesianGrid={vertical:vertical,horizontal:horizontal,strokeDasharray:strokeDasharray,stroke:stroke,fill:fill},composeChart={initMargin:{top:initMarginTop,bottom:initMarginBottom,left:marginLeft,right:marginRight},barCategoryGap:barCategoryGap,barSize:barSize,maxBarSize:maxBarSize},xAxis={hide:xAxisHide,axisLine:xAxisLine,type:"category",allowDecimals:!0,allowDuplicatedCategory:!0,angle:xAxisAngle,tickCount:5,interval:"preserveStartEnd",minTickGap:xAxisMinTickGap,tickLine:xAxisTickLine,tickSize:xAxisTickSize,mirror:xAxisMirror,reversed:xAxisReversed,dataKey:"label",tickMargin:xAxisTickMargin,orientation:xAxisOrientation,tickFormatter:formatXAxis,tickType:"point"},yAxis={hide:yAxisHide,axisLine:yAxisLine,type:"number",allowDecimals:!0,allowDuplicatedCategory:!0,angle:yAxisAngle,tickCount:yAxisTickCoiunt,interval:"preserveStartEnd",minTickGap:yAxisMinTickGap,tickLine:yAxisTickLine,tickSize:yAxisTickSize,mirror:yAxisMirror,reversed:yAxisReversed,tickFormatter:decimal=>`${decimal} ${yAxisLabel}`,orientation:yAxisOrientation,tickMargin:yAxisTickMargin},legend={verticalAlign:legendVerticalAlign,align:legendAlign,marginTop:legendMarginTop,iconHeight:legendIconHeight},tooltip={separator:tooltipSeparator,offset:tooltipOffset,filterNull:tooltipFilterNull,cursor:{stroke:cursorStroke,strokeWidth:cursorStrokeWidth},isAnimationActive:tooltipIsAnimationActive,animationBegin:tooltipAnimationBegin,animationDuration:tooltipAnimationDuration,animationEasing:tooltipAnimationEasing,arrow:tooltipArrow,labelFormatter:formatXAxis},brush={dataKey:"label",travellerWidth:travellerWidth,startIndex:brushStartIndex,endIndex:brushEndIndex,brushMargin:brushMargin,height:brushHeight,stroke:brushStroke,alwaysShowText:brushHeightAlwaysShowText,tickFormatter:formatXAxis},labelsLineChart=[16082424e5,16083288e5,16084152e5,16085016e5,1608588e6,16086744e5,16087608e5,16088472e5,16089336e5,160902e7,16091064e5,16091928e5,16092792e5,16093656e5,1609452e6,16095384e5,16096248e5,16097112e5,16097976e5,1609884e6,16099704e5,16100568e5,16101432e5,16102296e5,1610316e6,16104024e5,16104888e5,16105752e5,16106616e5,1610748e6,16108344e5,16109208e5,16110072e5,16110936e5,161118e7,16112664e5,16113528e5,16114392e5,16115256e5,1611612e6,16116984e5,16117848e5,16118712e5,16119576e5,1612044e6,16121304e5,16122168e5,16123032e5],lineChart={hide:lineHide,hideLegend:lineHideLegend,hideTooltip:lineHideTooltip,zIndex:200,chart:"line",icon:lineIcon,properties:{name:lineName,dataKey:"b",stroke:lineStroke,dot:lineDot,dotSettings:{scale:lineScale,initScale:lineInitScale,width:lineWidth,height:lineWidth},inheritStroke:lineInheritStroke,type:lineType,strokeWidth:lineStrokeWidth,strokeDasharray:lineStrokeDasharray},data:[{label:16082424e5,value:35},{label:16083288e5,value:20},{label:16084152e5,value:34},{label:16085016e5,value:42},{label:1608588e6,value:14},{label:16086744e5,value:37},{label:16087608e5,value:19},{label:16088472e5,value:37},{label:16089336e5,value:22},{label:160902e7,value:21},{label:16091064e5,value:28},{label:16091928e5,value:26},{label:16092792e5,value:31},{label:16093656e5,value:37},{label:1609452e6,value:40},{label:16095384e5,value:39},{label:16096248e5,value:45},{label:16097112e5,value:40},{label:16097976e5,value:45},{label:1609884e6,value:40},{label:16099704e5,value:45},{label:16100568e5,value:46},{label:16101432e5,value:36},{label:16102296e5,value:50},{label:1610316e6,value:44},{label:16104024e5,value:55},{label:16104888e5,value:59},{label:16105752e5,value:65},{label:16106616e5,value:49},{label:1610748e6,value:51},{label:16108344e5,value:69},{label:16109208e5,value:61},{label:16110072e5,value:63},{label:16110936e5,value:57},{label:161118e7,value:61},{label:16112664e5,value:43},{label:16113528e5,value:68},{label:16114392e5,value:69},{label:16115256e5,value:69},{label:1611612e6,value:76},{label:16116984e5,value:61},{label:16117848e5,value:84},{label:16118712e5,value:96},{label:16119576e5,value:97},{label:1612044e6,value:72},{label:16121304e5,value:71},{label:16122168e5,value:88},{label:16123032e5,value:87}]},areaChart={hide:areaHide,hideLegend:areaHideLegend,hideTooltip:areaHideTooltip,zIndex:areaZIndex,chart:"area",icon:areaIcon,offset:areaOffset,gradient:{gid:"ar-grad",points:[{offset:0,stopColor:areaColor_1,stopOpacity:areaColorOpacity_1},{offset:95,stopColor:areaColor_2,stopOpacity:areaColorOpacity_2}]},properties:{name:areaName,dataKey:"a",type:areaType,stroke:areaStroke,dotSettings:{scale:areaScale,initScale:areaInitScale,width:areaWidth,height:areaWidth},dot:areaDot,strokeWidth:areaStrokeWidth},data:[{label:16082424e5,value:70},{label:16083288e5,value:40},{label:16084152e5,value:69},{label:16085016e5,value:84},{label:1608588e6,value:29},{label:16086744e5,value:74},{label:16087608e5,value:39},{label:16088472e5,value:74},{label:16089336e5,value:44},{label:160902e7,value:43},{label:16091064e5,value:57},{label:16091928e5,value:52},{label:16092792e5,value:62},{label:16093656e5,value:74},{label:1609452e6,value:81},{label:16095384e5,value:78},{label:16096248e5,value:91},{label:16097112e5,value:80},{label:16097976e5,value:90},{label:1609884e6,value:80},{label:16099704e5,value:91},{label:16100568e5,value:93},{label:16101432e5,value:72},{label:16102296e5,value:101},{label:1610316e6,value:88},{label:16104024e5,value:110},{label:16104888e5,value:119},{label:16105752e5,value:130},{label:16106616e5,value:98},{label:1610748e6,value:102},{label:16108344e5,value:139},{label:16109208e5,value:123},{label:16110072e5,value:127},{label:16110936e5,value:114},{label:161118e7,value:123},{label:16112664e5,value:86},{label:16113528e5,value:136},{label:16114392e5,value:139},{label:16115256e5,value:138},{label:1611612e6,value:153},{label:16116984e5,value:122},{label:16117848e5,value:169},{label:16118712e5,value:192},{label:16119576e5,value:195},{label:1612044e6,value:144},{label:16121304e5,value:142},{label:16122168e5,value:176},{label:16123032e5,value:174}]},lineChartOptions={id:"line-chart",composeChart:composeChart,responsiveContainer:responsiveContainer,cartesianGrid:cartesianGrid,xAxis:xAxis,yAxis:yAxis,tooltip:tooltip,legend:legend,brush:brush,labels:labelsLineChart,series:[areaChart]};return(0,jsx_runtime.jsxs)("div",{style:{display:"flex"},children:[(0,jsx_runtime.jsx)("div",{style:{marginBottom:"20px",top:25,width:"1050px",height:"600px"},children:(0,jsx_runtime.jsx)(modern.Chart,{id:"line-chart",composeChart:composeChart,responsiveContainer:responsiveContainer,cartesianGrid:cartesianGrid,xAxis:xAxis,yAxis:yAxis,tooltip:tooltip,legend:legend,brush:brush,labels:labelsLineChart,series:[lineChart,areaChart]})}),(0,jsx_runtime.jsx)("div",{style:{width:"500px",height:"600px",overflow:"auto"},children:(0,jsx_runtime.jsx)("pre",{children:JSON.stringify((obj=>{const series=JSON.parse(JSON.stringify(obj)).series.map((item=>(item.data=[{label:"label",value:"value"},"..."],item)));return{...obj,labels:["label","label","..."],series:series}})(lineChartOptions),null,2)})})]})}));chartLine.storyName="Chart.Line",chartLine.parameters={storySource:{source:'React.createElement(() => {\n  const clearData = obj => {\n    const copy = JSON.parse(JSON.stringify(obj));\n    const labels = ["label", "label", "..."];\n    const series = copy.series.map(item => {\n      item.data = [{\n        label: "label",\n        value: "value"\n      }, "..."];\n      return item;\n    });\n    return {\n      ...obj,\n      labels,\n      series\n    };\n  };\n  const formatXAxis = time => format(time, "dd LLL");\n  const orientationVertical = {\n    bottom: "bottom",\n    top: "top"\n  };\n  const orientationHorizontal = {\n    left: "left",\n    right: "right"\n  };\n  const alignHorizontal = {\n    left: "left",\n    center: "center",\n    right: "right"\n  };\n  const alignVertical = {\n    bottom: "bottom",\n    middle: "middle",\n    top: "top"\n  };\n  const linesType = {\n    linear: "linear",\n    monotone: "monotone",\n    step: "step"\n  };\n  const animationType = {\n    ease: "ease",\n    "ease-in": "ease-in",\n    "ease-out": "ease-out",\n    "ease-in-out": "ease-in-out",\n    linear: "linear"\n  };\n  const iconTypes = {\n    circleLine: "circleLine",\n    filledCircle: "filledCircle",\n    strokeCircle: "strokeCircle",\n    circle: "circle"\n  };\n  const responsiveContainerId = "responsiveContainerId";\n  const cartesianGridId = "cartesianGridId";\n  const composeChartId = "composeChartId";\n  const xAxisId = "xAxisId";\n  const yAxisId = "yAxisId";\n  const legendId = "legendId";\n  const tooltipId = "tooltipId";\n  const brushId = "brushId";\n  const lineId = "lineId";\n  const areaId = "areaId";\n  const debounce = number("debounce", 0, {}, responsiveContainerId);\n  const vertical = boolean("vertical", true, cartesianGridId);\n  const horizontal = boolean("horizontal", true, cartesianGridId);\n  const strokeDasharray = number("strokeDasharray", 0, {}, cartesianGridId);\n  const stroke = text("stroke", "var(--color-light-border-primary)", cartesianGridId);\n  const fill = text("fill", "var(--color-light-bg-primary)", cartesianGridId);\n  const initMarginTop = number("initMargin.top", 40, {}, composeChartId);\n  const initMarginBottom = number("initMargin.bottom", 20, {}, composeChartId);\n  const marginLeft = number("initMargin.left", 20, {}, composeChartId);\n  const marginRight = number("initMargin.right", 70, {}, composeChartId);\n  const barCategoryGap = text("barCategoryGap", "30%", composeChartId);\n  const barGap = number("barGap", 4, {}, composeChartId);\n  const barSize = number("barSize", 24, {}, composeChartId);\n  const maxBarSize = number("maxBarSize", 24, {}, composeChartId);\n  const xAxisHide = boolean("hide", false, xAxisId);\n  const xAxisOrientation = select("orientation", orientationVertical, "bottom", xAxisId);\n  const xAxisAngle = number("angle", 0, {}, xAxisId);\n  const xAxisTickLine = boolean("tickLine", false, xAxisId);\n  const xAxisTickSize = number("tickSize", 6, {}, xAxisId);\n  const xAxisMirror = boolean("mirror", false, xAxisId);\n  const xAxisReversed = boolean("reversed", false, xAxisId);\n  const xAxisTickMargin = number("tickMargin", 2, {}, xAxisId);\n  const xAxisMinTickGap = number("minTickGap", 20, {}, xAxisId);\n  const xAxisLine = boolean("axisLine", false, xAxisId);\n  const yAxisHide = boolean("hide", false, yAxisId);\n  const yAxisOrientation = select("orientation", orientationHorizontal, "left", yAxisId);\n  const yAxisAngle = number("angle", 0, {}, yAxisId);\n  const yAxisTickLine = boolean("tickLine", false, yAxisId);\n  const yAxisTickSize = number("tickSize", 6, {}, yAxisId);\n  const yAxisMirror = boolean("mirror", false, yAxisId);\n  const yAxisReversed = boolean("reversed", false, yAxisId);\n  const yAxisTickCoiunt = number("tickCount", 6, {}, yAxisId);\n  const yAxisMinTickGap = number("minTickGap", 5, {}, yAxisId);\n  const yAxisTickMargin = number("tickMargin", 0, {}, yAxisId);\n  const yAxisLine = boolean("axisLine", false, yAxisId);\n  const yAxisLabel = text("label", "", yAxisId);\n  const legendAlign = select("align", alignHorizontal, "right", legendId);\n  const legendVerticalAlign = select("verticalAlign", alignVertical, "top", legendId);\n  const legendMarginTop = number("marginTop", 20, {}, legendId);\n  const legendIconHeight = number("iconHeight", 20, {}, legendId);\n  const tooltipArrow = boolean("arrow", true, tooltipId);\n  const tooltipIsAnimationActive = boolean("isAnimationActive", true, tooltipId);\n  const tooltipSeparator = text("separator", " ", tooltipId);\n  const tooltipOffset = number("offset", 20, {}, tooltipId);\n  const cursorStroke = text("cursor.stroke", "var(--color-light-border-primary)", tooltipId);\n  const cursorStrokeWidth = number("cursor.strokeWidth", 1, {}, tooltipId);\n  const tooltipFilterNull = boolean("filterNull", true, tooltipId);\n  const tooltipAnimationBegin = number("animationBegin", 0, {}, tooltipId);\n  const tooltipAnimationDuration = number("animationDuration", 500, {}, tooltipId);\n  const tooltipAnimationEasing = select("animationEasing", animationType, "ease", tooltipId);\n  const travellerWidth = number("travellerWidth", 20, {}, brushId);\n  const brushHeight = number("height", 20, {}, brushId);\n  const brushStartIndex = number("startIndex", 0, {\n    min: 0,\n    max: 47\n  }, brushId);\n  const brushEndIndex = number("endIndex", 47, {\n    min: 0,\n    max: 47\n  }, brushId);\n  const brushStroke = text("stroke", "var(--color-static-status-blue)", brushId);\n  const brushMargin = number("brushMargin", 10, {\n    min: 0,\n    max: 100\n  }, brushId);\n  const brushHeightAlwaysShowText = boolean("alwaysShowText", true, brushId);\n  const lineHide = boolean("hide", false, lineId);\n  const lineHideLegend = boolean("hideLegend", false, lineId);\n  const lineHideTooltip = boolean("hideTooltip", false, lineId);\n  const lineZIndex = number("zIndex", 50, {}, lineId);\n  const lineIcon = select("icon", iconTypes, "strokeCircle", lineId);\n  const lineName = text("properties.name", "\\u0442\\u0435\\u043A\\u0443\\u0449\\u0438\\u0439 \\u043F\\u0435\\u0440\\u0438\\u043E\\u0434", lineId);\n  const lineStroke = text("properties.stroke", "var(--color-static-status-blue)", lineId);\n  const lineDot = boolean("properties.dot", true, lineId);\n  const lineScale = number("properties.dotSettings.scale", 1.5, {}, lineId);\n  const lineInitScale = number("properties.dotSettings.initScale", 0, {}, lineId);\n  const lineStrokeWidth = number("properties.strokeWidth", 2, {}, lineId);\n  const lineInheritStroke = boolean("properties.inheritStroke", true, lineId);\n  const lineType = select("properties.type", linesType, "monotone", lineId);\n  const lineWidth = number("properties.dotSettings.width", 18, {}, lineId);\n  const lineStrokeDasharray = text("properties.strokeDasharray", "10 10", lineId);\n  const areaHide = boolean("hide", false, areaId);\n  const areaHideLegend = boolean("hideLegend", false, areaId);\n  const areaHideTooltip = boolean("hideTooltip", false, areaId);\n  const areaZIndex = number("zIndex", 100, {}, areaId);\n  const areaIcon = select("icon", iconTypes, "filledCircle", areaId);\n  const areaOffset = number("offset", 0.1, {\n    min: 0,\n    max: 1,\n    step: 0.1\n  }, areaId);\n  const areaColor_1 = text("gradient.points.color above", "rgba(0, 112, 224, 0.2)", areaId);\n  const areaColorOpacity_1 = number("gradient.points.opacity of color above", 1, {\n    min: 0,\n    max: 1,\n    step: 0.1\n  }, areaId);\n  const areaColor_2 = text("gradient.points.color below", "rgba(0, 128, 255, 0)", areaId);\n  const areaColorOpacity_2 = number("gradient opacity of color below", 1, {\n    min: 0,\n    max: 1,\n    step: 0.1\n  }, areaId);\n  const areaName = text("properties.name", "\\u043F\\u0440\\u0435\\u0434\\u044B\\u0434\\u0443\\u0449\\u0438\\u0439 \\u043F\\u0435\\u0440\\u0438\\u043E\\u0434", areaId);\n  const areaType = select("properties.type", linesType, "monotone", areaId);\n  const areaStroke = text("properties.stroke", "var(--color-static-status-blue)", areaId);\n  const areaScale = number("properties.dotSettings.scale", 1.5, {}, areaId);\n  const areaInitScale = number("properties.dotSettings.initScale", 0, {}, areaId);\n  const areaWidth = number("properties.dotSettings.width", 18, {}, areaId);\n  const areaStrokeWidth = number("properties.strokeWidth", 2, {}, areaId);\n  const areaDot = boolean("properties.dot", true, areaId);\n  const areaStrokeDasharray = text("properties.strokeDasharray", "10 10", areaId);\n  const responsiveContainer = {\n    debounce\n  };\n  const cartesianGrid = {\n    vertical,\n    horizontal,\n    strokeDasharray,\n    stroke,\n    fill\n  };\n  const composeChart = {\n    initMargin: {\n      top: initMarginTop,\n      bottom: initMarginBottom,\n      left: marginLeft,\n      right: marginRight\n    },\n    barCategoryGap,\n    barSize,\n    maxBarSize\n  };\n  const xAxis = {\n    hide: xAxisHide,\n    axisLine: xAxisLine,\n    type: "category",\n    allowDecimals: true,\n    allowDuplicatedCategory: true,\n    angle: xAxisAngle,\n    tickCount: 5,\n    interval: "preserveStartEnd",\n    minTickGap: xAxisMinTickGap,\n    tickLine: xAxisTickLine,\n    tickSize: xAxisTickSize,\n    mirror: xAxisMirror,\n    reversed: xAxisReversed,\n    dataKey: "label",\n    tickMargin: xAxisTickMargin,\n    orientation: xAxisOrientation,\n    tickFormatter: formatXAxis,\n    tickType: "point"\n  };\n  const yAxis = {\n    hide: yAxisHide,\n    axisLine: yAxisLine,\n    type: "number",\n    allowDecimals: true,\n    allowDuplicatedCategory: true,\n    angle: yAxisAngle,\n    tickCount: yAxisTickCoiunt,\n    interval: "preserveStartEnd",\n    minTickGap: yAxisMinTickGap,\n    tickLine: yAxisTickLine,\n    tickSize: yAxisTickSize,\n    mirror: yAxisMirror,\n    reversed: yAxisReversed,\n    tickFormatter: decimal => `${decimal}\\xa0${yAxisLabel}`,\n    orientation: yAxisOrientation,\n    tickMargin: yAxisTickMargin\n  };\n  const legend = {\n    verticalAlign: legendVerticalAlign,\n    align: legendAlign,\n    marginTop: legendMarginTop,\n    iconHeight: legendIconHeight\n  };\n  const tooltip = {\n    separator: tooltipSeparator,\n    offset: tooltipOffset,\n    filterNull: tooltipFilterNull,\n    cursor: {\n      stroke: cursorStroke,\n      strokeWidth: cursorStrokeWidth\n    },\n    isAnimationActive: tooltipIsAnimationActive,\n    animationBegin: tooltipAnimationBegin,\n    animationDuration: tooltipAnimationDuration,\n    animationEasing: tooltipAnimationEasing,\n    arrow: tooltipArrow,\n    labelFormatter: formatXAxis\n  };\n  const brush = {\n    dataKey: "label",\n    travellerWidth,\n    startIndex: brushStartIndex,\n    endIndex: brushEndIndex,\n    brushMargin: brushMargin,\n    height: brushHeight,\n    stroke: brushStroke,\n    alwaysShowText: brushHeightAlwaysShowText,\n    tickFormatter: formatXAxis\n  };\n  const labelsLineChart = [1608242400000, 1608328800000, 1608415200000, 1608501600000, 1608588000000, 1608674400000, 1608760800000, 1608847200000, 1608933600000, 1609020000000, 1609106400000, 1609192800000, 1609279200000, 1609365600000, 1609452000000, 1609538400000, 1609624800000, 1609711200000, 1609797600000, 1609884000000, 1609970400000, 1610056800000, 1610143200000, 1610229600000, 1610316000000, 1610402400000, 1610488800000, 1610575200000, 1610661600000, 1610748000000, 1610834400000, 1610920800000, 1611007200000, 1611093600000, 1611180000000, 1611266400000, 1611352800000, 1611439200000, 1611525600000, 1611612000000, 1611698400000, 1611784800000, 1611871200000, 1611957600000, 1612044000000, 1612130400000, 1612216800000, 1612303200000];\n  const lineChart = {\n    hide: lineHide,\n    hideLegend: lineHideLegend,\n    hideTooltip: lineHideTooltip,\n    zIndex: 200,\n    chart: "line",\n    icon: lineIcon,\n    properties: {\n      name: lineName,\n      dataKey: "b",\n      stroke: lineStroke,\n      dot: lineDot,\n      dotSettings: {\n        scale: lineScale,\n        initScale: lineInitScale,\n        width: lineWidth,\n        height: lineWidth\n      },\n      inheritStroke: lineInheritStroke,\n      type: lineType,\n      strokeWidth: lineStrokeWidth,\n      strokeDasharray: lineStrokeDasharray\n    },\n    data: [{\n      label: 1608242400000,\n      value: 35\n    }, {\n      label: 1608328800000,\n      value: 20\n    }, {\n      label: 1608415200000,\n      value: 34\n    }, {\n      label: 1608501600000,\n      value: 42\n    }, {\n      label: 1608588000000,\n      value: 14\n    }, {\n      label: 1608674400000,\n      value: 37\n    }, {\n      label: 1608760800000,\n      value: 19\n    }, {\n      label: 1608847200000,\n      value: 37\n    }, {\n      label: 1608933600000,\n      value: 22\n    }, {\n      label: 1609020000000,\n      value: 21\n    }, {\n      label: 1609106400000,\n      value: 28\n    }, {\n      label: 1609192800000,\n      value: 26\n    }, {\n      label: 1609279200000,\n      value: 31\n    }, {\n      label: 1609365600000,\n      value: 37\n    }, {\n      label: 1609452000000,\n      value: 40\n    }, {\n      label: 1609538400000,\n      value: 39\n    }, {\n      label: 1609624800000,\n      value: 45\n    }, {\n      label: 1609711200000,\n      value: 40\n    }, {\n      label: 1609797600000,\n      value: 45\n    }, {\n      label: 1609884000000,\n      value: 40\n    }, {\n      label: 1609970400000,\n      value: 45\n    }, {\n      label: 1610056800000,\n      value: 46\n    }, {\n      label: 1610143200000,\n      value: 36\n    }, {\n      label: 1610229600000,\n      value: 50\n    }, {\n      label: 1610316000000,\n      value: 44\n    }, {\n      label: 1610402400000,\n      value: 55\n    }, {\n      label: 1610488800000,\n      value: 59\n    }, {\n      label: 1610575200000,\n      value: 65\n    }, {\n      label: 1610661600000,\n      value: 49\n    }, {\n      label: 1610748000000,\n      value: 51\n    }, {\n      label: 1610834400000,\n      value: 69\n    }, {\n      label: 1610920800000,\n      value: 61\n    }, {\n      label: 1611007200000,\n      value: 63\n    }, {\n      label: 1611093600000,\n      value: 57\n    }, {\n      label: 1611180000000,\n      value: 61\n    }, {\n      label: 1611266400000,\n      value: 43\n    }, {\n      label: 1611352800000,\n      value: 68\n    }, {\n      label: 1611439200000,\n      value: 69\n    }, {\n      label: 1611525600000,\n      value: 69\n    }, {\n      label: 1611612000000,\n      value: 76\n    }, {\n      label: 1611698400000,\n      value: 61\n    }, {\n      label: 1611784800000,\n      value: 84\n    }, {\n      label: 1611871200000,\n      value: 96\n    }, {\n      label: 1611957600000,\n      value: 97\n    }, {\n      label: 1612044000000,\n      value: 72\n    }, {\n      label: 1612130400000,\n      value: 71\n    }, {\n      label: 1612216800000,\n      value: 88\n    }, {\n      label: 1612303200000,\n      value: 87\n    }]\n  };\n  const areaChart = {\n    hide: areaHide,\n    hideLegend: areaHideLegend,\n    hideTooltip: areaHideTooltip,\n    zIndex: areaZIndex,\n    chart: "area",\n    icon: areaIcon,\n    offset: areaOffset,\n    gradient: {\n      gid: "ar-grad",\n      points: [{\n        offset: 0,\n        stopColor: areaColor_1,\n        stopOpacity: areaColorOpacity_1\n      }, {\n        offset: 95,\n        stopColor: areaColor_2,\n        stopOpacity: areaColorOpacity_2\n      }]\n    },\n    properties: {\n      name: areaName,\n      dataKey: "a",\n      type: areaType,\n      stroke: areaStroke,\n      dotSettings: {\n        scale: areaScale,\n        initScale: areaInitScale,\n        width: areaWidth,\n        height: areaWidth\n      },\n      dot: areaDot,\n      strokeWidth: areaStrokeWidth\n    },\n    data: [{\n      label: 1608242400000,\n      value: 70\n    }, {\n      label: 1608328800000,\n      value: 40\n    }, {\n      label: 1608415200000,\n      value: 69\n    }, {\n      label: 1608501600000,\n      value: 84\n    }, {\n      label: 1608588000000,\n      value: 29\n    }, {\n      label: 1608674400000,\n      value: 74\n    }, {\n      label: 1608760800000,\n      value: 39\n    }, {\n      label: 1608847200000,\n      value: 74\n    }, {\n      label: 1608933600000,\n      value: 44\n    }, {\n      label: 1609020000000,\n      value: 43\n    }, {\n      label: 1609106400000,\n      value: 57\n    }, {\n      label: 1609192800000,\n      value: 52\n    }, {\n      label: 1609279200000,\n      value: 62\n    }, {\n      label: 1609365600000,\n      value: 74\n    }, {\n      label: 1609452000000,\n      value: 81\n    }, {\n      label: 1609538400000,\n      value: 78\n    }, {\n      label: 1609624800000,\n      value: 91\n    }, {\n      label: 1609711200000,\n      value: 80\n    }, {\n      label: 1609797600000,\n      value: 90\n    }, {\n      label: 1609884000000,\n      value: 80\n    }, {\n      label: 1609970400000,\n      value: 91\n    }, {\n      label: 1610056800000,\n      value: 93\n    }, {\n      label: 1610143200000,\n      value: 72\n    }, {\n      label: 1610229600000,\n      value: 101\n    }, {\n      label: 1610316000000,\n      value: 88\n    }, {\n      label: 1610402400000,\n      value: 110\n    }, {\n      label: 1610488800000,\n      value: 119\n    }, {\n      label: 1610575200000,\n      value: 130\n    }, {\n      label: 1610661600000,\n      value: 98\n    }, {\n      label: 1610748000000,\n      value: 102\n    }, {\n      label: 1610834400000,\n      value: 139\n    }, {\n      label: 1610920800000,\n      value: 123\n    }, {\n      label: 1611007200000,\n      value: 127\n    }, {\n      label: 1611093600000,\n      value: 114\n    }, {\n      label: 1611180000000,\n      value: 123\n    }, {\n      label: 1611266400000,\n      value: 86\n    }, {\n      label: 1611352800000,\n      value: 136\n    }, {\n      label: 1611439200000,\n      value: 139\n    }, {\n      label: 1611525600000,\n      value: 138\n    }, {\n      label: 1611612000000,\n      value: 153\n    }, {\n      label: 1611698400000,\n      value: 122\n    }, {\n      label: 1611784800000,\n      value: 169\n    }, {\n      label: 1611871200000,\n      value: 192\n    }, {\n      label: 1611957600000,\n      value: 195\n    }, {\n      label: 1612044000000,\n      value: 144\n    }, {\n      label: 1612130400000,\n      value: 142\n    }, {\n      label: 1612216800000,\n      value: 176\n    }, {\n      label: 1612303200000,\n      value: 174\n    }]\n  };\n  const lineChartOptions = {\n    id: "line-chart",\n    composeChart,\n    responsiveContainer,\n    cartesianGrid,\n    xAxis,\n    yAxis,\n    tooltip,\n    legend,\n    brush,\n    labels: labelsLineChart,\n    series: [areaChart]\n  };\n  return <div style={{\n    display: "flex"\n  }}>\n                <div style={{\n      marginBottom: "20px",\n      top: 25,\n      width: "1050px",\n      height: "600px"\n    }}>\n                    <Chart id={"line-chart"} composeChart={composeChart} responsiveContainer={responsiveContainer} cartesianGrid={cartesianGrid} xAxis={xAxis} yAxis={yAxis} tooltip={tooltip} legend={legend} brush={brush} labels={labelsLineChart} series={[lineChart, areaChart]} />\n                </div>\n                <div style={{\n      width: "500px",\n      height: "600px",\n      overflow: "auto"\n    }}>\n                    <pre>{JSON.stringify(clearData(lineChartOptions), null, 2)}</pre>\n                </div>\n            </div>;\n})'}};const chartHistogram=()=>react.createElement((()=>{const debounce=(0,addon_knobs_dist.number)("debounce",0,{},"responsiveContainer"),vertical=(0,addon_knobs_dist.boolean)("vertical",!1,"cartesianGrid"),horizontal=(0,addon_knobs_dist.boolean)("horizontal",!1,"cartesianGrid"),initMarginTop=(0,addon_knobs_dist.number)("initMargin.top",40,{},"composeChart"),initMarginBottom=(0,addon_knobs_dist.number)("initMargin.bottom",20,{},"composeChart"),marginLeft=(0,addon_knobs_dist.number)("initMargin.left",20,{},"composeChart"),marginRight=(0,addon_knobs_dist.number)("initMargin.right",50,{},"composeChart"),barCategoryGap=(0,addon_knobs_dist.text)("barCategoryGap","10%","composeChart"),barGap=(0,addon_knobs_dist.number)("barGap",4,{},"composeChart"),maxBarSize=(0,addon_knobs_dist.number)("maxBarSize",64,{},"composeChart"),xAxisHide=(0,addon_knobs_dist.boolean)("hide",!1,"xAxis"),xAxisOrientation=(0,addon_knobs_dist.select)("orientation",{bottom:"bottom",top:"top"},"bottom","xAxis"),xAxisTickLine=(0,addon_knobs_dist.boolean)("tickLine",!1,"xAxis"),xAxisTickSize=(0,addon_knobs_dist.number)("tickSize",6,{},"xAxis"),xAxisTickMargin=(0,addon_knobs_dist.number)("tickMargin",10,{},"xAxis"),xAxisMinTickGap=(0,addon_knobs_dist.number)("minTickGap",5,{},"xAxis"),xAxisLine=(0,addon_knobs_dist.boolean)("axisLine",!1,"xAxis"),yAxisHide=(0,addon_knobs_dist.boolean)("hide",!0,"yAxis"),barHideLegend=((0,addon_knobs_dist.boolean)("hide",!1,"bar"),(0,addon_knobs_dist.boolean)("hideLegend",!1,"bar")),barHideTooltip=(0,addon_knobs_dist.boolean)("hideTooltip",!1,"bar"),barZIndex=(0,addon_knobs_dist.number)("zIndex",10,{},"bar"),barIcon=(0,addon_knobs_dist.select)("icon",{circleLine:"circleLine",filledCircle:"filledCircle",strokeCircle:"strokeCircle",circle:"circle"},"circle","bar"),barRadius=(0,addon_knobs_dist.object)("radius",{top:10,bottom:10},"bar"),barFormatter=(0,addon_knobs_dist.text)("labelList.formatter","","bar"),barLabelListOffset=(0,addon_knobs_dist.number)("labelList.offset",10,{},"bar"),barFill=(0,addon_knobs_dist.text)("properties.fill","var(--color-static-graphic-green-jungle)","bar"),responsiveContainer={debounce:debounce},cartesianGrid={vertical:vertical,horizontal:horizontal},composeChart={initMargin:{top:initMarginTop,bottom:initMarginBottom,left:marginLeft,right:marginRight},barGap:barGap,maxBarSize:maxBarSize,barCategoryGap:barCategoryGap},xAxis={hide:xAxisHide,axisLine:xAxisLine,type:"category",allowDecimals:!0,allowDuplicatedCategory:!0,interval:"preserveStartEnd",minTickGap:xAxisMinTickGap,tickLine:xAxisTickLine,tickSize:xAxisTickSize,tickMargin:xAxisTickMargin,dataKey:"label",orientation:xAxisOrientation},yAxis={hide:yAxisHide},labelsBarChart=["Long label","Label1","Label2","Label3","Label4","Label5","Label6","Label7"],barChart={hide:barHideLegend,hideLegend:barHideLegend,hideTooltip:barHideTooltip,zIndex:barZIndex,chart:"bar",icon:barIcon,radius:barRadius||0,labelList:{formatter:decimal=>`${decimal}${barFormatter}`,offset:barLabelListOffset},properties:{name:(0,addon_knobs_dist.text)("properties.name","приход","bar"),dataKey:"cm",formatter:decimal=>""+1e3*decimal,fill:barFill},data:[{label:"Long label",value:5e3},{label:"Label1",value:650},{label:"Label2",value:3522},{label:"Label3",value:0},{label:"Label4",value:2e3},{label:"Label5",value:1043},{label:"Label6",value:600},{label:"Label7",value:1}]},barChartOptions={id:"bar-chart",composeChart:composeChart,responsiveContainer:responsiveContainer,cartesianGrid:cartesianGrid,xAxis:xAxis,yAxis:yAxis,labels:labelsBarChart,series:[barChart]};return(0,jsx_runtime.jsxs)("div",{style:{display:"flex"},children:[(0,jsx_runtime.jsx)("div",{style:{marginBottom:"20px",top:25,width:"1050px",height:"600px"},children:(0,jsx_runtime.jsx)(modern.Chart,{id:"bar-chart",composeChart:composeChart,responsiveContainer:responsiveContainer,cartesianGrid:cartesianGrid,xAxis:xAxis,yAxis:yAxis,labels:labelsBarChart,series:[barChart]})}),(0,jsx_runtime.jsx)("div",{style:{width:"500px",height:"600px",overflow:"auto"},children:(0,jsx_runtime.jsx)("pre",{children:JSON.stringify((obj=>{const series=JSON.parse(JSON.stringify(obj)).series.map((item=>(item.data=[{label:"label",value:"value"},"..."],item)));return{...obj,labels:["label","label","..."],series:series}})(barChartOptions),null,2)})})]})}));chartHistogram.storyName="Chart.Histogram",chartHistogram.parameters={storySource:{source:'React.createElement(() => {\n  const clearData = obj => {\n    const copy = JSON.parse(JSON.stringify(obj));\n    const labels = ["label", "label", "..."];\n    const series = copy.series.map(item => {\n      item.data = [{\n        label: "label",\n        value: "value"\n      }, "..."];\n      return item;\n    });\n    return {\n      ...obj,\n      labels,\n      series\n    };\n  };\n  const orientationVertical = {\n    bottom: "bottom",\n    top: "top"\n  };\n  const orientationHorizontal = {\n    left: "left",\n    right: "right"\n  };\n  const alignHorizontal = {\n    left: "left",\n    center: "center",\n    right: "right"\n  };\n  const alignVertical = {\n    bottom: "bottom",\n    middle: "middle",\n    top: "top"\n  };\n  const linesType = {\n    linear: "linear",\n    monotone: "monotone",\n    step: "step"\n  };\n  const animationType = {\n    ease: "ease",\n    "ease-in": "ease-in",\n    "ease-out": "ease-out",\n    "ease-in-out": "ease-in-out",\n    linear: "linear"\n  };\n  const iconTypes = {\n    circleLine: "circleLine",\n    filledCircle: "filledCircle",\n    strokeCircle: "strokeCircle",\n    circle: "circle"\n  };\n  const responsiveContainerId = "responsiveContainer";\n  const cartesianGridId = "cartesianGrid";\n  const composeChartId = "composeChart";\n  const xAxisId = "xAxis";\n  const yAxisId = "yAxis";\n  const barId = "bar";\n  const debounce = number("debounce", 0, {}, responsiveContainerId);\n  const vertical = boolean("vertical", false, cartesianGridId);\n  const horizontal = boolean("horizontal", false, cartesianGridId);\n  const initMarginTop = number("initMargin.top", 40, {}, composeChartId);\n  const initMarginBottom = number("initMargin.bottom", 20, {}, composeChartId);\n  const marginLeft = number("initMargin.left", 20, {}, composeChartId);\n  const marginRight = number("initMargin.right", 50, {}, composeChartId);\n  const barCategoryGap = text("barCategoryGap", "10%", composeChartId);\n  const barGap = number("barGap", 4, {}, composeChartId);\n  const maxBarSize = number("maxBarSize", 64, {}, composeChartId);\n  const xAxisHide = boolean("hide", false, xAxisId);\n  const xAxisOrientation = select("orientation", orientationVertical, "bottom", xAxisId);\n  const xAxisTickLine = boolean("tickLine", false, xAxisId);\n  const xAxisTickSize = number("tickSize", 6, {}, xAxisId);\n  const xAxisTickMargin = number("tickMargin", 10, {}, xAxisId);\n  const xAxisMinTickGap = number("minTickGap", 5, {}, xAxisId);\n  const xAxisLine = boolean("axisLine", false, xAxisId);\n  const yAxisHide = boolean("hide", true, yAxisId);\n  const barHide = boolean("hide", false, barId);\n  const barHideLegend = boolean("hideLegend", false, barId);\n  const barHideTooltip = boolean("hideTooltip", false, barId);\n  const barZIndex = number("zIndex", 10, {}, barId);\n  const barIcon = select("icon", iconTypes, "circle", barId);\n  const barRadius = object("radius", {\n    top: 10,\n    bottom: 10\n  }, barId);\n  const barFormatter = text("labelList.formatter", "", barId);\n  const barLabelListOffset = number("labelList.offset", 10, {}, barId);\n  const barFill = text("properties.fill", "var(--color-static-graphic-green-jungle)", barId);\n  const barName = text("properties.name", "\\u043F\\u0440\\u0438\\u0445\\u043E\\u0434", barId);\n  const responsiveContainer = {\n    debounce\n  };\n  const cartesianGrid = {\n    vertical,\n    horizontal\n  };\n  const composeChart = {\n    initMargin: {\n      top: initMarginTop,\n      bottom: initMarginBottom,\n      left: marginLeft,\n      right: marginRight\n    },\n    barGap,\n    maxBarSize,\n    barCategoryGap\n  };\n  const xAxis = {\n    hide: xAxisHide,\n    axisLine: xAxisLine,\n    type: "category",\n    allowDecimals: true,\n    allowDuplicatedCategory: true,\n    interval: "preserveStartEnd",\n    minTickGap: xAxisMinTickGap,\n    tickLine: xAxisTickLine,\n    tickSize: xAxisTickSize,\n    tickMargin: xAxisTickMargin,\n    dataKey: "label",\n    orientation: xAxisOrientation\n  };\n  const yAxis = {\n    hide: yAxisHide\n  };\n  const labelsBarChart = ["Long label", "Label1", "Label2", "Label3", "Label4", "Label5", "Label6", "Label7"];\n  const barChart = {\n    hide: barHideLegend,\n    hideLegend: barHideLegend,\n    hideTooltip: barHideTooltip,\n    zIndex: barZIndex,\n    chart: "bar",\n    icon: barIcon,\n    radius: barRadius || 0,\n    labelList: {\n      formatter: decimal => `${decimal}${barFormatter}`,\n      offset: barLabelListOffset\n    },\n    properties: {\n      name: barName,\n      dataKey: "cm",\n      formatter: decimal => `${decimal * 1000}`,\n      fill: barFill\n    },\n    data: [{\n      label: "Long label",\n      value: 5000\n    }, {\n      label: "Label1",\n      value: 650\n    }, {\n      label: "Label2",\n      value: 3522\n    }, {\n      label: "Label3",\n      value: 0\n    }, {\n      label: "Label4",\n      value: 2000\n    }, {\n      label: "Label5",\n      value: 1043\n    }, {\n      label: "Label6",\n      value: 600\n    }, {\n      label: "Label7",\n      value: 1\n    }]\n  };\n  const barChartOptions = {\n    id: "bar-chart",\n    composeChart,\n    responsiveContainer,\n    cartesianGrid,\n    xAxis,\n    yAxis,\n    labels: labelsBarChart,\n    series: [barChart]\n  };\n  return <div style={{\n    display: "flex"\n  }}>\n                <div style={{\n      marginBottom: "20px",\n      top: 25,\n      width: "1050px",\n      height: "600px"\n    }}>\n                    <Chart id="bar-chart" composeChart={composeChart} responsiveContainer={responsiveContainer} cartesianGrid={cartesianGrid} xAxis={xAxis} yAxis={yAxis} labels={labelsBarChart} series={[barChart]} />\n                </div>\n                <div style={{\n      width: "500px",\n      height: "600px",\n      overflow: "auto"\n    }}>\n                    <pre>{JSON.stringify(clearData(barChartOptions), null, 2)}</pre>\n                </div>\n            </div>;\n})'}};const componentMeta={title:"Components/Chart",id:"Chart",tags:["stories-mdx"],includeStories:["chartBar","chartLine","chartHistogram"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:function Component_stories_MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(Component_stories_createMdxContent,{...props})}):Component_stories_createMdxContent(props)}};var Component_stories=componentMeta},"./.storybook/blocks/index.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{Eg:function(){return Changelog},yt:function(){return ComponentHeader},ZV:function(){return CssVars},mQ:function(){return Tabs}});var react=__webpack_require__("./node_modules/react/index.js"),classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),index_module_changelog="changelog_UmYwo",index_module_root="root_GgHKe",jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),Changelog=function Changelog(_ref){var content=_ref.content,_ref$root=_ref.root,root=void 0!==_ref$root&&_ref$root;return(0,jsx_runtime.jsx)("div",{className:classnames_default()(index_module_changelog,root&&index_module_root,"sb-unstyled"),children:content})};try{Changelog.displayName="Changelog",Changelog.__docgenInfo={description:"",displayName:"Changelog",props:{content:{defaultValue:null,description:"",name:"content",required:!0,type:{name:"ReactNode"}},root:{defaultValue:{value:"false"},description:"",name:"root",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES[".storybook/blocks/changelog/changelog.tsx#Changelog"]={docgenInfo:Changelog.__docgenInfo,name:"Changelog",path:".storybook/blocks/changelog/changelog.tsx#Changelog"})}catch(__react_docgen_typescript_loader_error){}var slicedToArray=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/slicedToArray.js"),modern=__webpack_require__("./dist/link/modern/index.js"),esm=__webpack_require__("./node_modules/storybook-addon-live-examples/dist/esm/index.js"),css_vars_module_cssVars="cssVars_OsBA8",rootBlockRegexp=/:root {([^}]*)}/g,mixinRegexp=/(?:@define-mixin)(.*{[^}]*})/g,CssVars=function CssVars(_ref){var css=_ref.css,title=_ref.title,expandable=_ref.expandable,_ref$type=_ref.type,type=void 0===_ref$type?"vars":_ref$type,_useState=(0,react.useState)(""),_useState2=(0,slicedToArray.Z)(_useState,2),vars=_useState2[0],setVars=_useState2[1],_useState3=(0,react.useState)(!expandable),_useState4=(0,slicedToArray.Z)(_useState3,2),open=_useState4[0],setOpen=_useState4[1],isVars="vars"===type,regexp=isVars?rootBlockRegexp:mixinRegexp;return(0,react.useEffect)((function(){for(var rootBlockMatch=regexp.exec(css),rootBlocks=[];rootBlockMatch;)rootBlocks.push(rootBlockMatch[1]),rootBlockMatch=regexp.exec(css);var result=rootBlocks.reduce((function(acc,item,index){var divider=index===rootBlocks.length-1?"":"\n";return"".concat(acc).concat(item).concat(divider)}),isVars?":root {":"");isVars&&(result+="}"),setVars(result)}),[]),(0,jsx_runtime.jsxs)("div",{className:classnames_default()("sb-unstyled",css_vars_module_cssVars),children:[title&&(0,jsx_runtime.jsx)("h2",{className:classnames_default()("sbdocs","sbdocs-h2"),children:title}),vars&&(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[expandable&&(0,jsx_runtime.jsx)(modern.Link,{view:"default",onClick:function onClick(){return setOpen(!open)},pseudo:!0,children:open?"Скрыть":"Показать"}),open&&(0,jsx_runtime.jsx)(esm.en,{language:"css",code:vars,live:!1})]})]})};try{CssVars.displayName="CssVars",CssVars.__docgenInfo={description:"",displayName:"CssVars",props:{css:{defaultValue:null,description:"",name:"css",required:!0,type:{name:"string"}},title:{defaultValue:null,description:"",name:"title",required:!1,type:{name:"string"}},expandable:{defaultValue:null,description:"",name:"expandable",required:!1,type:{name:"boolean"}},type:{defaultValue:{value:"vars"},description:"",name:"type",required:!1,type:{name:"enum",value:[{value:'"vars"'},{value:'"mixins"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES[".storybook/blocks/css-vars/css-vars.tsx#CssVars"]={docgenInfo:CssVars.__docgenInfo,name:"CssVars",path:".storybook/blocks/css-vars/css-vars.tsx#CssVars"})}catch(__react_docgen_typescript_loader_error){}var defineProperty=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),typography_modern=__webpack_require__("./dist/typography/modern/index.js"),space_modern=__webpack_require__("./dist/space/modern/index.js"),dist_esm=__webpack_require__("./node_modules/@alfalab/utils/dist/esm/index.js"),GithubIcon=__webpack_require__("./.storybook/components/icons/GithubIcon.jsx"),usages_namespaceObject=JSON.parse('{"updatedAt":1671683530526,"withSuffix":{"projects":0,"imports":0,"search":"withSuffix"},"Typography":{"projects":149,"imports":3111,"search":"Typography"},"Tooltip":{"projects":106,"imports":288,"search":"Tooltip*"},"ToastPlate":{"projects":1,"imports":1,"search":"ToastPlate"},"Toast":{"projects":14,"imports":27,"search":"Toast"},"TimeInput":{"projects":0,"imports":0,"search":"TimeInput"},"Textarea":{"projects":45,"imports":74,"search":"Textarea"},"Tag":{"projects":77,"imports":211,"search":"Tag"},"Tabs":{"projects":60,"imports":89,"search":"Tabs*"},"Table":{"projects":34,"imports":134,"search":"Table"},"Switch":{"projects":40,"imports":87,"search":"Switch"},"Steps":{"projects":1,"imports":2,"search":"Steps"},"SteppedProgressBar":{"projects":2,"imports":2,"search":"SteppedProgressBar"},"Status":{"projects":39,"imports":84,"search":"Status"},"Stack":{"projects":1,"imports":1,"search":"Stack"},"Spinner":{"projects":87,"imports":227,"search":"Spinner"},"Space":{"projects":69,"imports":315,"search":"Space"},"SliderInput":{"projects":15,"imports":19,"search":"SliderInput"},"Slider":{"projects":1,"imports":1,"search":"Slider"},"Skeleton":{"projects":68,"imports":354,"search":"Skeleton"},"SidePanel":{"projects":7,"imports":17,"search":"SidePanel*"},"SelectWithTags":{"projects":10,"imports":12,"search":"SelectWithTags"},"Select":{"projects":97,"imports":263,"search":"Select*"},"Scrollbar":{"projects":2,"imports":5,"search":"Scrollbar"},"Radio":{"projects":47,"imports":105,"search":"Radio"},"RadioGroup":{"projects":64,"imports":191,"search":"RadioGroup"},"PureInput":{"projects":0,"imports":0,"search":"PureInput"},"PureCell":{"projects":12,"imports":65,"search":"PureCell"},"ProgressBar":{"projects":11,"imports":12,"search":"ProgressBar"},"Portal":{"projects":4,"imports":5,"search":"Portal"},"Popover":{"projects":20,"imports":45,"search":"Popover"},"Plate":{"projects":63,"imports":214,"search":"Plate"},"PickerButton":{"projects":20,"imports":24,"search":"PickerButton*"},"PhoneInput":{"projects":30,"imports":50,"search":"PhoneInput"},"PasswordInput":{"projects":5,"imports":9,"search":"PasswordInput"},"PatternLock":{"projects":0,"imports":0,"search":"PatternLock"},"PassCode":{"projects":0,"imports":0,"search":"PassCode"},"Pagination":{"projects":7,"imports":8,"search":"Pagination"},"NotificationManager":{"projects":22,"imports":22,"search":"NotificationManager"},"Notification":{"projects":36,"imports":48,"search":"Notification"},"Mq":{"projects":9,"imports":21,"search":"Mq"},"Modal":{"projects":123,"imports":346,"search":"Modal*"},"MaskedInput":{"projects":39,"imports":106,"search":"MaskedInput"},"Loader":{"projects":34,"imports":63,"search":"Loader"},"ListHeader":{"projects":7,"imports":8,"search":"ListHeader"},"List":{"projects":51,"imports":140,"search":"List"},"Link":{"projects":113,"imports":535,"search":"Link"},"KeyboardFocusable":{"projects":3,"imports":3,"search":"KeyboardFocusable"},"IntlPhoneInput":{"projects":1,"imports":1,"search":"IntlPhoneInput"},"InputAutocomplete":{"projects":62,"imports":126,"search":"InputAutocomplete*"},"Input":{"projects":89,"imports":361,"search":"Input"},"IconView":{"projects":0,"imports":0,"search":"IconView"},"IconButton":{"projects":76,"imports":227,"search":"IconButton"},"HatchingProgressBar":{"projects":1,"imports":1,"search":"HatchingProgressBar"},"Grid":{"projects":61,"imports":445,"search":"Grid"},"Gap":{"projects":0,"imports":0,"search":"Gap"},"Gallery":{"projects":2,"imports":4,"search":"Gallery"},"FormControl":{"projects":3,"imports":3,"search":"FormControl"},"FilterTag":{"projects":4,"imports":16,"search":"FilterTag"},"FileUploadItem":{"projects":17,"imports":20,"search":"FileUploadItem"},"Dropzone":{"projects":9,"imports":11,"search":"Dropzone"},"Drawer":{"projects":18,"imports":25,"search":"Drawer"},"Divider":{"projects":48,"imports":131,"search":"Divider"},"DateTimeInput":{"projects":0,"imports":0,"search":"DateTimeInput"},"DateRangeInput":{"projects":0,"imports":0,"search":"DateRangeInput"},"DateInput":{"projects":5,"imports":5,"search":"DateInput"},"CustomButton":{"projects":1,"imports":2,"search":"CustomButton"},"ConfirmationV1":{"projects":1,"imports":1,"search":"ConfirmationV1"},"Confirmation":{"projects":17,"imports":29,"search":"Confirmation*"},"Comment":{"projects":1,"imports":3,"search":"Comment"},"Collapse":{"projects":44,"imports":66,"search":"Collapse"},"CodeInput":{"projects":1,"imports":1,"search":"CodeInput"},"CircularProgressBar":{"projects":11,"imports":16,"search":"CircularProgressBar"},"CheckboxGroup":{"projects":21,"imports":37,"search":"CheckboxGroup"},"Checkbox":{"projects":74,"imports":197,"search":"Checkbox"},"Chart":{"projects":1,"imports":1,"search":"Chart"},"CDNIcon":{"projects":13,"imports":55,"search":"CDNIcon"},"CardImage":{"projects":4,"imports":4,"search":"CardImage"},"CalendarWithSkeleton":{"projects":1,"imports":1,"search":"CalendarWithSkeleton"},"CalendarRange":{"projects":10,"imports":17,"search":"CalendarRange"},"CalendarInput":{"projects":40,"imports":92,"search":"CalendarInput*"},"Calendar":{"projects":9,"imports":19,"search":"Calendar*"},"Button":{"projects":155,"imports":1690,"search":"Button"},"BottomSheet":{"projects":22,"imports":43,"search":"BottomSheet"},"BaseModal":{"projects":2,"imports":2,"search":"BaseModal"},"BankCard":{"projects":1,"imports":1,"search":"BankCard"},"Badge":{"projects":66,"imports":168,"search":"Badge"},"AmountInput":{"projects":36,"imports":63,"search":"AmountInput"},"Backdrop":{"projects":4,"imports":4,"search":"Backdrop"},"Amount":{"projects":40,"imports":143,"search":"Amount"},"Alert":{"projects":60,"imports":182,"search":"Alert"},"Attach":{"projects":12,"imports":13,"search":"Attach"},"ActionButton":{"projects":1,"imports":1,"search":"ActionButton"}}'),ComponentHeader_module_component="component_qx5zQ",ComponentHeader_module_text="text_TIocB",ComponentHeader_module_textMobile="textMobile_d_rnY",ComponentHeader_module_info="info_iGRHP",ComponentHeader_module_commonLink="commonLink_WJRCZ",ComponentHeader_module_links="links_kuMT8",ComponentHeader_module_usageLink="usageLink_ilI5I",ComponentHeader_module_github="github_ks4z8",ComponentHeader_module_design="design_NpKuj",mq_modern=__webpack_require__("./dist/mq/modern/index.js"),ComponentHeader=function ComponentHeader(_ref){var _usages$name,_usages$name2,_usages$name3,_usages$name4,_usages$name5,_usages$name6,name=_ref.name,design=_ref.design,children=_ref.children,_useMatchMedia=(0,mq_modern.useMatchMedia)("--tablet-m"),isDesktop=(0,slicedToArray.Z)(_useMatchMedia,1)[0],packageName=name.replace(/([a-z0-9])([A-Z])/g,"$1-$2").replace(/([A-Z])([A-Z])(?=[a-z])/g,"$1-$2").toLowerCase(),githubLink="https://github.com/core-ds/core-components/tree/master/packages/".concat(packageName),Title=isDesktop?typography_modern.Typography.Title:typography_modern.Typography.TitleMobile;return(0,jsx_runtime.jsxs)("div",{className:classnames_default()("sb-unstyled",ComponentHeader_module_component),children:[(0,jsx_runtime.jsx)(Title,{tag:"h1",view:"xlarge",children:name}),children&&(0,jsx_runtime.jsx)(typography_modern.Typography.Text,{tag:"p",view:"primary-medium",className:classnames_default()(ComponentHeader_module_text,(0,defineProperty.Z)({},ComponentHeader_module_textMobile,!isDesktop)),children:children}),(0,jsx_runtime.jsxs)("div",{className:ComponentHeader_module_links,children:[(0,jsx_runtime.jsx)("a",{className:classnames_default()(ComponentHeader_module_design,(0,defineProperty.Z)({},ComponentHeader_module_commonLink,!design)),href:design||"https://www.figma.com/file/cdNnkh2QdxuvYLrBm4cubM/Web-%3A%3A-Core-Default-Components",target:"_blank",children:"Figma"}),(0,jsx_runtime.jsxs)("a",{className:ComponentHeader_module_github,href:githubLink,target:"_blank",children:[(0,jsx_runtime.jsx)(GithubIcon.E,{fill:"var(--color-light-graphic-primary)"}),"Github"]})]}),(0,jsx_runtime.jsx)(space_modern.Space,{direction:"horizontal",align:"center",className:ComponentHeader_module_info,children:(null===(_usages$name=usages_namespaceObject[name])||void 0===_usages$name?void 0:_usages$name.projects)>0&&(0,jsx_runtime.jsxs)(typography_modern.Typography.Text,{view:"primary-small",color:"secondary",children:["Используется в"," ",(0,jsx_runtime.jsxs)(modern.Link,{href:"http://design/design-system-usage/usage-chart?component=".concat(null===(_usages$name2=usages_namespaceObject[name])||void 0===_usages$name2?void 0:_usages$name2.search),target:"_blank",view:"secondary",underline:!1,title:"Необходимо подключение к VPN",className:ComponentHeader_module_usageLink,children:[null===(_usages$name3=usages_namespaceObject[name])||void 0===_usages$name3?void 0:_usages$name3.projects," ",(0,dist_esm._6)(null===(_usages$name4=usages_namespaceObject[name])||void 0===_usages$name4?void 0:_usages$name4.projects,"проекте","проектах","проектах")]})," и ","~",null===(_usages$name5=usages_namespaceObject[name])||void 0===_usages$name5?void 0:_usages$name5.imports," ",(0,dist_esm._6)(null===(_usages$name6=usages_namespaceObject[name])||void 0===_usages$name6?void 0:_usages$name6.imports,"файле","файлах","файлах")]})})]})};try{ComponentHeader.displayName="ComponentHeader",ComponentHeader.__docgenInfo={description:"",displayName:"ComponentHeader",props:{name:{defaultValue:null,description:"",name:"name",required:!0,type:{name:"string"}},version:{defaultValue:null,description:"",name:"version",required:!1,type:{name:"string"}},design:{defaultValue:null,description:"",name:"design",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES[".storybook/blocks/component-header/ComponentHeader.tsx#ComponentHeader"]={docgenInfo:ComponentHeader.__docgenInfo,name:"ComponentHeader",path:".storybook/blocks/component-header/ComponentHeader.tsx#ComponentHeader"})}catch(__react_docgen_typescript_loader_error){}__webpack_require__("./.storybook/blocks/grid/index.ts");var _TabTitle,tabs_modern=__webpack_require__("./dist/tabs/modern/index.js"),tabs_index_module_tabs="tabs_BRA6G",TabName=function(TabName){return TabName.DESCRIPTION="DESCRIPTION",TabName.PROPS="PROPS",TabName.CSS_VARS="CSS_VARS",TabName.CHANGELOG="CHANGELOG",TabName.DEVELOPMENT="DEVELOPMENT",TabName}(TabName||{}),TabTitle=(_TabTitle={},(0,defineProperty.Z)(_TabTitle,TabName.DESCRIPTION,"Описание"),(0,defineProperty.Z)(_TabTitle,TabName.PROPS,"Свойства"),(0,defineProperty.Z)(_TabTitle,TabName.CSS_VARS,"CSS-переменные"),(0,defineProperty.Z)(_TabTitle,TabName.CHANGELOG,"Обновления"),(0,defineProperty.Z)(_TabTitle,TabName.DEVELOPMENT,"Разработчику"),_TabTitle),Tabs=function Tabs(_ref){var description=_ref.description,props=_ref.props,cssVars=_ref.cssVars,changelog=_ref.changelog,_ref$defaultSelected=_ref.defaultSelected,defaultSelected=void 0===_ref$defaultSelected?TabName.DESCRIPTION:_ref$defaultSelected,development=_ref.development,_useState=(0,react.useState)(defaultSelected),_useState2=(0,slicedToArray.Z)(_useState,2),selected=_useState2[0],setSelected=_useState2[1],handleChange=(0,react.useCallback)((function(_,_ref2){var selectedId=_ref2.selectedId;setSelected(selectedId)}),[]),tabs=(0,react.useMemo)((function(){return function renderTabs(){return[(0,jsx_runtime.jsx)(tabs_modern.Tab,{title:TabTitle[TabName.DESCRIPTION],id:TabName.DESCRIPTION,children:description},"description"),props?(0,jsx_runtime.jsx)(tabs_modern.Tab,{title:TabTitle[TabName.PROPS],id:TabName.PROPS,children:props},"props"):null,cssVars?(0,jsx_runtime.jsx)(tabs_modern.Tab,{title:TabTitle[TabName.CSS_VARS],id:TabName.CSS_VARS,children:cssVars},"css-vars"):null,development?(0,jsx_runtime.jsx)(tabs_modern.Tab,{title:TabTitle[TabName.DEVELOPMENT],id:TabName.DEVELOPMENT,children:development},"development"):null,changelog?(0,jsx_runtime.jsx)(tabs_modern.Tab,{title:TabTitle[TabName.CHANGELOG],id:TabName.CHANGELOG,children:(0,jsx_runtime.jsx)("div",{style:{marginTop:"32px"},children:(0,jsx_runtime.jsx)(Changelog,{content:changelog})})},"changelog"):null].filter(react.isValidElement)}()}),[description,props,cssVars]);return(0,jsx_runtime.jsx)(tabs_modern.TabsResponsive,{className:"sb-unstyled",selectedId:selected,onChange:handleChange,containerClassName:tabs_index_module_tabs,children:tabs})};try{Tabs.displayName="Tabs",Tabs.__docgenInfo={description:"",displayName:"Tabs",props:{description:{defaultValue:null,description:"",name:"description",required:!0,type:{name:"ReactNode"}},props:{defaultValue:null,description:"",name:"props",required:!0,type:{name:"ReactNode"}},cssVars:{defaultValue:null,description:"",name:"cssVars",required:!1,type:{name:"ReactNode"}},changelog:{defaultValue:null,description:"",name:"changelog",required:!1,type:{name:"string"}},defaultSelected:{defaultValue:{value:"TabName.DESCRIPTION"},description:"",name:"defaultSelected",required:!1,type:{name:"enum",value:[{value:'"DESCRIPTION"'},{value:'"PROPS"'},{value:'"CSS_VARS"'},{value:'"CHANGELOG"'},{value:'"DEVELOPMENT"'}]}},development:{defaultValue:null,description:"",name:"development",required:!1,type:{name:"ReactNode"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES[".storybook/blocks/tabs/component.tsx#Tabs"]={docgenInfo:Tabs.__docgenInfo,name:"Tabs",path:".storybook/blocks/tabs/component.tsx#Tabs"})}catch(__react_docgen_typescript_loader_error){}},"./.storybook/components/icons/GithubIcon.jsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{E:function(){return GithubIcon}});__webpack_require__("./node_modules/react/index.js");var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js"),GithubIcon=function GithubIcon(_ref){var _ref$fill=_ref.fill,fill=void 0===_ref$fill?"#24292E":_ref$fill,_ref$width=_ref.width,width=void 0===_ref$width?32:_ref$width,_ref$height=_ref.height,height=void 0===_ref$height?32:_ref$height;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",width:width,height:height,viewBox:"0 0 32 32",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M16 0C7.16 0 0 7.16 0 16C0 23.08 4.58 29.06 10.94 31.18C11.74 31.32 12.04 30.84 12.04 30.42C12.04 30.04 12.02 28.78 12.02 27.44C8 28.18 6.96 26.46 6.64 25.56C6.46 25.1 5.68 23.68 5 23.3C4.44 23 3.64 22.26 4.98 22.24C6.24 22.22 7.14 23.4 7.44 23.88C8.88 26.3 11.18 25.62 12.1 25.2C12.24 24.16 12.66 23.46 13.12 23.06C9.56 22.66 5.84 21.28 5.84 15.16C5.84 13.42 6.46 11.98 7.48 10.86C7.32 10.46 6.76 8.82 7.64 6.62C7.64 6.62 8.98 6.2 12.04 8.26C13.32 7.9 14.68 7.72 16.04 7.72C17.4 7.72 18.76 7.9 20.04 8.26C23.1 6.18 24.44 6.62 24.44 6.62C25.32 8.82 24.76 10.46 24.6 10.86C25.62 11.98 26.24 13.4 26.24 15.16C26.24 21.3 22.5 22.66 18.94 23.06C19.52 23.56 20.02 24.52 20.02 26.02C20.02 28.16 20 29.88 20 30.42C20 30.84 20.3 31.34 21.1 31.18C27.42 29.06 32 23.06 32 16C32 7.16 24.84 0 16 0V0Z",fill:fill})})};GithubIcon.__docgenInfo={description:"",methods:[],displayName:"GithubIcon",props:{fill:{defaultValue:{value:"'#24292E'",computed:!1},required:!1},width:{defaultValue:{value:"32",computed:!1},required:!1},height:{defaultValue:{value:"32",computed:!1},required:!1}}}}}]);