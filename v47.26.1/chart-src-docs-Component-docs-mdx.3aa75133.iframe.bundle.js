"use strict";(self.webpackChunk_alfalab_core_components=self.webpackChunk_alfalab_core_components||[]).push([[9404,1341],{"./node_modules/@mdx-js/react/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{MDXContext:function(){return MDXContext},MDXProvider:function(){return MDXProvider},useMDXComponents:function(){return useMDXComponents},withMDXComponents:function(){return withMDXComponents}});var react=__webpack_require__("./node_modules/react/index.js");let MDXContext=react.createContext({});function withMDXComponents(Component){return boundMDXComponent;function boundMDXComponent(props){let allComponents=useMDXComponents(props.components);return react.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){let contextComponents=react.useContext(MDXContext);return react.useMemo(()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components},[contextComponents,components])}let emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react.createElement(MDXContext.Provider,{value:allComponents},children)}},"./node_modules/@storybook/addon-docs/dist/chunk-HLWAVYOI.mjs":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{r:function(){return DocsRenderer}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_storybook_react_dom_shim__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/react-dom-shim/dist/react-18.mjs"),_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs"),defaultComponents={code:_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.bD,a:_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.Ct,..._storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.lO},ErrorBoundary=class extends react__WEBPACK_IMPORTED_MODULE_0__.Component{constructor(){super(...arguments),this.state={hasError:!1}}static getDerivedStateFromError(){return{hasError:!0}}componentDidCatch(err){let{showException}=this.props;showException(err)}render(){let{hasError}=this.state,{children}=this.props;return hasError?null:react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,children)}},DocsRenderer=class{constructor(){this.render=async(context,docsParameter,element)=>{let components={...defaultComponents,...docsParameter?.components},TDocs=_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.WI;return new Promise((resolve,reject)=>{__webpack_require__.e(1341).then(__webpack_require__.bind(__webpack_require__,"./node_modules/@mdx-js/react/index.js")).then(({MDXProvider})=>(0,_storybook_react_dom_shim__WEBPACK_IMPORTED_MODULE_2__.l)(react__WEBPACK_IMPORTED_MODULE_0__.createElement(ErrorBoundary,{showException:reject,key:Math.random()},react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXProvider,{components},react__WEBPACK_IMPORTED_MODULE_0__.createElement(TDocs,{context,docsParameter}))),element)).then(()=>resolve())})},this.unmount=element=>{(0,_storybook_react_dom_shim__WEBPACK_IMPORTED_MODULE_2__.K)(element)}}}},"./node_modules/@storybook/addon-docs/dist/index.mjs":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{$4:function(){return _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.$4},Ed:function(){return _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.Ed},UG:function(){return _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.UG},h_:function(){return _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.h_},oG:function(){return _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.oG}}),__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-HLWAVYOI.mjs");var _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs")},"./node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim.js":function(module,__unused_webpack_exports,__webpack_require__){var mod,secondTarget,__defProp=Object.defineProperty,__getOwnPropDesc=Object.getOwnPropertyDescriptor,__getOwnPropNames=Object.getOwnPropertyNames,__hasOwnProp=Object.prototype.hasOwnProperty,__copyProps=(to,from,except,desc)=>{if(from&&"object"==typeof from||"function"==typeof from)for(let key of __getOwnPropNames(from))__hasOwnProp.call(to,key)||key===except||__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});return to},mdx_react_shim_exports={};module.exports=__copyProps(__defProp({},"__esModule",{value:!0}),mdx_react_shim_exports),mod=__webpack_require__("./node_modules/@mdx-js/react/index.js"),secondTarget=module.exports,__copyProps(mdx_react_shim_exports,mod,"default"),secondTarget&&__copyProps(secondTarget,mod,"default")},"./packages/chart/src/docs/Component.docs.mdx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:function(){return Component_docs}}),__webpack_require__("./node_modules/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),mdx_react_shim=__webpack_require__("./node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim.js"),dist=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs"),blocks=__webpack_require__("./.storybook/blocks/index.ts"),Component_stories=__webpack_require__("./packages/chart/src/docs/Component.stories.tsx");function _createMdxContent(props){let _components=Object.assign({h2:"h2",pre:"pre",code:"code"},(0,mdx_react_shim.useMDXComponents)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(_components.h2,{id:"столбчатая-диаграмма",children:"Столбчатая диаграмма"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{live:!0,children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"render(() => {\n    const cartesianGrid = {\n        vertical: false,\n        horizontal: true,\n        strokeDasharray: 0,\n        stroke: 'var(--color-light-neutral-400)',\n        fill: 'var(--color-light-base-bg-primary)',\n    };\n    const legend = {\n        marginTop: 10,\n    };\n    const tooltip = {\n        separator: ' ',\n        offset: 20,\n        filterNull: true,\n        cursor: {\n            stroke: 'var(--color-light-neutral-400)',\n            strokeWidth: 1,\n        },\n        isAnimationActive: true,\n        animationBegin: 0,\n        animationDuration: 500,\n        animationEasing: 'ease',\n        arrow: true,\n    };\n    const brush = {\n        dataKey: 'label',\n        travellerWidth: 20,\n        height: 20,\n        alwaysShowText: true,\n        stroke: 'var(--color-static-status-blue)',\n    };\n\n    const chartBar = (includeValue) => {\n        const labels = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь']\n        if (includeValue) {\n            return labels.map((label, idx) => ({\n            label: label,\n            value:  Math.floor(Math.random() * 250) + 10\n            }));\n        } else {\n            return labels;\n        }\n    };\n\n    const barChartFirst = {\n        zIndex: 1,\n        chart: 'bar',\n        properties: {\n            name: 'расход',\n            dataKey: 'uv',\n            formatter: (decimal) => `${decimal * 1000}`,\n            fill: 'var(--color-static-graphic-persimmon)',\n        },\n        data: chartBar(true),\n    };\n    const barChartSecond = {\n        zIndex: 10,\n        chart: 'bar',\n        properties: {\n            name: 'приход',\n            dataKey: 'pv',\n            formatter: (decimal) => `${decimal * 1000}`,\n            fill: 'var(--color-static-graphic-green-jungle)',\n        },\n        data: chartBar(true),\n    };\n    const lineChart = {\n        zIndex: 50,\n        chart: 'line',\n        icon: 'circleLine',\n        properties: {\n            name: 'остаток',\n            dataKey: 'cnt',\n            stroke: 'var(--color-static-status-blue)',\n            dot: true,\n            dotSettings: {\n                scale: 1.5,\n                initScale: 1,\n                width: 18,\n                height: 18,\n            },\n            formatter: (decimal) => `${decimal * 1000}`,\n            type: 'monotone',\n            strokeWidth: 2,\n        },\n        data: chartBar(true),\n    };\n    const composeChart = {\n        initMargin: {\n            left: 20,\n        },\n        barSize: 10,\n    };\n    const xAxis = {\n        tickLine: false,\n        axisLine: false,\n        interval: 'preserveStartEnd',\n        tickMargin: 10,\n        dataKey: 'label',\n    };\n    const yAxis = {\n        axisLine: false,\n        type: 'number',\n        tickCount: 6,\n        tickLine: false,\n        tickMargin: 0,\n        tickFormatter: (decimal) => `${decimal}\\xa0тыс.`,\n    };\n\n    return (\n        <div style={{ display: 'flex' }}>\n            <div style={{ width: '600px', height: '400px' }}>\n                <Chart\n                    id='bar-chart'\n                    composeChart={composeChart}\n                    cartesianGrid={cartesianGrid}\n                    xAxis={xAxis}\n                    yAxis={yAxis}\n                    tooltip={tooltip}\n                    legend={legend}\n                    brush={brush}\n                    labels={chartBar(false)}\n                    series={[barChartFirst, barChartSecond, lineChart]}\n                />\n            </div>\n        </div>\n    );\n});\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"гистограмма",children:"Гистограмма"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{live:!0,children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"render(() => {\n    const composeChart = {\n        barCategoryGap: '5%',\n    };\n    const xAxis = {\n        axisLine: false,\n        type: 'category',\n        interval: 'preserveStartEnd',\n        tickLine: false,\n        tickMargin: 10,\n        dataKey: 'label',\n    };\n    const yAxis = {\n        hide: true,\n    };\n    const labelsBarChart = [\n        'Long label',\n        'Label1',\n        'Label2',\n        'Label3',\n        'Label4',\n        'Label5',\n        'Label6',\n        'Label7',\n    ];\n    const barChart = {\n        chart: 'bar',\n        radius: { top: 10, bottom: 10, } || 0,\n        labelList: {\n            offset: 10,\n        },\n        properties: {\n            name: 'приход',\n            dataKey: 'cm',\n            formatter: (decimal) => `${decimal * 1000}`,\n            fill: 'var(--color-static-graphic-green-jungle)',\n        },\n        data: [\n            {\n                label: 'Long label',\n                value: 5000,\n            },\n            {\n                label: 'Label1',\n                value: 650,\n            },\n            {\n                label: 'Label2',\n                value: 3522,\n            },\n            {\n                label: 'Label3',\n                value: 0,\n            },\n            {\n                label: 'Label4',\n                value: 2000,\n            },\n            {\n                label: 'Label5',\n                value: 1043,\n            },\n            {\n                label: 'Label6',\n                value: 600,\n            },\n            {\n                label: 'Label7',\n                value: 1,\n            },\n        ],\n    };\n        \n    return (\n        <div style={{ display: 'flex' }}>\n           <div style={{ width: '600px', height: '400px' }}>\n                    <Chart\n                        id='bar-chart'\n                        composeChart={composeChart}\n                        xAxis={xAxis}\n                        yAxis={yAxis}\n                        labels={labelsBarChart}\n                        series={[barChart]}\n                    />\n            </div>\n        </div>\n    );\n});\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"линейный-график",children:"Линейный график"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{live:!0,children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"render(() => {\n    const formatXAxis = (time) => format(time, 'dd LLL');\n    const cartesianGrid = {\n        stroke: 'var(--color-light-neutral-400)',\n        fill: 'var(--color-light-base-bg-primary)',\n    };\n    const composeChart = {\n        barSize: 24,\n    };\n    const xAxis = {\n        axisLine: false,\n        type: 'category',\n        interval: 'preserveStartEnd',\n        minTickGap: 20,\n        tickLine: false,\n        dataKey: 'label',\n        tickFormatter: formatXAxis,\n        tickType: 'point',\n    };\n    const yAxis = {\n        axisLine: false,\n        type: 'number',\n        tickCount: 6,\n        interval: 'preserveStartEnd',\n        tickLine: false,\n        tickSize: 6,\n    };\n    const legend = {\n        verticalAlign: 'top',\n        marginTop: 15,\n        iconHeight: 20,\n    };\n    const tooltip = {\n        separator: ' ',\n        offset: 20,\n        filterNull: true,\n        cursor: {\n            stroke: 'var(--color-light-neutral-400)',\n            strokeWidth: 1,\n        },\n        isAnimationActive: true,\n        animationBegin: 0,\n        animationDuration: 500,\n        animationEasing: 'ease',\n        arrow: true,\n        labelFormatter: formatXAxis,\n    };\n    const brush = {\n        dataKey: 'label',\n        travellerWidth: 20,\n        brushMargin: 10,\n        height: 20,\n        stroke: 'var(--color-static-status-blue)',\n        alwaysShowText: true,\n        tickFormatter: formatXAxis,\n    };\n\n    const chartData = (num, includeValue) => {\n        const labels = Array(20).fill(null).map((_, idx) => {\n            const date = new Date('2020-12-18');\n            date.setDate(date.getDate() + idx);\n            return date.getTime();\n        });\n\n        if (includeValue) {\n            return labels.map((label, idx) => ({\n            label: idx === 0 ? label : labels[idx - 1],\n            value: idx === 0 ? 15 : Math.floor(Math.random() * num) + 10\n            }));\n        } else {\n            return labels;\n        }\n    };\n\n    const lineChart = {\n        chart: 'line',\n        icon: 'strokeCircle',\n        properties: {\n            name: 'текущий период',\n            dataKey: 'b',\n            stroke: 'var(--color-static-status-blue)',\n            dot: true,\n            dotSettings: {\n                scale: 1.5,\n                initScale: 0,\n                width: 18,\n                height: 18,\n            },\n            inheritStroke: true,\n            type: 'monotone',\n            strokeWidth: 2,\n            strokeDasharray: '10 10',\n        },\n        data: chartData(30, true)\n    };\n    const areaChart = {\n        chart: 'area',\n        icon: 'filledCircle',\n        offset: 0.1,\n        gradient: {\n            gid: 'ar-grad',\n            points: [\n                {\n                    offset: 0,\n                    stopColor: 'rgba(0, 112, 224, 0.2)',\n                    stopOpacity: 1,\n                },\n                {\n                    offset: 95,\n                    stopColor: 'rgba(0, 128, 255, 0)',\n                    stopOpacity: 1,\n                },\n            ],\n        },\n        properties: {\n            name: 'предыдущий период',\n            dataKey: 'a',\n            type: 'monotone',\n            stroke: 'var(--color-static-status-blue)',\n            dotSettings: {\n                scale: 1.5,\n                initScale: 0,\n                width: 18,\n                height: 18,\n            },\n            dot: true,\n            strokeWidth: 2,\n        },\n        data: chartData(50, true)\n    };\n    \n    return (\n        <div style={{ display: 'flex' }}>\n            <div style={{ width: '600px', height: '400px' }}>\n                    <Chart\n                        id={'line-chart'}\n                        composeChart={composeChart}\n                        cartesianGrid={cartesianGrid}\n                        xAxis={xAxis}\n                        yAxis={yAxis}\n                        tooltip={tooltip}\n                        legend={legend}\n                        brush={brush}\n                        labels={chartData(30, false)}\n                        series={[lineChart, areaChart]}\n                    />\n            </div>\n        </div>\n    );\n});\n"})})]})}var description=function(props={}){let{wrapper:MDXLayout}=Object.assign({},(0,mdx_react_shim.useMDXComponents)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(_createMdxContent,props)})):_createMdxContent(props)},src=__webpack_require__("./packages/chart/src/index.ts");function development_createMdxContent(props){let _components=Object.assign({h2:"h2",pre:"pre",code:"code",p:"p",ul:"ul",li:"li"},(0,mdx_react_shim.useMDXComponents)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(_components.h2,{id:"подключение",children:"Подключение"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"import { Chart } from '@alfalab/core-components/chart';\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"основа-компонента",children:"Основа компонента"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"Компонент для построения графиков основан на библиотеке основаной на D3 с лицензией - MIT https://recharts.org.\nВ данный момент компонент поддерживает три типа графиков: bar, line, area."}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"данные-для-отрисовки",children:"Данные для отрисовки"}),"\n",(0,jsx_runtime.jsxs)(_components.ul,{children:["\n",(0,jsx_runtime.jsx)(_components.li,{children:"Хoptions.labels - массив меток string | number"}),"\n",(0,jsx_runtime.jsx)(_components.li,{children:"options.series - массив объектов с параметрами грaфиков с обязательным полем data"}),"\n",(0,jsx_runtime.jsx)(_components.li,{children:"options.series.data - массив данных, который должен состоять из меток label: string | number и значений value: number"}),"\n"]}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"свойства",children:"Свойства"}),"\n",(0,jsx_runtime.jsx)(dist.$4,{of:src.Chart}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"пример-объекта-с-дефолтными-значениями",children:"Пример объекта с дефолтными значениями"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"options: {\n    /**\n     * Oбязательное уникальное поле, такие елменты как `legend`\n     * `linearGradient` используют его\n     */\n    id,\n\n    /**\n     * Компонент контейнера, позволяющий адаптировать диаграммы к размеру\n     * родительского контейнера\n     */\n    responsiveContainer?: {\n        /**\n         * Значение для debounce функции при ресайзе\n         */\n        debounce?: 0,\n    },\n\n    /*\n     * Диграмма для построения графиков с разными типами\n     */\n    composeChart: {\n        /*\n        * Отступы графика на момент инициализации компонента\n        */\n        initMargin?: {\n            top?: 5,\n            right?: 5,\n            bottom?: 5,\n            left?: 5,\n        },\n\n        /*\n        * Максимальная ширина графиков типа bar\n        */\n        maxBarSize?,\n\n        /*\n        * Разрыв между двумя категориями столбцов,\n        который может быть процентным или фиксированным значением\n        */\n        barCategoryGap?: '10%',\n\n        /*\n        * Разрыв между двумя столбцами одной категории\n        */\n        barGap?: 4,\n    },\n\n    /**\n     * Отображение линий осей графика\n     */\n    cartesianGrid?: {\n        /**\n         * Отображение горизонтальной сетки\n         */\n        horizontal?: true,\n\n        /**\n         * Отображение вертикальной сетки\n         */\n        vertical?: true,\n\n        /**\n         * Штрихи для осей\n         */\n        strokeDasharray?,\n\n        /**\n         * Цвет разметки сетки\n         */\n        stroke?,\n\n        /**\n         * Цвет заливки графика\n         */\n        fill?,\n    },\n\n    /**\n     * Настройки оси Х\n     */\n    xAxis: {\n        /**\n         * Скрыть ось\n         */\n        hide?: false,\n\n        /**\n         * Отображение линии оси.\n         */\n        axisLine?: true,\n\n        /**\n         * Тип оси.\n         */\n        type: 'category',\n\n        /**\n         * Разрешить значениям оси быть десятичными или нет.\n         */\n        allowDecimals?: true,\n\n        /**\n         * Разрешить или нет на оси дублировать категории,\n         * если \"type\" оси - \"category\".\n         */\n        allowDuplicatedCategory?: true,\n\n        /**\n         * Угол наклона значений оси.\n         */\n        angle?: 0,\n\n        /**\n         * Количество делений оси. Не используется,\n         * если \"тип\" - \"категория\".\n         */\n        tickCount?: 5,\n\n        /**\n         * Интревал линий деления оси\n         */\n        interval?: 'preserveEnd',\n\n        /**\n         * Минимальный зазор между двумя соседними делениями оси.\n         */\n        minTickGap?: 5,\n\n        /**\n         * Отображение линий деления оси\n         */\n        tickLine?: true,\n\n        /**\n         * Размер линий деления оси\n         */\n        tickSize?: 6,\n\n        /**\n         * Если установлено значение true,\n         * галочки переворачиваются вокруг оси,\n         * отображая метки внутри диаграммы, а не снаружи.\n         */\n\n        mirror?: false,\n\n        /**\n         * Отображение горизонтальной сетки\n         */\n        reversed?: false,\n\n        /**\n         * Реверсировать ось или нет\n         */\n        tickMargin?: 0,\n\n        /**\n         * Функция форматирования значения деления оси.\n         */\n        tickFormatter?,\n\n        /**\n         * Ключ данных, отображаемых на оси.\n         */\n        dataKey,\n\n        /**\n         * Ориентация оси\n         */\n        orientation?: 'bottom',\n\n        /**\n         * Тип деления оси\n         */\n        tickType?,\n    },\n\n    /**\n     * Настройки оси Y\n     */\n    yAxis: {\n        /**\n         * Скрыть ось\n         */\n        hide?: false,\n\n        /**\n         * Отображение линии оси.\n         */\n        axisLine?: true,\n\n        /**\n         * Тип оси.\n         */\n        type: 'number',\n\n        /**\n         * Разрешить значениям оси быть десятичными или нет.\n         */\n        allowDecimals?: true,\n\n        /**\n         * Разрешить или нет на оси дублировать категории,\n         * если \"type\" оси - \"category\".\n         */\n        allowDuplicatedCategory?: true,\n\n        /**\n         * Угол наклона значений оси.\n         */\n        angle?: 0,\n\n        /**\n         * Количество делений оси.\n         * Не используется, если \"тип\" - \"категория\".\n         */\n        tickCount?: 5,\n\n        /**\n         * Интревал линий деления оси\n         */\n        interval?: 'preserveEnd',\n\n        /**\n         * Минимальный зазор между двумя соседними делениями оси.\n         */\n        minTickGap?: 5,\n\n        /**\n         * Отображение линий деления оси\n         */\n        tickLine?: true,\n\n        /**\n         * Размер линий деления оси\n         */\n        tickSize?: 6,\n\n        /**\n         * Если установлено значение true,\n         * галочки переворачиваются вокруг оси,\n         * отображая метки внутри диаграммы, а не снаружи.\n         */\n        mirror?: false,\n\n        /**\n         * Отображение горизонтальной сетки\n         */\n        reversed?: false,\n\n        /**\n         * Реверсировать ось или нет\n         */\n        tickMargin?: 0,\n\n        /**\n         * Функция форматирования значения деления оси.\n         */\n        tickFormatter?,\n\n        /**\n         * Ключ данных, отображаемых на оси.\n         */\n        orientation?: 'bottom',\n    },\n\n    /**\n     * Всплывающаяся подсказка\n     */\n    tooltip?: {\n        /**\n         * Разделитель между именем и значением\n         */\n        separator?,\n\n        /**\n         * Размер смещения между положением всплывающей\n         * подсказки и активной позицией\n         */\n        offset?: 10,\n\n        /**\n         * Когда элемент полезной нагрузки имеет значение null или undefined,\n         * этот элемент не отображается\n         */\n        filterNull: true,\n\n        /**\n         * Если установлено false, курсор не будет отображаться, когда всплывающая подсказка активна.\n         * Если установлен объект, опция - это конфигурация курсора.\n         * Если установлен элемент React, опция является настраиваемым элементом реакции курсора рисования.\n         */\n        cursor?: {\n            /**\n             * Цвет линии\n             */\n            stroke: cursorStroke,\n\n            /**\n             * Ширина линии\n             */\n            strokeWidth: cursorStrokeWidth,\n        },\n\n        /**\n         * Если это поле установлено, положение всплывающей подсказки\n         * будет фиксированным и больше не будет перемещаться.\n         */\n        position?: {\n            x,\n            y,\n        };\n\n        /**\n         * Если установлено false, анимация всплывающей подсказки будет отключена.\n         */\n        isAnimationActive?: true,\n\n        /**\n         * Указывает, когда должна начинаться анимация,\n         * единица измерения этого параметра - мс.\n         */\n        animationBegin?: 0,\n\n        /**\n         * Определяет продолжительность анимации,\n         * единица измерения этого параметра - мс.\n         */\n        animationDuration?: 1500,\n\n        /**\n         * Тип функции плавности\n         */\n        animationEasing?: 'ease',\n\n        /**\n         * Отображение стрелки тултипа\n         */\n        arrow?: false,\n    };\n\n    /**\n     * Компонент маштабирования графика\n     */\n    brush?: {\n        /**\n         * Ключ данных\n         */\n        dataKey,\n\n        /**\n         * Ширина ползунков\n         */\n        travellerWidth?: 5,\n\n        /**\n         * Начальный индекс интервала показа\n         */\n        startIndex?,\n\n        /**\n         * Конечный индекс интервала показа\n         */\n        endIndex?,\n\n        /**\n         * Отступ\n         */\n        brushMargin?: 0,\n\n        /**\n         * Высота\n         */\n        height?: 40,\n\n        /**\n         * Форматирование значений\n         */\n        tickFormatter?,\n\n        /**\n         * Всегда показывать значение текущего интервала\n         */\n        alwaysShowText?: false,\n\n        /**\n         * Цвет\n         */\n        stroke?: brushStroke,\n    }\n\n    /**\n     * Компонент подписи графиков\n     */\n    legend?: {\n        /**\n         * Выравнивание элементов легенды в вертикальном направлении\n         */\n        verticalAlign?: 'middle',\n\n        /**\n         * Функция форматирования каждого текста в легенде\n         */\n        formatter?,\n\n        /**\n         * Выравнивание элементов легенды в горизонтальном направлении\n         */\n        align?: 'center',\n\n        /**\n         * Вертикальный отступ\n         */\n        marginTop?: 0,\n\n        /**\n         * Высота иконок\n         */\n        iconHeight?: 16,\n    },\n\n    /**\n     * Mассив меток\n     */\n    labels: Array<string | number>,\n\n    /**\n     * Mассив объектов с параметрами грaфиков с обязательным полем\n     */\n    series: [\n        /*\n         * Пример графика типа bar\n         */\n        {\n            /*\n             * Скрыть график\n             */\n            hide?: false,\n\n            /*\n             * Скрыть график в легенде\n             */\n            hideLegend?: false,\n\n            /*\n             * Скрыть график в тултипe\n             */\n            hideTooltip?: false,\n\n            /*\n             * Z-index графика\n             */\n            zIndex,\n\n            /*\n             * Тип графика\n             */\n            chart: 'bar',\n\n            /**\n             * Радиус закругления углов графика типа bar\n             */\n            radius?: {\n                /**\n                 * Верхний pадиус закругления углов графика типа bar\n                 */\n                top?,\n\n                /**\n                 * Нижний радиус закругления углов графика типа bar\n                 */\n                bottom?,\n            },\n\n            /*\n             * Тип иконки для графика\n             */\n            icon,\n\n            /*\n             * Параметры графика\n             */\n            properties: {\n\n                /*\n                * Название графика (отображается в легендах и тултипе)\n                */\n                name,\n\n                /*\n                * Ключ данных\n                */\n                dataKey,\n\n                /*\n                * Форматирование значения графика для тултипа\n                */\n                formatter?,\n\n                /*\n                * Цвет заливки графика\n                */\n                fill,\n\n                /*\n                * Цвет бордера графика\n                */\n                strokeWidth?,\n            },\n\n            /**\n             * Данные для построения графика\n             */\n            data: [\n                /**\n                 * Метка\n                 */\n                label,\n\n                /**\n                 * Значение\n                 */\n                value\n            ];\n        },\n\n        /*\n         * Пример графика типа line\n         */\n        {\n            /*\n             * Скрыть график\n             */\n            hide?: false,\n\n            /*\n             * Скрыть график в легенде\n             */\n            hideLegend?: false,\n\n            /*\n             * Скрыть график в тултипe\n             */\n            hideTooltip?: false,\n\n            /*\n             * Z-index графика\n             */\n            zIndex,\n\n            /*\n             * Тип графика\n             */\n            chart: 'line',\n\n            /*\n             * Тип иконки для графика\n             */\n            icon,\n\n            /*\n             * Параметры графика\n             */\n            properties: {\n\n                /*\n                 * Название графика (отображается в легендах и тултипе)\n                 */\n                name,\n\n                /*\n                 * Ключ данных\n                 */\n                dataKey,\n\n                /*\n                 * Цвет линии графика\n                 */\n                stroke?: '#3182bd',\n\n                /*\n                 * Отображение точек на графике\n                 */\n                dot?,\n\n                /*\n                 * Параметры для точек грфика (если dot: true)\n                 */\n                dotSettings: [{\n\n                    /*\n                     * Значение media query\n                     */\n                    media,\n\n                    /*\n                     * Значение маштаба при ховере\n                     */\n                    scale,\n\n                    /*\n                     * Начальный значения маштаба\n                     */\n                    initScale,\n\n                    /*\n                     * Ширина точки\n                     */\n                    width,\n\n                    /*\n                     * Высота точки\n                     */\n                    height,\n                }],\n\n                /*\n                 * Наследование цвета\n                 */\n                inheritStroke?: false,\n\n                /*\n                 * Форматирование значения графика для тултипа\n                 */\n                formatter?,\n\n                /*\n                 * Тип линии\n                 */\n                type? 'linear',\n\n                /*\n                 * Толщина линии\n                 */\n                strokeWidth?: 1,\n\n                /*\n                 * Прерывистость линии\n                 */\n                strokeDasharray?,\n            },\n\n            /*\n             * \xa0Массив данных для отрисовки\n             */\n            data: [\n\n                /**\n                 * Метка\n                 */\n                label,\n\n                /**\n                 * Значение\n                 */\n                value,\n            ],\n        },\n\n        /*\n         * Пример графика типа area\n         */\n        {\n            /*\n             * Скрыть график\n             */\n            hide?: false,\n\n            /*\n             * Скрыть график в легенде\n             */\n            hideLegend?: false,\n\n            /*\n             * Скрыть график в тултипe\n             */\n            hideTooltip?: false,\n\n            /*\n             * Z-index графика\n             */\n            zIndex,\n\n            /*\n             * Тип графика\n             */\n            chart: 'ara',\n\n            /*\n             * Тип иконки для графика\n             */\n            icon,\n\n            /*\n             * Оффсет для градиента (только для типа area)\n             */\n            offset,\n\n            /**\n             * Параметры градиента\n             */\n            gradient: {\n\n                /**\n                 * Индефикатор градиента\n                 */\n                gid,\n\n                /**\n                 * Параметра точек для градиента\n                 */\n                points: [\n\n                    /**\n                     * Отступ\n                     */\n                    offset: number,\n\n                    /**\n                     * Цвет\n                     */\n                    stopColor: string,\n\n                    /**\n                     * Прозрачность\n                     */\n                    stopOpacity: number,\n                ];\n            };\n\n            /*\n             * Параметры графика\n             */\n            properties: {\n\n                /*\n                 * Название графика (отображается в легендах и тултипе)\n                 */\n                name,\n\n                /*\n                 * Ключ данных\n                 */\n                dataKey,\n\n                /*\n                 * Цвет линии графика\n                 */\n                stroke?: '#3182bd',\n\n                /*\n                 * Отображение точек на графике\n                 */\n                dot?,\n\n                /*\n                 * Параметры для точек грфика (если dot: true)\n                 */\n                dotSettings: [{\n\n                    /*\n                     * Значение media query\n                     */\n                    media,\n\n                    /*\n                     * Значение маштаба при ховере\n                     */\n                    scale,\n\n                    /*\n                     * Начальный значения маштаба\n                     */\n                    initScale,\n\n                    /*\n                     * Ширина точки\n                     */\n                    width,\n\n                    /*\n                     * Высота точки\n                     */\n                    height,\n                }],\n\n                /*\n                 * Наследование цвета\n                 */\n                inheritStroke?: false,\n\n                /*\n                 * Форматирование значения графика для тултипа\n                 */\n                formatter?,\n\n                /*\n                 * Тип линии\n                 */\n                type? 'linear',\n\n                /*\n                 * Толщина линии\n                 */\n                strokeWidth?: 1,\n\n                /*\n                 * Прерывистость линии\n                 */\n                strokeDasharray?,\n            },\n\n            /**\n             * Данные для построения графика\n             */\n            data: [\n\n                /**\n                 * Метка\n                 */\n                label,\n\n                /**\n                 * Значение\n                 */\n                value,\n            ]\n        },\n    ],\n};\n"})})]})}var development=function(props={}){let{wrapper:MDXLayout}=Object.assign({},(0,mdx_react_shim.useMDXComponents)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(development_createMdxContent,props)})):development_createMdxContent(props)};function Component_docs_createMdxContent(props){return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{of:Component_stories}),"\n",(0,jsx_runtime.jsx)(blocks.yt,{name:"Chart",children:"Используется для построения графиков."}),"\n",(0,jsx_runtime.jsx)(blocks.mQ,{description:(0,jsx_runtime.jsx)(description,{}),changelog:(0,jsx_runtime.jsx)(dist.UG,{children:"# Change Log\n\n## 3.4.2\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@4.10.2\n\n## 3.4.1\n\n### Patch Changes\n\n<sup><time>13.09.2024</time></sup>\n\n### [#1358](https://github.com/core-ds/core-components/pull/1358)\n\n-   Обновлены наименования переменных скругления\n\n<sup><time>13.09.2024</time></sup>\n\n### [#1370](https://github.com/core-ds/core-components/pull/1370)\n\n-   Заменили числовые значения на переменные отступов\n\n-   Обновлены зависимости\n    -   typography@4.10.1\n\n## 3.4.0\n\n### Minor Changes\n\n<sup><time>10.09.2024</time></sup>\n\n### [#1347](https://github.com/core-ds/core-components/pull/1347)\n\n-   Добавлена сборка moderncssm (ES2020, esm, сырые css-модули, отключен импорт базовых токенов)\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@4.10.0\n\n## 3.3.3\n\n### Patch Changes\n\n<sup><time>04.09.2024</time></sup>\n\n### [#1353](https://github.com/core-ds/core-components/pull/1353)\n\n-   Обновлены наименования переменных отступов\n\n-   Обновлены зависимости\n    -   typography@4.9.0\n\n## 3.3.2\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@4.8.0\n\n## 3.3.1\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@4.7.0\n\n## 3.3.0\n\n### Minor Changes\n\n<sup><time>27.06.2024</time></sup>\n\n### [#1258](https://github.com/core-ds/core-components/pull/1258)\n\n-   Заменили устаревшие цветовые токены на актуальные\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@4.6.0\n\n## 3.2.8\n\n### Patch Changes\n\n<sup><time>14.06.2024</time></sup>\n\n### [#1235](https://github.com/core-ds/core-components/pull/1235)\n\n-   Добавлен параметр displayName для корректного отображения компонентов в React Devtools\n\n## 3.2.7\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@4.5.1\n\n## 3.2.6\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@4.5.0\n\n## 3.2.5\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@4.4.0\n\n## 3.2.4\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@4.3.0\n\n## 3.2.3\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@4.2.1\n\n## 3.2.2\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@4.2.0\n\n## 3.2.1\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@4.1.0\n\n## 3.2.0\n\n### Minor Changes\n\n### [#713](https://github.com/core-ds/core-components/pull/713)\n\n-   Теперь каждый пакет публикуется с исходниками\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@4.0.0\n\n## 3.1.12\n\n### Patch Changes\n\n### [#766](https://github.com/core-ds/core-components/pull/766)\n\n-   Удален скрипт отправки статистики (send-stats)\n\n-   Обновлены зависимости\n    -   typography@3.2.2\n\n## 3.1.11\n\n### Patch Changes\n\n### [#632](https://github.com/core-ds/core-components/pull/632)\n\n-   Исправлено название свойства strokeDasharray (strokeDashArray -> strokeDasharray)\n\n## 3.1.10\n\n### Patch Changes\n\n### [#588](https://github.com/core-ds/core-components/pull/588)\n\n-   Добавлен \\_\\_esModule в cjs экспорт\n\n-   Обновлены зависимости\n    -   typography@3.2.1\n\n## 3.1.9\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@3.2.0\n\n## 3.1.8\n\n### Patch Changes\n\n### [#526](https://github.com/core-ds/core-components/pull/526)\n\n-   В зависимости добавлена библиотека tslib\n\n-   Обновлены зависимости\n    -   typography@3.1.1\n\n## 3.1.7\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@3.1.0\n\n## 3.1.6\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@3.0.8\n\n## 3.1.5\n\n### Patch Changes\n\n### [#418](https://github.com/core-ds/core-components/pull/418)\n\n-   Исправлена проблема с default-импортом в cjs форматах\n\n-   Обновлены зависимости\n    -   typography@3.0.7\n\n## 3.1.4\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@3.0.6\n\n## 3.1.3\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@3.0.5\n\n## 3.1.2\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@3.0.4\n\n## 3.1.1\n\n### Patch Changes\n\n-   Обновлены зависимости\n    -   typography@3.0.3\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\n\n# [3.1.0](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@3.0.1...@alfalab/core-components-chart@3.1.0) (2022-09-01)\n\n### Features\n\n-   testing-library versions update ([#216](https://github.com/core-ds/core-components/issues/216)) ([33b6225](https://github.com/core-ds/core-components/commit/33b62259a1332f535f367502590ea37e7ad051d4))\n\n## [3.0.1](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@3.0.0...@alfalab/core-components-chart@3.0.1) (2022-08-19)\n\n**Note:** Version bump only for package @alfalab/core-components-chart\n\n# [3.0.0](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@2.2.1...@alfalab/core-components-chart@3.0.0) (2022-08-17)\n\n### Features\n\n-   removed dist directory in published packages ([#200](https://github.com/core-ds/core-components/issues/200)) ([8af8fee](https://github.com/core-ds/core-components/commit/8af8fee53ca0bd19fa2d1ca1422e0df23096e2c8))\n\n### BREAKING CHANGES\n\n-   Изменена директория расположения индексных файлов в опубликованных пакетах (удалена\n    директория dist)\n\nCo-authored-by: Vladimir Gevak <VGevak@alfabank.ru>\n\n## [2.2.1](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@2.2.0...@alfalab/core-components-chart@2.2.1) (2022-08-17)\n\n### Bug Fixes\n\n-   returned dist directory ([#199](https://github.com/core-ds/core-components/issues/199)) ([fabc15e](https://github.com/core-ds/core-components/commit/fabc15effa1457ca65ec7238206f1b1fc2a2a613))\n\n# [2.2.0](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@2.1.3...@alfalab/core-components-chart@2.2.0) (2022-08-04)\n\n### Features\n\n-   react 18 support ([#159](https://github.com/core-ds/core-components/issues/159)) ([2e6693c](https://github.com/core-ds/core-components/commit/2e6693c62f534e333aadb7d3fff4ffd78ac84c63))\n\n## [2.1.3](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@2.1.2...@alfalab/core-components-chart@2.1.3) (2022-07-18)\n\n**Note:** Version bump only for package @alfalab/core-components-chart\n\n## [2.1.2](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@2.1.1...@alfalab/core-components-chart@2.1.2) (2022-07-15)\n\n### Bug Fixes\n\n-   bump packages version ([#153](https://github.com/core-ds/core-components/issues/153)) ([fd3e082](https://github.com/core-ds/core-components/commit/fd3e08205672129cdce04e1000c673f2cd9c10da))\n\n## [2.1.1](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@2.1.0...@alfalab/core-components-chart@2.1.1) (2022-07-14)\n\n**Note:** Version bump only for package @alfalab/core-components-chart\n\n# [2.1.0](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@2.0.5...@alfalab/core-components-chart@2.1.0) (2022-06-28)\n\n### Features\n\n-   circumflexus retrieval ([#57](https://github.com/core-ds/core-components/issues/57)) ([3820da8](https://github.com/core-ds/core-components/commit/3820da818bcdcbee6904c648b3e29c3c828fe202))\n\n## [2.0.2](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@2.0.1...@alfalab/core-components-chart@2.0.2) (2022-03-30)\n\n**Note:** Version bump only for package @alfalab/core-components-chart\n\n## [2.0.1](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@2.0.0...@alfalab/core-components-chart@2.0.1) (2022-03-03)\n\n**Note:** Version bump only for package @alfalab/core-components-chart\n\n# [2.0.0](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@1.2.2...@alfalab/core-components-chart@2.0.0) (2022-03-01)\n\n### Features\n\n-   Исправить импорты в сторях. ([#998](https://github.com/core-ds/core-components/issues/998)) ([e6a654a](https://github.com/core-ds/core-components/commit/e6a654a0599451c7d149484cb61d8067eed083b7))\n\n-   refactor/calendar-range (#984) ([714f615](https://github.com/core-ds/core-components/commit/714f61590586bafe1060e652943e95c133ed002a)), closes [#984](https://github.com/core-ds/core-components/issues/984)\n\n### BREAKING CHANGES\n\n-   Большое обновление CalendarRange\n\n-   feat(date-input): add some improvements\n\n-   feat(date-input): some updates\n\n-   feat(date-input): validation\n\n-   feat(calendar): change period selection logic\n\n-   fix(calendar): range styles\n\n-   fix(calendar): fix styles, add rangeComplete flag\n\n-   refactor(calendar-range): temporary\n\n-   fix(calendar-range): fix hook\n\n-   fix(calendar-range): fix period\n\n-   fix(calendar-range): fix tests, fix max date\n\n-   fix: update exports\n\n-   feat(calendar): allow empty values for PeriodSlider, update today\n\n-   fix(calendar-range): hide error icon\n\n-   chore(calendar-range): demo\n\n-   feat(calendar): use IconButton\n\n-   feat(calendar-range): add onChange, update demo\n\n-   fix(calendar-range): update width\n\n-   test(calendar-range): update snapshot\n\n-   fix: import date-fns separately\n\n-   fix(calendar-range): fix rest props\n\nCo-authored-by: dmitrsavk <dmitrsavk@yandex.ru>\n\n## [1.2.2](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@1.2.1...@alfalab/core-components-chart@1.2.2) (2022-01-17)\n\n**Note:** Version bump only for package @alfalab/core-components-chart\n\n## [1.2.1](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@1.2.0...@alfalab/core-components-chart@1.2.1) (2021-10-19)\n\n### Bug Fixes\n\n-   **chart:** fix deps, export types ([b46450a](https://github.com/core-ds/core-components/commit/b46450ae954b10f0138c393482fe1271b001f085))\n\n# [1.2.0](https://github.com/core-ds/core-components/compare/@alfalab/core-components-chart@1.1.0...@alfalab/core-components-chart@1.2.0) (2021-10-11)\n\n### Features\n\n-   **chart:** added border radius to bar charts ([cfd0ad2](https://github.com/core-ds/core-components/commit/cfd0ad2c23a2b80de0bc5dfae7b65a14263e37e9))\n-   **chart:** added chart component ([1119943](https://github.com/core-ds/core-components/commit/11199435e9ab53ae159707e94714a34952ad56c1))\n-   **chart:** added description ([8275346](https://github.com/core-ds/core-components/commit/827534640af0c0b06c1105755e9435d43cae8acd))\n-   **chart:** added props for legend icons height ([5c9b321](https://github.com/core-ds/core-components/commit/5c9b32154e6f39cddd3ac9668830959adba64648))\n-   **chart:** bar radius ([e39251a](https://github.com/core-ds/core-components/commit/e39251a37a52b6f434932439da0b86a03a26d901))\n-   **chart:** beautifyed ([67cc96e](https://github.com/core-ds/core-components/commit/67cc96e6afc020c3af5491d3d7ba0b89f50dbaf3))\n-   **chart:** edited doc ([8728271](https://github.com/core-ds/core-components/commit/8728271dc7f733c9b14a27c83a7136c22ef39ed6))\n-   **chart:** fix doc ([9d1e888](https://github.com/core-ds/core-components/commit/9d1e8889615f0701a43a9fbceca867557002ef31))\n-   **chart:** fixed after pull master ) ([4c7d241](https://github.com/core-ds/core-components/commit/4c7d241da264cde81e50573f96a2f035c31306e1))\n-   **chart:** fixed build error ([2efdd22](https://github.com/core-ds/core-components/commit/2efdd22f27e8229b2ad4cb7d355f61b218ea1bc1))\n-   **chart:** fixed comments ([a611b9c](https://github.com/core-ds/core-components/commit/a611b9c1c9bab1d5a15c2021bff270e9bbf5a934))\n-   **chart:** fixed comments ([7ad1caf](https://github.com/core-ds/core-components/commit/7ad1caf5be9f2da6a218b2c97cc7d96efb4d286d))\n-   **chart:** fixed comments ([555acb6](https://github.com/core-ds/core-components/commit/555acb699549c52f85d0dd58009ab1692344eb44))\n-   **chart:** fixed comments ([379e53d](https://github.com/core-ds/core-components/commit/379e53ddf8c857424600d5fc49b41c03f5ac11ea))\n-   **chart:** more description ([9a4c076](https://github.com/core-ds/core-components/commit/9a4c0762782c2f8ccee0e0c7c660514a10119960))\n-   **chart:** pulled master ([176f7ae](https://github.com/core-ds/core-components/commit/176f7ae6e7cdb2a3e18d2136523e5be6ecdbde3e))\n-   **chart:** resolved conflicts ([7f734ba](https://github.com/core-ds/core-components/commit/7f734bab0347af6e5d56d717d8b5cc0cf192f9f3))\n\n# 1.1.0 (2021-09-30)\n\n### Features\n\n-   **chart:** add component ([#835](https://github.com/core-ds/core-components/issues/835)) ([17d840b](https://github.com/core-ds/core-components/commit/17d840b9f9f64474491d3ec58d3cda53ad07f0ca))\n"}),development:(0,jsx_runtime.jsx)(development,{})})]})}var Component_docs=function(props={}){let{wrapper:MDXLayout}=Object.assign({},(0,mdx_react_shim.useMDXComponents)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(Component_docs_createMdxContent,props)})):Component_docs_createMdxContent(props)}}}]);