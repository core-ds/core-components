import { promises as fs } from 'fs';

// Вспомогательная функция для преобразования kebab-case в camelCase (с маленькой первой буквой)
const toCamelCase = (str) =>
    /*
     * Проверяем, если строка начинается с дефиса, удаляем его
     * Преобразуем первую букву в нижний регистр, если она была в верхнем
     * Далее обрабатываем остальные части
     */
    str
        .replace(/--?(.?)/g, (match) => match.replace(/-/g, '').toUpperCase())
        .replace(/^-/, '')
        .replace(/^[A-Z]/, (c) => c.toLowerCase());

/**
 * Парсит CSS-файл с переменными, которые ссылаются друг на друга,
 * и сохраняет их в виде объекта в TypeScript-файл.
 * @param {string} filePath Путь к CSS-файлу для парсинга.
 * @param {string} outputFilePath Путь, по которому будет сохранён TypeScript-файл.
 * @returns {Promise<void>}
 */
export const parseCssVariables = async (filePath, outputFilePath) => {
    try {
        const data = await fs.readFile(filePath, 'utf8');
        const regex = /^\s*--([\w-]+):\s*var\(--([\w-]+)\)/gm;
        const parsedData = {};
        let match;

        // eslint-disable-next-line no-cond-assign
        while ((match = regex.exec(data)) !== null) {
            // Используем вспомогательную функцию для преобразования
            const key = toCamelCase(match[1]);
            const value = toCamelCase(match[2]);

            parsedData[key] = value;
        }

        // Формируем строку для TS-файла с export default
        const tsContent = `// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
export default {\n${Object.entries(parsedData)
            .map(([key, value]) => `  ${key}: '${value}',`)
            .join('\n')}\n};\n`;

        await fs.writeFile(outputFilePath, tsContent, 'utf8');
        console.log(`Данные успешно сохранены в файл: ${outputFilePath}`);
    } catch (err) {
        console.error('Ошибка в процессе работы:', err);
    }
};
