import { promises as fs } from 'fs';
import path from 'path';

/**
 * Парсит CSS-файл с переменными, которые ссылаются друг на друга или содержат прямые значения,
 * и сохраняет их в виде объекта в TypeScript-файл.
 * Имя выходного файла генерируется автоматически (например, src/dark.css -> src/dark-map.ts).
 * @param {string} filePath Путь к CSS-файлу для парсинга.
 * @returns {Promise<void>}
 */
export const parseCssVariables = async (filePath) => {
    try {
        await fs.access(filePath);

        const fileExtension = path.extname(filePath);
        const fileName = path.basename(filePath, fileExtension);
        const fileDir = path.dirname(filePath);
        const outputFilePath = path.join(fileDir, `${fileName}-map.ts`);

        const data = await fs.readFile(filePath, 'utf8');

        /*
         * Новое регулярное выражение:
         * Оно захватывает имя переменной (--[\w-]+)
         * и её значение (([^;]+)), которое затем обрабатывается.
         */
        const regex = /^\s*(--[\w-]+):\s*([^;]+);?/gm;
        const parsedData = {};
        let match;

        // eslint-disable-next-line no-cond-assign
        while ((match = regex.exec(data)) !== null) {
            const key = match[1];
            let value = match[2].trim();

            // Проверяем, является ли значение ссылкой на другую переменную.
            if (value.startsWith('var(') && value.endsWith(')')) {
                // Извлекаем имя переменной из var(...)
                value = value.substring(4, value.length - 1).trim();
            }

            // Оборачиваем значение в кавычки для TS-файла.
            parsedData[key] = `'${value}'`;
        }

        const tsContent = `// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
export default {\n${Object.entries(parsedData)
            .map(([key, value]) => `  '${key}': ${value},`)
            .join('\n')}\n};\n`;

        await fs.writeFile(outputFilePath, tsContent, 'utf8');
        console.log(`Данные успешно сохранены в файл: ${outputFilePath}`);
    } catch (err) {
        console.error('Ошибка в процессе работы:', err);
    }
};
