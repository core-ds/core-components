@import '../../themes/src/default.css';
@import './vars.css';

.component {
    color: var(--form-control-inverted-color);
}

.inner {
    background-color: var(--form-control-inverted-bg-color);
}

/* Нижняя граница */
.inner:before {
    border-bottom: var(--form-control-inverted-border-bottom);
}

.label {
    color: var(--form-control-inverted-label-color);
}

.hint {
    color: var(--form-control-inverted-hint-color);
}

/* DISABLED STATE */

.disabled {
    background-color: var(--form-control-inverted-disabled-bg-color);
    color: var(--form-control-inverted-disabled-color);
    box-shadow: var(--form-control-inverted-disabled-shadow);
}

.disabled.hasError {
    box-shadow: var(--form-control-inverted-error-disabled-shadow);
}

.disabled:before {
    border-bottom: var(--form-control-inverted-disabled-border-bottom);
}

.disabled.filled .label {
    color: var(--form-control-inverted-disabled-filled-label-color);
}

/* FOCUS STATE */

.focused:not(.disabled):not(.hasError):before {
    border-bottom: var(--form-control-inverted-focus-border-bottom);
}

.focused.inner {
    background-color: var(--form-control-inverted-focus-bg-color);
}

/* HOVER STATE */

.inner:not(.disabled):hover {
    background-color: var(--form-control-inverted-hover-bg-color);
}

/* ERROR STATE */

.error {
    color: var(--form-control-inverted-error-color);
}

.hasError .label {
    color: var(--form-control-inverted-error-label-color);
}

.hasError {
    box-shadow: var(--form-control-inverted-error-shadow);
}

.hasError:before {
    border-bottom: var(--form-control-inverted-error-border-bottom);
}
