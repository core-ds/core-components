@import '../../../../themes/src/default.css';
@import '../../../../tag/src/vars.css';

:root {
    --filter-tag-separator-background-color-hover: transparent;
}

.component {
    display: flex;
    width: max-content;
    max-width: 100%;
    box-sizing: border-box;

    &.disabled {
        background-color: var(--tag-outlined-background-color-disabled);
    }

    &.rounded {
        &.xxs {
            border-radius: var(--tag-rounded-xxs-border-radius);
        }

        &.xs {
            border-radius: var(--tag-rounded-xs-border-radius);
        }

        &.s {
            border-radius: var(--tag-rounded-s-border-radius);
        }
    }

    &.checked {
        &:not(.disabled) {
            background-color: var(--tag-background-color-checked);
        }

        &:not(.disabled).xxs {
            min-width: 84px;
        }

        &:not(.disabled).xs {
            min-width: 104px;
        }

        &:not(.disabled).s {
            min-width: 116px;
        }

        @media (hover: hover) {
            &:not(.disabled):hover {
                background-color: var(--tag-background-color-checked-hover);
            }
        }

        &:not(.disabled):active {
            background-color: var(--tag-background-color-checked-active);
        }
    }
}

.content {
    overflow: hidden;
    text-overflow: ellipsis;
}

.focused {
    @mixin focus-outline;
}

.chevron {
    position: relative;
    transition: transform 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--color-light-neutral-1500);
}

.valueButton {
    display: flex;
    align-items: center;
    box-shadow: none;
    user-select: none;
    cursor: pointer;
    outline: none;
    white-space: nowrap;
    font-family: var(--font-family);
    color: var(--tag-text-color);
    background-color: var(--tag-outlined-background-color);
    border-width: var(--tag-border-width);
    border-color: var(--tag-border-color);
    border-style: solid;
    transition: border-color 0.2s ease, background-color 0.2s ease, color 0.2s ease;
    margin: 0;

    &:disabled {
        cursor: var(--disabled-cursor);

        & > .chevron {
            color: var(--color-light-graphic-tertiary);
        }
    }

    &.rounded {
        &.xxs {
            border-radius: var(--tag-rounded-xxs-border-radius);
        }

        &.xs {
            border-radius: var(--tag-rounded-xs-border-radius);
        }

        &.s {
            border-radius: var(--tag-rounded-s-border-radius);
        }
    }

    &.xxs {
        min-width: 60px;
        min-height: var(--size-xxs-height);

        @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
            /* Хак для ие, в котором не работает центрирование по высоте с использованием флексов, если указан min-height
            Возможно другое решение - если в будущем у компонента появится обертка, установить ей display: flex / inline-flex */
            height: 32px;
        }
    }

    &.xs {
        min-width: 72px;
        min-height: var(--size-xs-height);

        @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
            /* Хак для ие, в котором не работает центрирование по высоте с использованием флексов, если указан min-height
            Возможно другое решение - если в будущем у компонента появится обертка, установить ей display: flex / inline-flex */
            height: 40px;
        }
    }

    &.s {
        min-width: 80px;
        min-height: var(--size-s-height);

        @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
            /* Хак для ие, в котором не работает центрирование по высоте с использованием флексов, если указан min-height
            Возможно другое решение - если в будущем у компонента появится обертка, установить ей display: flex / inline-flex */
            height: 48px;
        }
    }

    &.outlined {
        color: var(--tag-text-color);
        border-color: var(--tag-border-color);
        background-color: var(--tag-outlined-background-color);

        &:disabled {
            border-color: var(--tag-border-color-disabled);
            color: var(--tag-text-color-disabled);
            background-color: var(--tag-outlined-background-color-disabled);
        }
        @media (hover: hover) {
            &:not(:disabled):hover {
                border-color: var(--tag-border-color-hover);
                background-color: var(--tag-outlined-background-color-hover);
            }
        }
        &:not(:disabled):active {
            border-color: var(--tag-border-color-active);
            background-color: var(--tag-outlined-background-color-active);
        }
    }

    &.filled {
        color: var(--tag-text-color);
        border-color: var(--tag-filled-border-color);

        &:disabled {
            color: var(--tag-text-color-disabled);
        }
    }

    &.s {
        @mixin paragraph_primary_medium;
        padding-right: var(--gap-s);
        padding-left: var(--gap-xl);

        & .chevron {
            margin: 0 var(--gap-xs);
        }
    }

    &.xs {
        @mixin paragraph_primary_small;
        padding-right: var(--gap-xs);
        padding-left: var(--gap-l);

        & .chevron {
            margin: 0 var(--gap-xs) 0 var(--gap-2xs);
        }
    }

    &.xxs {
        @mixin paragraph_primary_small;
        padding-right: var(--gap-2xs);
        padding-left: var(--gap-m);

        & .chevron {
            margin: 0 var(--gap-xs) 0 var(--gap-2xs);
        }
    }

    &.open .chevron {
        transform: rotateZ(180deg);
    }

    &.checked {
        border-width: 0;
        color: var(--tag-text-color-checked);
        background-color: var(--tag-background-color-checked);

        & > .chevron {
            color: var(--color-light-neutral-1500-inverted);
        }

        &.rounded {
            &.xxs {
                border-radius: var(--tag-rounded-xxs-border-radius) 0 0
                    var(--tag-rounded-xxs-border-radius);
            }

            &.xs {
                border-radius: var(--tag-rounded-xs-border-radius) 0 0
                    var(--tag-rounded-xs-border-radius);
            }

            &.s {
                border-radius: var(--tag-rounded-s-border-radius) 0 0
                    var(--tag-rounded-s-border-radius);
            }

            &:disabled,
            &.close {
                border-radius: var(--tag-border-radius);
            }
        }

        &:not(:disabled) {
            padding-right: 0;
            border-right-width: 0;
        }

        @media (hover: hover) {
            &:not(:disabled):hover {
                background-color: var(--tag-background-color-checked-hover);
            }
        }

        &:not(:disabled):active {
            background-color: var(--tag-background-color-checked-active);
        }

        @media (hover: hover) {
            &:not(:disabled):hover + .clear:before {
                background-color: var(--filter-tag-separator-background-color-hover);
            }
        }

        &:not(:disabled):active + .clear:before {
            background-color: transparent;
        }

        &:disabled {
            color: var(--tag-text-color-checked-disabled);
            background-color: var(--tag-background-color-checked-disabled);

            & > .chevron {
                color: var(--color-light-graphic-tertiary);
            }
        }
    }
}

.clear {
    position: relative;
    cursor: pointer;
    display: flex;
    align-items: center;
    color: var(--color-light-neutral-translucent-700-inverted);
    background-color: var(--tag-background-color-checked);

    &.rounded {
        &.xxs {
            border-radius: 0 var(--tag-rounded-xxs-border-radius)
                var(--tag-rounded-xxs-border-radius) 0;
        }

        &.xs {
            border-radius: 0 var(--tag-rounded-xs-border-radius) var(--tag-rounded-xs-border-radius)
                0;
        }

        &.s {
            border-radius: 0 var(--tag-rounded-s-border-radius) var(--tag-rounded-s-border-radius) 0;
        }
    }

    &:before {
        content: '';
        position: absolute;
        left: 0;
        top: 50%;
        transform: translateY(-50%);
        display: block;
        background-color: var(--color-light-neutral-translucent-500-inverted);
        width: 1px;
        transition: background-color 0.2s ease;
    }

    @media (hover: hover) {
        &:hover:before {
            background-color: var(--filter-tag-separator-background-color-hover);
        }
    }

    &:active:before {
        background-color: transparent;
    }

    @media (hover: hover) {
        &:hover {
            color: var(--color-light-neutral-translucent-700-inverted-hover);
            background-color: var(--tag-background-color-checked-hover);
        }
    }

    &:active {
        color: var(--color-light-neutral-translucent-700-inverted-press);
        background-color: var(--tag-background-color-checked-active);
    }

    &.s {
        padding: 0 var(--gap-s) 0 var(--gap-xs);

        &:before {
            height: 24px;
        }
    }

    &.xs {
        padding: 0 var(--gap-xs);

        &:before {
            height: 24px;
        }
    }

    &.xxs {
        padding: 0 3px 0 var(--gap-2xs);

        &:before {
            height: 20px;
        }
    }
}

.iconWrapper {
    width: 24px;
    height: 24px;
    display: flex;
    justify-content: center;
    align-items: center;
}
