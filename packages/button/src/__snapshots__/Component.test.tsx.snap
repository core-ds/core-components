// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Button Snapshots tests should match snapshot 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <button
        class="component secondary m component secondary iconOnly"
        type="button"
      />
    </div>
  </body>,
  "container": <div>
    <button
      class="component secondary m component secondary iconOnly"
      type="button"
    />
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Button Snapshots tests should render anchor if href pass 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <a
        class="component secondary m component secondary iconOnly"
        href="https://some-url"
      />
    </div>
  </body>,
  "container": <div>
    <a
      class="component secondary m component secondary iconOnly"
      href="https://some-url"
    />
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Button Snapshots tests should render button by default 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <button
        class="component secondary m component secondary iconOnly"
        type="button"
      />
    </div>
  </body>,
  "container": <div>
    <button
      class="component secondary m component secondary iconOnly"
      type="button"
    />
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Button Snapshots tests should render left addons 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <button
        class="component secondary m component secondary iconOnly"
        type="button"
      >
        <span
          class="addons"
        >
          <div>
            Left addons
          </div>
        </span>
      </button>
    </div>
  </body>,
  "container": <div>
    <button
      class="component secondary m component secondary iconOnly"
      type="button"
    >
      <span
        class="addons"
      >
        <div>
          Left addons
        </div>
      </span>
    </button>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Button Snapshots tests should render loader if loading & href pass 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <a
        class="component secondary m component secondary iconOnly loading"
        href="https://some-url"
      >
        <svg
          class="spinner component s loader loader visible"
          fill="none"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <defs>
            <lineargradient
              id=":r1:_top"
              x1="0.05"
            >
              <stop
                offset="0.1"
                stop-color="currentColor"
                stop-opacity="0"
              />
              <stop
                offset="1"
                stop-color="currentColor"
                stop-opacity="0.3"
              />
            </lineargradient>
            <lineargradient
              id=":r1:_bottom"
              x1="0.05"
            >
              <stop
                offset="0"
                stop-color="currentColor"
                stop-opacity="1"
              />
              <stop
                offset="1"
                stop-color="currentColor"
                stop-opacity="0.3"
              />
            </lineargradient>
          </defs>
          <g
            stroke-width="2"
          >
            <path
              d="M3,12 A9,9 0 0 1 21,12"
              stroke="url(#:r1:_top)"
            />
            <path
              d="M21,12 A9,9 0 0 1 3,12"
              stroke="url(#:r1:_bottom)"
            />
            <path
              d="M3,12 A9,9 0 0 1 3 12"
              stroke="currentColor"
              stroke-linecap="round"
            />
          </g>
        </svg>
      </a>
    </div>
  </body>,
  "container": <div>
    <a
      class="component secondary m component secondary iconOnly loading"
      href="https://some-url"
    >
      <svg
        class="spinner component s loader loader visible"
        fill="none"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <defs>
          <lineargradient
            id=":r1:_top"
            x1="0.05"
          >
            <stop
              offset="0.1"
              stop-color="currentColor"
              stop-opacity="0"
            />
            <stop
              offset="1"
              stop-color="currentColor"
              stop-opacity="0.3"
            />
          </lineargradient>
          <lineargradient
            id=":r1:_bottom"
            x1="0.05"
          >
            <stop
              offset="0"
              stop-color="currentColor"
              stop-opacity="1"
            />
            <stop
              offset="1"
              stop-color="currentColor"
              stop-opacity="0.3"
            />
          </lineargradient>
        </defs>
        <g
          stroke-width="2"
        >
          <path
            d="M3,12 A9,9 0 0 1 21,12"
            stroke="url(#:r1:_top)"
          />
          <path
            d="M21,12 A9,9 0 0 1 3,12"
            stroke="url(#:r1:_bottom)"
          />
          <path
            d="M3,12 A9,9 0 0 1 3 12"
            stroke="currentColor"
            stroke-linecap="round"
          />
        </g>
      </svg>
    </a>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Button Snapshots tests should render loader if loading pass 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <button
        class="component secondary m component secondary iconOnly loading"
        disabled=""
        type="button"
      >
        <svg
          class="spinner component s loader loader visible"
          fill="none"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <defs>
            <lineargradient
              id=":r0:_top"
              x1="0.05"
            >
              <stop
                offset="0.1"
                stop-color="currentColor"
                stop-opacity="0"
              />
              <stop
                offset="1"
                stop-color="currentColor"
                stop-opacity="0.3"
              />
            </lineargradient>
            <lineargradient
              id=":r0:_bottom"
              x1="0.05"
            >
              <stop
                offset="0"
                stop-color="currentColor"
                stop-opacity="1"
              />
              <stop
                offset="1"
                stop-color="currentColor"
                stop-opacity="0.3"
              />
            </lineargradient>
          </defs>
          <g
            stroke-width="2"
          >
            <path
              d="M3,12 A9,9 0 0 1 21,12"
              stroke="url(#:r0:_top)"
            />
            <path
              d="M21,12 A9,9 0 0 1 3,12"
              stroke="url(#:r0:_bottom)"
            />
            <path
              d="M3,12 A9,9 0 0 1 3 12"
              stroke="currentColor"
              stroke-linecap="round"
            />
          </g>
        </svg>
      </button>
    </div>
  </body>,
  "container": <div>
    <button
      class="component secondary m component secondary iconOnly loading"
      disabled=""
      type="button"
    >
      <svg
        class="spinner component s loader loader visible"
        fill="none"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <defs>
          <lineargradient
            id=":r0:_top"
            x1="0.05"
          >
            <stop
              offset="0.1"
              stop-color="currentColor"
              stop-opacity="0"
            />
            <stop
              offset="1"
              stop-color="currentColor"
              stop-opacity="0.3"
            />
          </lineargradient>
          <lineargradient
            id=":r0:_bottom"
            x1="0.05"
          >
            <stop
              offset="0"
              stop-color="currentColor"
              stop-opacity="1"
            />
            <stop
              offset="1"
              stop-color="currentColor"
              stop-opacity="0.3"
            />
          </lineargradient>
        </defs>
        <g
          stroke-width="2"
        >
          <path
            d="M3,12 A9,9 0 0 1 21,12"
            stroke="url(#:r0:_top)"
          />
          <path
            d="M21,12 A9,9 0 0 1 3,12"
            stroke="url(#:r0:_bottom)"
          />
          <path
            d="M3,12 A9,9 0 0 1 3 12"
            stroke="currentColor"
            stroke-linecap="round"
          />
        </g>
      </svg>
    </button>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Button Snapshots tests should render right addons 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <button
        class="component secondary m component secondary iconOnly"
        type="button"
      >
        <span
          class="addons"
        >
          <div>
            Right addons
          </div>
        </span>
      </button>
    </div>
  </body>,
  "container": <div>
    <button
      class="component secondary m component secondary iconOnly"
      type="button"
    >
      <span
        class="addons"
      >
        <div>
          Right addons
        </div>
      </span>
    </button>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
