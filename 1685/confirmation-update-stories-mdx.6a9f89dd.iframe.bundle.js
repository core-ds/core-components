"use strict";(self.webpackChunk_alfalab_core_components=self.webpackChunk_alfalab_core_components||[]).push([[6364,1341],{"./node_modules/@mdx-js/react/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{MDXContext:function(){return MDXContext},MDXProvider:function(){return MDXProvider},useMDXComponents:function(){return useMDXComponents},withMDXComponents:function(){return withMDXComponents}});var react=__webpack_require__("./node_modules/react/index.js");let MDXContext=react.createContext({});function withMDXComponents(Component){return boundMDXComponent;function boundMDXComponent(props){let allComponents=useMDXComponents(props.components);return react.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){let contextComponents=react.useContext(MDXContext);return react.useMemo(()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components},[contextComponents,components])}let emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react.createElement(MDXContext.Provider,{value:allComponents},children)}},"./node_modules/@storybook/addon-docs/dist/chunk-HLWAVYOI.mjs":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{r:function(){return DocsRenderer}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_storybook_react_dom_shim__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/react-dom-shim/dist/react-18.mjs"),_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs"),defaultComponents={code:_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.bD,a:_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.Ct,..._storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.lO},ErrorBoundary=class extends react__WEBPACK_IMPORTED_MODULE_0__.Component{constructor(){super(...arguments),this.state={hasError:!1}}static getDerivedStateFromError(){return{hasError:!0}}componentDidCatch(err){let{showException}=this.props;showException(err)}render(){let{hasError}=this.state,{children}=this.props;return hasError?null:react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,children)}},DocsRenderer=class{constructor(){this.render=async(context,docsParameter,element)=>{let components={...defaultComponents,...docsParameter?.components},TDocs=_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.WI;return new Promise((resolve,reject)=>{__webpack_require__.e(1341).then(__webpack_require__.bind(__webpack_require__,"./node_modules/@mdx-js/react/index.js")).then(({MDXProvider})=>(0,_storybook_react_dom_shim__WEBPACK_IMPORTED_MODULE_2__.l)(react__WEBPACK_IMPORTED_MODULE_0__.createElement(ErrorBoundary,{showException:reject,key:Math.random()},react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXProvider,{components},react__WEBPACK_IMPORTED_MODULE_0__.createElement(TDocs,{context,docsParameter}))),element)).then(()=>resolve())})},this.unmount=element=>{(0,_storybook_react_dom_shim__WEBPACK_IMPORTED_MODULE_2__.K)(element)}}}},"./node_modules/@storybook/addon-docs/dist/index.mjs":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{$4:function(){return _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.$4},Ed:function(){return _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.Ed},UG:function(){return _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.UG},h_:function(){return _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.h_},oG:function(){return _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.oG}}),__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-HLWAVYOI.mjs");var _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs")},"./node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim.js":function(module,__unused_webpack_exports,__webpack_require__){var mod,secondTarget,__defProp=Object.defineProperty,__getOwnPropDesc=Object.getOwnPropertyDescriptor,__getOwnPropNames=Object.getOwnPropertyNames,__hasOwnProp=Object.prototype.hasOwnProperty,__copyProps=(to,from,except,desc)=>{if(from&&"object"==typeof from||"function"==typeof from)for(let key of __getOwnPropNames(from))__hasOwnProp.call(to,key)||key===except||__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});return to},mdx_react_shim_exports={};module.exports=__copyProps(__defProp({},"__esModule",{value:!0}),mdx_react_shim_exports),mod=__webpack_require__("./node_modules/@mdx-js/react/index.js"),secondTarget=module.exports,__copyProps(mdx_react_shim_exports,mod,"default"),secondTarget&&__copyProps(secondTarget,mod,"default")},"./docs/confirmation-update.stories.mdx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:function(){return __namedExportsOrder},__page:function(){return __page}}),__webpack_require__("./node_modules/react/index.js");var _home_runner_work_core_components_core_components_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim.js"),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/react/jsx-runtime.js");function _createMdxContent(props){let _components=Object.assign({h4:"h4",p:"p",code:"code",ul:"ul",li:"li",pre:"pre"},(0,_home_runner_work_core_components_core_components_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_1__.useMDXComponents)(),props.components);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.h_,{title:"For users/Обновление Confirmation",parameters:{previewTabs:{canvas:{hidden:!0}}},id:"Instructions/Confirmation-update"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.h4,{id:"инструкция-по-обновлению-confirmation-до-10-версии-на-актуальную",children:"Инструкция по обновлению Confirmation до 10 версии на актуальную."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_components.p,{children:["Для понимания различий компонентов приведена сравнительная таблица пропсов ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"Старого"})," компонента ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"Confirmation"})," (до 10 версии), и ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"Нового"})," (выше 10 версии, root-пакет 24.0.0)."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.UG,{children:`
| Старый                                                           |                                                                                                                                                                                                                  | Новый                                                                             |                                                                                                                                      |
| ---------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------ |
| <b>Название</b>                                                  | <b>Описание</b>                                                                                                                                                                                                  | <b>Название</b>                                                                   | <b>Описание</b>                                                                                                                      |
| code <br /> \`string\`                                           | Значение поля ввода                                                                                                                                                                                              | ➖                                                                                 | -                                                                                                                                    |
| codeChecking <br /> \`boolean\`                                  | Флаг состояния обработки введенного кода                                                                                                                                                                         | \`state = CODE_CHECKING\`                                                         | Состояние проверки кода                                                                                                              |
| codeSending <br /> \`boolean\`                                   | Флаг состояния отправки кода.                                                                                                                                                                                    | \`state = CODE_SENDING\`                                                          | Состояние повторной отправки кода                                                                                                    |
| error <br /> \`boolean\`                                         | Состояние ошибки подписания                                                                                                                                                                                      | \`state = 'CODE_ERROR'\` <br/> \`string\`                                         | Состояние ошибки, когда ввели неверный код                                                                                           |
| errorOverlimit <br /> \`boolean\`                                | Состояние ошибки лимитов - превышено кол-во попыток ввода или запросов кода                                                                                                                                      | \`screen = 'TEMP_BLOCK'\` <br/> \`string\`                                        | Экран временной блокировки                                                                                                           |
| errorOverlimitIsFatal <br /> \`boolean\`                         | Состояние критической ошибки лимитов - превышены все лимиты и попытки, пользователя блокируют                                                                                                                    | \`screen = 'FATAL_ERROR'\` <br/> \`string\`                                       | Экран критической ошибки                                                                                                             |
| errorText <br /> \`string\`                                      | Текст ошибки подписания                                                                                                                                                                                          | texts.codeError <br/> \`string\`                                                  | Ошибка проверки кода                                                                                                                 |
| additionalContent <br /> \`React.Node\`                          | Дополнительный контент                                                                                                                                                                                           | ➖                                                                                 | -                                                                                                                                    |
| errorIsFatal <br /> \`boolean\`                                  | Флаг критичности ошибки подписания. <br/> Если true - ошибка подписания рисуется на экране без поля ввода,<br/> но с кнопкой "Запросить код". <br/> Если false - ошибка подписания рисуется под полем ввода кода | \`screen = 'FATAL_ERROR'\` <br/> \`string\`                                       | Экран критической ошибки                                                                                                             |
| className <br /> \`string\`                                      | Дополнительный класс                                                                                                                                                                                             | className <br/> \`string\`                                                        | Дополнительный класс для стилизации общей обёртки                                                                                    |
| phone <br /> \`string\`                                          | Номер телефона, на который отправляется сообщение                                                                                                                                                                | phone <br/> \`string\`                                                            | Номер телефона, на который отправлен код                                                                                             |
| hasPhoneMask <br /> \`boolean\`                                  | Управление необходимостью маскировать номер телефона                                                                                                                                                             | ➖                                                                                 | Настраивается через пропс \`phone\`                                                                                                  |
| requiredCharAmount <br /> \`number\`                             | Количество символов, которое можно ввести <br/> в поле ввода подписания до того, как произойдет автоотправка                                                                                                     | requiredCharAmount <br/> \`number\`                                               | Количество символов, которое можно ввести <br/> в поле ввода подписания до того, как произойдет автоотправка                         |
| hasSmsCountdown <br /> \`boolean\`                               | Управление отображением таймера с кнопкой "Запросить код"                                                                                                                                                        | ➖                                                                                 |                                                                                                                                      |
| countdownDuration <br /> \`number\`                              | Длительность обратного отсчета<br/> на кнопке повторного запроса сообщения, в милисекундах                                                                                                                       | countdownDuration <br/> \`number\`                                                | Длительность обратного отсчета на кнопке повторного запроса сообщения, в милисекундах                                                |
| signTitle <br /> \`React.Node\`                                  | Заголовок экрана подписания                                                                                                                                                                                      | texts.title <br/> \`string\`                                                      | Текст заголовока начального экрана \`INITIAL\`                                                                                       |
| overlimitTitle <br /> \`string\`                                 | Заголовок экрана ошибки лимитов                                                                                                                                                                                  | ➖                                                                                 | -                                                                                                                                    |
| overlimitText <br /> \`string\`                                  | Текстовое описание блокировки формы при превышении лимитов                                                                                                                                                       | texts.fatalErrorDescription                                                       | Текст описания на экране критической ошибки \`FATAL_ERROR\`                                                                          |
| overlimitCountdownDuration <br /> \`number\`                     | Длительность блокировки при превышении лимитов (ms)                                                                                                                                                              | tempBlockDuration <br/> \`number\`                                                | Продолжительность блокировки формы (ms)                                                                                              |
| errorTitle <br /> \`string\`                                     | Заголовок экрана блокирующей ошибки                                                                                                                                                                              | texts.fatalErrorTitle <br/> \`ReactNode\`                                         | Заголовок экрана \`FATAL_ERROR\`                                                                                                     |
| dataTestId <br /> \`string\`                                     | Идентификатор для систем автоматизированного тестирования                                                                                                                                                        | dataTestId <br/> \`string\`                                                       | Идентификатор для систем автоматизированного тестирования                                                                            |
| codeCheckingText <br /> \`string\`                               | Текст лоадера при проверке кода                                                                                                                                                                                  | texts.codeChecking <br/> \`string\`                                               | код проверяется                                                                                                                      |
| codeSendingText <br /> \`string\`                                | Текст лоадера при отправке кода                                                                                                                                                                                  | texts.codeSending <br/> \`string\`                                                | код отправляется                                                                                                                     |
| buttonErrorText <br /> \`string\`                                | Текст кнопки при блокирующей ошибке                                                                                                                                                                              | texts.fatalErrorButton <br/> \`string\`                                           | Текст кнопки на экране \`FATAL_ERROR\`                                                                                               |
| buttonReturnText <br /> \`string\`                               | Текст кнопки "Вернуться назад" на экране помощи                                                                                                                                                                  | texts.hintButton <br/> \`string\`                                                 | Текст кнопки на экране \`HINT\` ('Вернуться к вводу кода')                                                                           |
| buttonRetryText <br /> \`string\`                                | Текст кнопки "Запросить новый код"                                                                                                                                                                               | texts.buttonRetry <br/> \`string\`                                                | Текст кнопки повторной отправки кода                                                                                                 |
| alignContent <br /> \`left  center\`                            | Позиционирование контента                                                                                                                                                                                        | alignContent <br/> \`left  center\`                                              | Позиционирование контента                                                                                                            |
| noAttemptsLeftMessagegnContent <br /> \`string\`                 | Сообщение, если не осталось попыток ввода кода.<br/> Кнопка повторной отправки смс при этом скрывается.                                                                                                          | text.noAttemptsLeft                                                               | Текст, когда не осталось попыток запроса кода                                                                                        |
| countdownContent <br /> \`React.Node\`                           | Кастомный контент для компонента Countdown                                                                                                                                                                       | texts.countdown <br/> \`string\`                                                  | Текст таймера "запросить повторно можно через"                                                                                       |
| onInputFinished <br /> \`({ code }: { code: string; }) => void\` | Обработчик события завершения ввода кода подписания                                                                                                                                                              | onInputFinished <br/> \`(code: string) => void\`                                  | Обработчик события завершения ввода кода подписания                                                                                  |
| onInputChange <br /> \`({ code }: { code: string; }) => void\`   | Обработчик события изменения значения поля ввода кода подписания                                                                                                                                                 | ➖                                                                                 | -                                                                                                                                    |
| onSmsRetryClick <br /> \`() => void\`                            | Обработчик события нажатия на кнопку "Запросить код"                                                                                                                                                             | onSmsRetryClick <br/> \`(code: string) => void\`                                  | Обработчик события нажатия на кнопку "Запросить код"                                                                                 |
| onOverlimitSmsRetryClick <br /> \`() => void\`                   | Обработчик события нажатия на кнопку "Запросить код" в блоке превышение лимитов                                                                                                                                  | ➖                                                                                 | -                                                                                                                                    |
| onCountdownFinished <br /> \`() => void\`                        | Обработчик события завершения обратного отсчета для повторного запроса сообщения                                                                                                                                 | onTempBlockFinished <br/> \`(code: string) => void\`                              | Временная блокировка формы закончилась                                                                                               |
| onOverlimitCountdownFinished <br /> \`() => void\`               | Обработчик события завершения обратного отсчета для блокировки формы                                                                                                                                             | ➖                                                                                 | -                                                                                                                                    |
| onSmsHintLinkClick <br /> \`() => void\`                         | Обработчик события нажатия на ссылку "не приходит сообщение?"                                                                                                                                                    | ➖                                                                                 | -                                                                                                                                    |
| onActionWithFatalError <br /> \`() => void\`                     | Обработчик события нажатия на кнопку buttonErrorText (по дефолту "Понятно"), <br/> которая появляется при критической ошибке.<br/> Если не передан, то вызывается onSmsRetryClick                                | onFatalErrorOkButtonClick <br/> \`(code: string) => void\`                        | Клик по кнопке "Понятно" на экране фатальной ошибки                                                                                  |
|                                                                  |                                                                                                                                                                                                                  | screen <br/> \`'INITIAL', 'HINT', 'FATAL_ERROR', 'TEMP_BLOCK', key of screenMap\` | Экран компонента (Начальное состояние, экран "Не приходит смс?",<br/> экран критической ошибки, экран временной блокировки)          |
|                                                                  |                                                                                                                                                                                                                  | state <br/> \`ConfirmationState  string\`                                        | Состояние компонента (Начальное состояние,<br/> проверка кода,<br/> повторная отправка кода,<br /> ошибка, когда ввели неверный код) |
|                                                                  |                                                                                                                                                                                                                  | texts                                                                             | Объект с кастомными текстами для всех экранов                                                                                        |
|                                                                  |                                                                                                                                                                                                                  | onChangeState <br/> \`(state: string) => void\`                                   | Функция обновления состояния компонента                                                                                              |
|                                                                  |                                                                                                                                                                                                                  | onChangeScreen <br/> \`(state: string) => void\`                                  | Функция обновления экрана компонента                                                                                                 |
|                                                                  |                                                                                                                                                                                                                  | getScreensMap <br/> \`(defaulScreensMap: ScreensMap) => ScreensMap\`              | Возввращает объект, где ключ - название экрана (screen), значение - компонент для экрана                                             |
|                                                                  |                                                                                                                                                                                                                  | texts.codeSended <br/> \`string\`                                                 | Текст после отправки кода (код отправлен)                                                                                            |
|                                                                  |                                                                                                                                                                                                                  | texts.linkToHint <br/> \`string\`                                                 | Текст ссылки на экран \`HINT\` ("Не приходит смс?")                                                                                  |
|                                                                  |                                                                                                                                                                                                                  | texts.tempBlockTitle <br/> \`ReactNode\`                                          | Текст заголовка на экране \`TEMP_BLOCK\`                                                                                             |
|                                                                  |                                                                                                                                                                                                                  | texts.tempBlockDescription <br/> \`ReactNode\`                                    | Текст описания на экране временной блокировки \`TEMP_BLOCK\`                                                                         |
|                                                                  |                                                                                                                                                                                                                  | blockSmsRetry <br/> \`boolean\`                                                   | Скрытие кнопки повторного запроса sms когда, Не осталось попыток ввода кода                                                          |
`}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_components.p,{children:["В компоненте полностью переосмыслен подход к состоянию.\nТеперь нет необходимости прокидывать множество пропсов для получения желаемого вида компонента.\nНужно использовать экраны ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"screen"})," и состояние ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"state"}),". Можно использовать как заложенные в компонент экраны, так и кастомные.\nЗаложенные в компонент экраны ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"screen"}),":"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_components.li,{children:["Экран начального состояния ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"INITIAL"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_components.li,{children:['Экран "Не приходит смс?" ',(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"HINT"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_components.li,{children:["Экран критической ошибки ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"FATAL_ERROR"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_components.li,{children:["Экран временной блокировки ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"TEMP_BLOCK"})]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_components.p,{children:["Заложенные в компонент состояния ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"state"}),":"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_components.li,{children:["начальное состояние ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"INITIAL"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_components.li,{children:["проверка кода ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"CODE_CHECKING"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_components.li,{children:["повторная отправка кода ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"CODE_SENDING"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_components.li,{children:["ошибка, когда ввели неверный код ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"CODE_ERROR"})]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.p,{children:"В новой версии есть как новые пропсы, так и аналогичные старым.\nРассмотрим те, которых нет в новой версии и чем их можно заменить."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"code"})," В старой версии стейт поля ввода находился снаружи компонента, сейчас эта логика находится внутри.\nУправлять значениями поля сейчас нет возможности."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"additionalContent"})," - Для унификации в существующие экраны нельзя добавлять дополнительный контент."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"hasPhoneMask"})," - В текущей версии маскировка номера телефона производится снаружи компонента, а в поле ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"phone"})," прокидывается уже замаскированный номер телефона вида ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"+7 \xb7\xb7\xb7 \xb7\xb7\xb7 07-24"}),";"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"hasSmsCountdown"})," - Управление отображением кнопки осуществляется через пропс ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"blockSmsRetry"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"countdownContent"})," - Убрали возможность управления контентом для унификации во всех продуктах."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"onInputChange"})," - Убрали, т.к. нет необходимости проверять промежуточные зачения поля ввода. Финальное значение нужно получать через ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"onInputFinished"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"onOverlimitSmsRetryClick"})," - Убран, на экране критической ошибки нет контролов."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"onOverlimitCountdownFinished"})," - Необходимо обрабатывать собственной логикой, при завершении таймера, когда ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"timeLeft === 0"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"onSmsHintLinkClick"})," - Убран, клик по ссылке всегда меняет экран на ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"HINT"})]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.h4,{id:"кастомные-экраны",children:"Кастомные экраны"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(_components.p,{children:['Если вам недостаточно встроенных экранов, копонент позволяет использовать кастомные экраны.\nДля этого вам может понадобиться "ConfirmationContext" из которого можно получить:\n',(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{children:"alignContent, texts, state, screen, requiredCharAmount, onInputFinished, countdownDuration, onChangeState, onSmsRetryClick, onChangeScreen, onFatalErrorOkButtonClick, tempBlockDuration, phone, blockSmsRetry, onTempBlockFinished, timeLeft"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.p,{children:"Пример простого кастомного экрана успешной отправки заявки;"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.pre,{live:!0,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_components.code,{className:"language-jsx",children:"// import { Confirmation, ConfirmationContext } from '@alfalab/core-components-confirmation';\n\nrender(() => {\n    const CodeSuccesScreen = () => {\n        const { texts, onChangeScreen, onChangeState } = React.useContext(ConfirmationContext);\n        return (\n            <Space align='center' size={24}>\n                <img src='./images/success_code.svg' alt='success' />\n                <Space align='center'>\n                    <Typography.Title color='primary' view='small'>\n                        {texts.codeSuccessTitle}\n                    </Typography.Title>\n                    <Typography.Text view='primary-medium'>\n                        {texts.codeSuccessDescription}\n                    </Typography.Text>\n                </Space>\n                <Button\n                    size='s'\n                    view='tertiary'\n                    onClick={() => {\n                        onChangeScreen('INITIAL');\n                        onChangeState('INITIAL');\n                    }}\n                >\n                    {texts.codeSuccessButtonTitle}\n                </Button>\n            </Space>\n        );\n    };\n\n    const { confirmationState, confirmationScreen, setConfirmationState, setConfirmationScreen } =\n        useConfirmation();\n\n    const handleInputFinished = () => {\n        setConfirmationScreen('CODE_SUCCESS');\n    };\n\n    const handleChangeScreen = (screen) => {\n        setConfirmationScreen(screen);\n    };\n\n    const getScreensMap = (screenMap) => ({ ...screenMap, CODE_SUCCESS: CodeSuccesScreen });\n\n    return (\n        <Confirmation\n            screen={confirmationScreen}\n            state={confirmationState}\n            alignContent='center'\n            countdownDuration={20000}\n            onChangeState={setConfirmationState}\n            onChangeScreen={handleChangeScreen}\n            onInputFinished={handleInputFinished}\n            getScreensMap={getScreensMap}\n            phone='+7 \xb7\xb7\xb7 \xb7\xb7\xb7 07-24'\n            texts={{\n                codeSuccessTitle: 'Заявка на подключение отправлена',\n                codeSuccessDescription: 'Услуга подключится в течение 3-х рабочих дней',\n                codeSuccessButtonTitle: 'Перейти в список заявок',\n            }}\n        />\n    );\n});\n"})})]})}function MDXContent(props={}){let{wrapper:MDXLayout}=Object.assign({},(0,_home_runner_work_core_components_core_components_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_1__.useMDXComponents)(),props.components);return MDXLayout?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(MDXLayout,{...props,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}let __page=()=>{throw Error("Docs-only story")};__page.parameters={docsOnly:!0};let componentMeta={title:"For users/Обновление Confirmation",id:"Instructions/Confirmation-update",parameters:{previewTabs:{canvas:{hidden:!0}}},tags:["stories-mdx"],includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:MDXContent},__webpack_exports__.default=componentMeta;let __namedExportsOrder=["__page"]}}]);