"use strict";(self.webpackChunk_alfalab_core_components=self.webpackChunk_alfalab_core_components||[]).push([[4136],{"./node_modules/@mdx-js/react/lib/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{NF:function(){return withMDXComponents},Zo:function(){return MDXProvider},ah:function(){return useMDXComponents},pC:function(){return MDXContext}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents:allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components:components,children:children,disableParentContext:disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./node_modules/@storybook/addon-docs/dist/chunk-S4VUQJ4A.mjs":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{r:function(){return DocsRenderer}});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_storybook_react_dom_shim__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/react-dom-shim/dist/react-18.mjs"),_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs"),defaultComponents={code:_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.bD,a:_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.Ct,..._storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.lO},ErrorBoundary=class extends react__WEBPACK_IMPORTED_MODULE_0__.Component{constructor(){super(...arguments),this.state={hasError:!1}}static getDerivedStateFromError(){return{hasError:!0}}componentDidCatch(err){let{showException:showException}=this.props;showException(err)}render(){let{hasError:hasError}=this.state,{children:children}=this.props;return hasError?null:children}},DocsRenderer=class{constructor(){this.render=async(context,docsParameter,element)=>{let components={...defaultComponents,...docsParameter?.components},TDocs=_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.WI;return new Promise(((resolve,reject)=>{__webpack_require__.e(9433).then(__webpack_require__.bind(__webpack_require__,"./node_modules/@mdx-js/react/index.js")).then((({MDXProvider:MDXProvider})=>(0,_storybook_react_dom_shim__WEBPACK_IMPORTED_MODULE_2__.l)(react__WEBPACK_IMPORTED_MODULE_0__.createElement(ErrorBoundary,{showException:reject,key:Math.random()},react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXProvider,{components:components},react__WEBPACK_IMPORTED_MODULE_0__.createElement(TDocs,{context:context,docsParameter:docsParameter}))),element))).then((()=>resolve()))}))},this.unmount=element=>{(0,_storybook_react_dom_shim__WEBPACK_IMPORTED_MODULE_2__.K)(element)}}}},"./node_modules/@storybook/addon-docs/dist/index.mjs":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{$4:function(){return _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.$4},Ed:function(){return _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.Ed},UG:function(){return _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.UG},h_:function(){return _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.h_},oG:function(){return _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.oG}});__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-S4VUQJ4A.mjs");var _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs")},"./docs/16.confirmation-update.stories.mdx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__page:function(){return __page}});__webpack_require__("./node_modules/react/index.js");var _storybook_addon_docs_mdx_react_shim__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react/jsx-runtime.js");function _createMdxContent(props){const _components=Object.assign({h4:"h4",p:"p",code:"code",ul:"ul",li:"li",pre:"pre"},(0,_storybook_addon_docs_mdx_react_shim__WEBPACK_IMPORTED_MODULE_3__.ah)(),props.components);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_1__.h_,{title:"For users/Обновление Confirmation",parameters:{previewTabs:{canvas:{hidden:!0}}},id:"Instructions/Confirmation-update"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.h4,{id:"инструкция-по-обновлению-confirmation-до-10-версии-на-актуальную",children:"Инструкция по обновлению Confirmation до 10 версии на актуальную."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.p,{children:["Для понимания различий компонентов приведена сравнительная таблица пропсов ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"Старого"})," компонента ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"Confirmation"})," (до 10 версии), и ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"Нового"})," (выше 10 версии, root-пакет 24.0.0)."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_1__.UG,{children:'\n| Старый                                                           |                                                                                                                                                                                                                  | Новый                                                                             |                                                                                                                                      |\n| ---------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------ |\n| <b>Название</b>                                                  | <b>Описание</b>                                                                                                                                                                                                  | <b>Название</b>                                                                   | <b>Описание</b>                                                                                                                      |\n| code <br /> `string`                                           | Значение поля ввода                                                                                                                                                                                              | ➖                                                                                 | -                                                                                                                                    |\n| codeChecking <br /> `boolean`                                  | Флаг состояния обработки введенного кода                                                                                                                                                                         | `state = CODE_CHECKING`                                                         | Состояние проверки кода                                                                                                              |\n| codeSending <br /> `boolean`                                   | Флаг состояния отправки кода.                                                                                                                                                                                    | `state = CODE_SENDING`                                                          | Состояние повторной отправки кода                                                                                                    |\n| error <br /> `boolean`                                         | Состояние ошибки подписания                                                                                                                                                                                      | `state = \'CODE_ERROR\'` <br/> `string`                                         | Состояние ошибки, когда ввели неверный код                                                                                           |\n| errorOverlimit <br /> `boolean`                                | Состояние ошибки лимитов - превышено кол-во попыток ввода или запросов кода                                                                                                                                      | `screen = \'TEMP_BLOCK\'` <br/> `string`                                        | Экран временной блокировки                                                                                                           |\n| errorOverlimitIsFatal <br /> `boolean`                         | Состояние критической ошибки лимитов - превышены все лимиты и попытки, пользователя блокируют                                                                                                                    | `screen = \'FATAL_ERROR\'` <br/> `string`                                       | Экран критической ошибки                                                                                                             |\n| errorText <br /> `string`                                      | Текст ошибки подписания                                                                                                                                                                                          | texts.codeError <br/> `string`                                                  | Ошибка проверки кода                                                                                                                 |\n| additionalContent <br /> `React.Node`                          | Дополнительный контент                                                                                                                                                                                           | ➖                                                                                 | -                                                                                                                                    |\n| errorIsFatal <br /> `boolean`                                  | Флаг критичности ошибки подписания. <br/> Если true - ошибка подписания рисуется на экране без поля ввода,<br/> но с кнопкой "Запросить код". <br/> Если false - ошибка подписания рисуется под полем ввода кода | `screen = \'FATAL_ERROR\'` <br/> `string`                                       | Экран критической ошибки                                                                                                             |\n| className <br /> `string`                                      | Дополнительный класс                                                                                                                                                                                             | className <br/> `string`                                                        | Дополнительный класс для стилизации общей обёртки                                                                                    |\n| phone <br /> `string`                                          | Номер телефона, на который отправляется сообщение                                                                                                                                                                | phone <br/> `string`                                                            | Номер телефона, на который отправлен код                                                                                             |\n| hasPhoneMask <br /> `boolean`                                  | Управление необходимостью маскировать номер телефона                                                                                                                                                             | ➖                                                                                 | Настраивается через пропс `phone`                                                                                                  |\n| requiredCharAmount <br /> `number`                             | Количество символов, которое можно ввести <br/> в поле ввода подписания до того, как произойдет автоотправка                                                                                                     | requiredCharAmount <br/> `number`                                               | Количество символов, которое можно ввести <br/> в поле ввода подписания до того, как произойдет автоотправка                         |\n| hasSmsCountdown <br /> `boolean`                               | Управление отображением таймера с кнопкой "Запросить код"                                                                                                                                                        | ➖                                                                                 |                                                                                                                                      |\n| countdownDuration <br /> `number`                              | Длительность обратного отсчета<br/> на кнопке повторного запроса сообщения, в милисекундах                                                                                                                       | countdownDuration <br/> `number`                                                | Длительность обратного отсчета на кнопке повторного запроса сообщения, в милисекундах                                                |\n| signTitle <br /> `React.Node`                                  | Заголовок экрана подписания                                                                                                                                                                                      | texts.title <br/> `string`                                                      | Текст заголовока начального экрана `INITIAL`                                                                                       |\n| overlimitTitle <br /> `string`                                 | Заголовок экрана ошибки лимитов                                                                                                                                                                                  | ➖                                                                                 | -                                                                                                                                    |\n| overlimitText <br /> `string`                                  | Текстовое описание блокировки формы при превышении лимитов                                                                                                                                                       | texts.fatalErrorDescription                                                       | Текст описания на экране критической ошибки `FATAL_ERROR`                                                                          |\n| overlimitCountdownDuration <br /> `number`                     | Длительность блокировки при превышении лимитов (ms)                                                                                                                                                              | tempBlockDuration <br/> `number`                                                | Продолжительность блокировки формы (ms)                                                                                              |\n| errorTitle <br /> `string`                                     | Заголовок экрана блокирующей ошибки                                                                                                                                                                              | texts.fatalErrorTitle <br/> `ReactNode`                                         | Заголовок экрана `FATAL_ERROR`                                                                                                     |\n| dataTestId <br /> `string`                                     | Идентификатор для систем автоматизированного тестирования                                                                                                                                                        | dataTestId <br/> `string`                                                       | Идентификатор для систем автоматизированного тестирования                                                                            |\n| codeCheckingText <br /> `string`                               | Текст лоадера при проверке кода                                                                                                                                                                                  | texts.codeChecking <br/> `string`                                               | код проверяется                                                                                                                      |\n| codeSendingText <br /> `string`                                | Текст лоадера при отправке кода                                                                                                                                                                                  | texts.codeSending <br/> `string`                                                | код отправляется                                                                                                                     |\n| buttonErrorText <br /> `string`                                | Текст кнопки при блокирующей ошибке                                                                                                                                                                              | texts.fatalErrorButton <br/> `string`                                           | Текст кнопки на экране `FATAL_ERROR`                                                                                               |\n| buttonReturnText <br /> `string`                               | Текст кнопки "Вернуться назад" на экране помощи                                                                                                                                                                  | texts.hintButton <br/> `string`                                                 | Текст кнопки на экране `HINT` (\'Вернуться к вводу кода\')                                                                           |\n| buttonRetryText <br /> `string`                                | Текст кнопки "Запросить новый код"                                                                                                                                                                               | texts.buttonRetry <br/> `string`                                                | Текст кнопки повторной отправки кода                                                                                                 |\n| alignContent <br /> `left  center`                            | Позиционирование контента                                                                                                                                                                                        | alignContent <br/> `left  center`                                              | Позиционирование контента                                                                                                            |\n| noAttemptsLeftMessagegnContent <br /> `string`                 | Сообщение, если не осталось попыток ввода кода.<br/> Кнопка повторной отправки смс при этом скрывается.                                                                                                          | text.noAttemptsLeft                                                               | Текст, когда не осталось попыток запроса кода                                                                                        |\n| countdownContent <br /> `React.Node`                           | Кастомный контент для компонента Countdown                                                                                                                                                                       | texts.countdown <br/> `string`                                                  | Текст таймера "запросить повторно можно через"                                                                                       |\n| onInputFinished <br /> `({ code }: { code: string; }) => void` | Обработчик события завершения ввода кода подписания                                                                                                                                                              | onInputFinished <br/> `(code: string) => void`                                  | Обработчик события завершения ввода кода подписания                                                                                  |\n| onInputChange <br /> `({ code }: { code: string; }) => void`   | Обработчик события изменения значения поля ввода кода подписания                                                                                                                                                 | ➖                                                                                 | -                                                                                                                                    |\n| onSmsRetryClick <br /> `() => void`                            | Обработчик события нажатия на кнопку "Запросить код"                                                                                                                                                             | onSmsRetryClick <br/> `(code: string) => void`                                  | Обработчик события нажатия на кнопку "Запросить код"                                                                                 |\n| onOverlimitSmsRetryClick <br /> `() => void`                   | Обработчик события нажатия на кнопку "Запросить код" в блоке превышение лимитов                                                                                                                                  | ➖                                                                                 | -                                                                                                                                    |\n| onCountdownFinished <br /> `() => void`                        | Обработчик события завершения обратного отсчета для повторного запроса сообщения                                                                                                                                 | onTempBlockFinished <br/> `(code: string) => void`                              | Временная блокировка формы закончилась                                                                                               |\n| onOverlimitCountdownFinished <br /> `() => void`               | Обработчик события завершения обратного отсчета для блокировки формы                                                                                                                                             | ➖                                                                                 | -                                                                                                                                    |\n| onSmsHintLinkClick <br /> `() => void`                         | Обработчик события нажатия на ссылку "не приходит сообщение?"                                                                                                                                                    | ➖                                                                                 | -                                                                                                                                    |\n| onActionWithFatalError <br /> `() => void`                     | Обработчик события нажатия на кнопку buttonErrorText (по дефолту "Понятно"), <br/> которая появляется при критической ошибке.<br/> Если не передан, то вызывается onSmsRetryClick                                | onFatalErrorOkButtonClick <br/> `(code: string) => void`                        | Клик по кнопке "Понятно" на экране фатальной ошибки                                                                                  |\n|                                                                  |                                                                                                                                                                                                                  | screen <br/> `\'INITIAL\', \'HINT\', \'FATAL_ERROR\', \'TEMP_BLOCK\', key of screenMap` | Экран компонента (Начальное состояние, экран "Не приходит смс?",<br/> экран критической ошибки, экран временной блокировки)          |\n|                                                                  |                                                                                                                                                                                                                  | state <br/> `ConfirmationState  string`                                        | Состояние компонента (Начальное состояние,<br/> проверка кода,<br/> повторная отправка кода,<br /> ошибка, когда ввели неверный код) |\n|                                                                  |                                                                                                                                                                                                                  | texts                                                                             | Объект с кастомными текстами для всех экранов                                                                                        |\n|                                                                  |                                                                                                                                                                                                                  | onChangeState <br/> `(state: string) => void`                                   | Функция обновления состояния компонента                                                                                              |\n|                                                                  |                                                                                                                                                                                                                  | onChangeScreen <br/> `(state: string) => void`                                  | Функция обновления экрана компонента                                                                                                 |\n|                                                                  |                                                                                                                                                                                                                  | getScreensMap <br/> `(defaulScreensMap: ScreensMap) => ScreensMap`              | Возввращает объект, где ключ - название экрана (screen), значение - компонент для экрана                                             |\n|                                                                  |                                                                                                                                                                                                                  | texts.codeSended <br/> `string`                                                 | Текст после отправки кода (код отправлен)                                                                                            |\n|                                                                  |                                                                                                                                                                                                                  | texts.linkToHint <br/> `string`                                                 | Текст ссылки на экран `HINT` ("Не приходит смс?")                                                                                  |\n|                                                                  |                                                                                                                                                                                                                  | texts.tempBlockTitle <br/> `ReactNode`                                          | Текст заголовка на экране `TEMP_BLOCK`                                                                                             |\n|                                                                  |                                                                                                                                                                                                                  | texts.tempBlockDescription <br/> `ReactNode`                                    | Текст описания на экране временной блокировки `TEMP_BLOCK`                                                                         |\n|                                                                  |                                                                                                                                                                                                                  | blockSmsRetry <br/> `boolean`                                                   | Скрытие кнопки повторного запроса sms когда, Не осталось попыток ввода кода                                                          |\n'}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.p,{children:["В компоненте полностью переосмыслен подход к состоянию.\nТеперь нет необходимости прокидывать множество пропсов для получения желаемого вида компонента.\nНужно использовать экраны ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"screen"})," и состояние ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"state"}),". Можно использовать как заложенные в компонент экраны, так и кастомные.\nЗаложенные в компонент экраны ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"screen"}),":"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.li,{children:["Экран начального состояния ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"INITIAL"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.li,{children:['Экран "Не приходит смс?" ',(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"HINT"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.li,{children:["Экран критической ошибки ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"FATAL_ERROR"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.li,{children:["Экран временной блокировки ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"TEMP_BLOCK"})]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.p,{children:["Заложенные в компонент состояния ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"state"}),":"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.li,{children:["начальное состояние ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"INITIAL"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.li,{children:["проверка кода ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"CODE_CHECKING"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.li,{children:["повторная отправка кода ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"CODE_SENDING"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.li,{children:["ошибка, когда ввели неверный код ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"CODE_ERROR"})]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.p,{children:"В новой версии есть как новые пропсы, так и аналогичные старым.\nРассмотрим те, которых нет в новой версии и чем их можно заменить."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"code"})," В старой версии стейт поля ввода находился снаружи компонента, сейчас эта логика находится внутри.\nУправлять значениями поля сейчас нет возможности."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"additionalContent"})," - Для унификации в существующие экраны нельзя добавлять дополнительный контент."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"hasPhoneMask"})," - В текущей версии маскировка номера телефона производится снаружи компонента, а в поле ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"phone"})," прокидывается уже замаскированный номер телефона вида ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"+7 ··· ··· 07-24"}),";"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"hasSmsCountdown"})," - Управление отображением кнопки осуществляется через пропс ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"blockSmsRetry"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"countdownContent"})," - Убрали возможность управления контентом для унификации во всех продуктах."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"onInputChange"})," - Убрали, т.к. нет необходимости проверять промежуточные зачения поля ввода. Финальное значение нужно получать через ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"onInputFinished"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"onOverlimitSmsRetryClick"})," - Убран, на экране критической ошибки нет контролов."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"onOverlimitCountdownFinished"})," - Необходимо обрабатывать собственной логикой, при завершении таймера, когда ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"timeLeft === 0"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"onSmsHintLinkClick"})," - Убран, клик по ссылке всегда меняет экран на ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"HINT"})]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.h4,{id:"кастомные-экраны",children:"Кастомные экраны"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_components.p,{children:['Если вам недостаточно встроенных экранов, копонент позволяет использовать кастомные экраны.\nДля этого вам может понадобиться "ConfirmationContext" из которого можно получить:\n',(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{children:"alignContent, texts, state, screen, requiredCharAmount, onInputFinished, countdownDuration, onChangeState, onSmsRetryClick, onChangeScreen, onFatalErrorOkButtonClick, tempBlockDuration, phone, blockSmsRetry, onTempBlockFinished, timeLeft"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.p,{children:"Пример простого кастомного экрана успешной отправки заявки;"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.pre,{live:!0,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_components.code,{className:"language-jsx",children:"// import { Confirmation, ConfirmationContext } from '@alfalab/core-components-confirmation';\n\nrender(() => {\n    const CodeSuccesScreen = () => {\n        const { texts, onChangeScreen, onChangeState } = React.useContext(ConfirmationContext);\n        return (\n            <Space align='center' size={24}>\n                <img src='./images/success_code.svg' alt='success' />\n                <Space align='center'>\n                    <Typography.Title color='primary' view='small'>\n                        {texts.codeSuccessTitle}\n                    </Typography.Title>\n                    <Typography.Text view='primary-medium'>\n                        {texts.codeSuccessDescription}\n                    </Typography.Text>\n                </Space>\n                <Button\n                    size='s'\n                    view='tertiary'\n                    onClick={() => {\n                        onChangeScreen('INITIAL');\n                        onChangeState('INITIAL');\n                    }}\n                >\n                    {texts.codeSuccessButtonTitle}\n                </Button>\n            </Space>\n        );\n    };\n\n    const { confirmationState, confirmationScreen, setConfirmationState, setConfirmationScreen } =\n        useConfirmation();\n\n    const handleInputFinished = () => {\n        setConfirmationScreen('CODE_SUCCESS');\n    };\n\n    const handleChangeScreen = (screen) => {\n        setConfirmationScreen(screen);\n    };\n\n    const getScreensMap = (screenMap) => ({ ...screenMap, CODE_SUCCESS: CodeSuccesScreen });\n\n    return (\n        <Confirmation\n            screen={confirmationScreen}\n            state={confirmationState}\n            alignContent='center'\n            countdownDuration={20000}\n            onChangeState={setConfirmationState}\n            onChangeScreen={handleChangeScreen}\n            onInputFinished={handleInputFinished}\n            getScreensMap={getScreensMap}\n            phone='+7 ··· ··· 07-24'\n            texts={{\n                codeSuccessTitle: 'Заявка на подключение отправлена',\n                codeSuccessDescription: 'Услуга подключится в течение 3-х рабочих дней',\n                codeSuccessButtonTitle: 'Перейти в список заявок',\n            }}\n        />\n    );\n});\n"})})]})}const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"For users/Обновление Confirmation",id:"Instructions/Confirmation-update",parameters:{previewTabs:{canvas:{hidden:!0}}},tags:["stories-mdx"],includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,_storybook_addon_docs_mdx_react_shim__WEBPACK_IMPORTED_MODULE_3__.ah)(),props.components);return MDXLayout?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MDXLayout,{...props,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}},__webpack_exports__.default=componentMeta}}]);