{
  "Backdrop": {
    "description": "",
    "props": [
      {
        "name": "timeout",
        "type": "number | { appear?: number; enter?: number; exit?: number | undefined; } | { appear?: number | undefined; enter?: number | undefined; exit?: number | undefined; } | undefined",
        "required": false,
        "defaultValue": 200,
        "description": "The duration of the transition, in milliseconds. Required unless addEndListener is provided.\n\nYou may specify a single timeout for all transitions:\n```js\n  timeout={500}\n```\nor individually:\n```js\ntimeout={{\n appear: 500,\n enter: 300,\n exit: 500,\n}}\n```\n- appear defaults to the value of `enter`\n- enter defaults to `0`\n- exit defaults to `0`"
      },
      {
        "name": "addEndListener",
        "type": "((node: HTMLElement, done: () => void) => void)",
        "required": false,
        "description": "Add a custom transition end trigger. Called with the transitioning DOM\nnode and a done callback. Allows for more fine grained transition end\nlogic. Note: Timeouts are still used as a fallback if provided."
      },
      {
        "name": "in",
        "type": "boolean",
        "required": false,
        "description": "Show the component; triggers the enter or exit states"
      },
      {
        "name": "mountOnEnter",
        "type": "boolean",
        "required": false,
        "description": "By default the child component is mounted immediately along with the\nparent Transition component. If you want to \"lazy mount\" the component on\nthe first `in={true}` you can set `mountOnEnter`. After the first enter\ntransition the component will stay mounted, even on \"exited\", unless you\nalso specify `unmountOnExit`."
      },
      {
        "name": "unmountOnExit",
        "type": "boolean",
        "required": false,
        "description": "By default the child component stays mounted after it reaches the\n'exited' state. Set `unmountOnExit` if you'd prefer to unmount the\ncomponent after it finishes exiting."
      },
      {
        "name": "onEnter",
        "type": "((node: HTMLElement, isAppearing: boolean) => void)",
        "required": false,
        "description": "Callback fired before the \"entering\" status is applied. An extra\nparameter `isAppearing` is supplied to indicate if the enter stage is\noccurring on the initial mount"
      },
      {
        "name": "onEntering",
        "type": "((node: HTMLElement, isAppearing: boolean) => void)",
        "required": false,
        "description": "Callback fired after the \"entering\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount"
      },
      {
        "name": "onEntered",
        "type": "((node: HTMLElement, isAppearing: boolean) => void)",
        "required": false,
        "description": "Callback fired after the \"entered\" status is applied. An extra parameter\nisAppearing is supplied to indicate if the enter stage is occurring on\nthe initial mount"
      },
      {
        "name": "onExit",
        "type": "((node: HTMLElement) => void)",
        "required": false,
        "description": "Callback fired before the \"exiting\" status is applied."
      },
      {
        "name": "onExiting",
        "type": "((node: HTMLElement) => void)",
        "required": false,
        "description": "Callback fired after the \"exiting\" status is applied."
      },
      {
        "name": "onExited",
        "type": "((node: HTMLElement) => void)",
        "required": false,
        "description": "Callback fired after the \"exited\" status is applied."
      },
      {
        "name": "children",
        "type": "((string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | ReactFragment | ReactPortal | ((status: TransitionStatus, childProps?: Record<...>) => ReactNode)) & (string | ... 4 more ... | ReactPortal)) | null",
        "required": false,
        "description": "A function child can be used instead of a React element. This function is\ncalled with the current transition status ('entering', 'entered',\n'exiting',  'exited', 'unmounted'), which can be used to apply context\nspecific props to a component.\n```jsx\n   <Transition in={this.state.in} timeout={150}>\n       {state => (\n           <MyComponent className={`fade fade-${state}`} />\n       )}\n   </Transition>\n```\nДочерние элементы."
      },
      {
        "name": "nodeRef",
        "type": "Ref<undefined>",
        "required": false,
        "description": "A React reference to DOM element that need to transition: https://stackoverflow.com/a/51127130/4671932\nWhen `nodeRef` prop is used, node is not passed to callback functions (e.g. onEnter) because user already has direct access to the node.\nWhen changing `key` prop of `Transition` in a `TransitionGroup` a new `nodeRef` need to be provided to `Transition` with changed `key`\nprop (@see https://github.com/reactjs/react-transition-group/blob/master/test/Transition-test.js)."
      },
      {
        "name": "invisible",
        "type": "boolean",
        "required": false,
        "defaultValue": false,
        "description": "Прозрачный бэкдроп\n@deprecated данное свойство больше не используется, временно оставлено для обратной совместимости\nИспользуйте свойство transparent"
      },
      {
        "name": "open",
        "type": "boolean",
        "required": false,
        "defaultValue": false,
        "description": "Управляет видимостью компонента"
      },
      {
        "name": "onClose",
        "type": "((event: MouseEvent<HTMLElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика по бэкдропу"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс"
      },
      {
        "name": "transitionClassNames",
        "type": "string | CSSTransitionClassNames",
        "required": false,
        "description": "Классы анимации\n\nhttp://reactcommunity.org/react-transition-group/css-transition#CSSTransition-prop-classNames"
      },
      {
        "name": "dataTestId",
        "type": "string",
        "required": false,
        "description": "Идентификатор для систем автоматизированного тестирования"
      },
      {
        "name": "transparent",
        "type": "boolean",
        "required": false,
        "defaultValue": false,
        "description": "Управляет прозрачностью бэкдроп"
      }
    ]
  }
}