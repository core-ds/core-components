{
  "FilterTag": {
    "description": "",
    "props": [
      {
        "name": "checked",
        "type": "boolean",
        "required": false,
        "description": "Состояние выбора"
      },
      {
        "name": "open",
        "type": "boolean",
        "required": false,
        "description": "Состояние открытия"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "Состояние блокировки"
      },
      {
        "name": "onClick",
        "type": "((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика"
      },
      {
        "name": "onClear",
        "type": "(() => void)",
        "required": false,
        "description": "Обработчик очистки"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "Контент"
      },
      {
        "name": "dataTestId",
        "type": "string",
        "required": false,
        "description": "Идентификатор для систем автоматизированного тестирования"
      },
      {
        "name": "size",
        "type": "\"xxs\" | \"xs\" | \"s\" | 32 | 40 | 48",
        "required": false,
        "description": "Размер компонента\n@description xxs, xs, s deprecated, используйте вместо них 32, 40, 48 соответственно"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс"
      },
      {
        "name": "showClear",
        "type": "boolean",
        "required": false,
        "description": "Показывать крестик для очистки выбора"
      },
      {
        "name": "block",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Растягивает компонент на ширину контейнера"
      },
      {
        "name": "variant",
        "type": "\"default\" | \"alt\"",
        "required": false,
        "description": "@deprecated данный проп больше не используется, временно оставлен для обратной совместимости\nИспользуйте props shape и view\nВариант тега"
      },
      {
        "name": "shape",
        "type": "\"rounded\" | \"rectangular\"",
        "required": false,
        "description": "Форма тега"
      },
      {
        "name": "view",
        "type": "\"outlined\" | \"filled\"",
        "required": false,
        "description": "Стиль тега"
      },
      {
        "name": "colors",
        "type": "\"default\" | \"inverted\"",
        "required": false,
        "defaultValue": "default",
        "description": "Набор цветов для компонента"
      },
      {
        "name": "leftAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот слева"
      },
      {
        "name": "breakpoint",
        "type": "number",
        "required": false,
        "defaultValue": "1024",
        "description": "Контрольная точка, с нее начинается desktop версия"
      },
      {
        "name": "client",
        "type": "\"desktop\" | \"mobile\"",
        "required": false,
        "description": "Версия, которая будет использоваться при серверном рендеринге"
      },
      {
        "name": "defaultMatchMediaValue",
        "type": "boolean | (() => boolean)",
        "required": false,
        "defaultValue": "client === undefined ? undefined : client === 'desktop'",
        "description": "Значение по-умолчанию для хука useMatchMedia\n@deprecated Используйте client"
      },
      {
        "name": "ref",
        "type": "Ref<HTMLDivElement>",
        "required": false,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom"
      },
      {
        "name": "key",
        "type": "Key | null",
        "required": false,
        "description": ""
      }
    ]
  },
  "BaseFilterTag": {
    "description": "",
    "props": [
      {
        "name": "checked",
        "type": "boolean",
        "required": false,
        "description": "Состояние выбора"
      },
      {
        "name": "open",
        "type": "boolean",
        "required": false,
        "description": "Состояние открытия"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "Состояние блокировки"
      },
      {
        "name": "onClick",
        "type": "((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика"
      },
      {
        "name": "onClear",
        "type": "(() => void)",
        "required": false,
        "defaultValue": "() => null",
        "description": "Обработчик очистки"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "Контент"
      },
      {
        "name": "dataTestId",
        "type": "string",
        "required": false,
        "description": "Идентификатор для систем автоматизированного тестирования"
      },
      {
        "name": "size",
        "type": "\"xxs\" | \"xs\" | \"s\" | 32 | 40 | 48",
        "required": false,
        "defaultValue": 48,
        "description": "Размер компонента\n@description xxs, xs, s deprecated, используйте вместо них 32, 40, 48 соответственно"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс"
      },
      {
        "name": "showClear",
        "type": "boolean",
        "required": false,
        "defaultValue": true,
        "description": "Показывать крестик для очистки выбора"
      },
      {
        "name": "block",
        "type": "boolean",
        "required": false,
        "defaultValue": false,
        "description": "Растягивает компонент на ширину контейнера"
      },
      {
        "name": "variant",
        "type": "\"default\" | \"alt\"",
        "required": false,
        "defaultValue": "default",
        "description": "@deprecated данный проп больше не используется, временно оставлен для обратной совместимости\nИспользуйте props shape и view\nВариант тега"
      },
      {
        "name": "shape",
        "type": "\"rounded\" | \"rectangular\"",
        "required": false,
        "description": "Форма тега"
      },
      {
        "name": "view",
        "type": "\"outlined\" | \"filled\"",
        "required": false,
        "defaultValue": "outlined",
        "description": "Стиль тега"
      },
      {
        "name": "colors",
        "type": "\"default\" | \"inverted\"",
        "required": false,
        "defaultValue": "default",
        "description": "Набор цветов для компонента"
      },
      {
        "name": "leftAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот слева"
      },
      {
        "name": "styles",
        "type": "{ [key: string]: string; }",
        "required": false,
        "defaultValue": "{}",
        "description": "Основные стили компонента."
      },
      {
        "name": "colorStylesMap",
        "type": "{ default: { [key: string]: string; }; inverted: { [key: string]: string; }; }",
        "required": false,
        "defaultValue": "{ default: {}, inverted: {} }",
        "description": "Стили компонента для default и inverted режима."
      },
      {
        "name": "ref",
        "type": "Ref<HTMLDivElement>",
        "required": false,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom"
      },
      {
        "name": "key",
        "type": "Key | null",
        "required": false,
        "description": ""
      }
    ]
  },
  "FilterTagDesktop": {
    "description": "",
    "props": [
      {
        "name": "checked",
        "type": "boolean",
        "required": false,
        "description": "Состояние выбора"
      },
      {
        "name": "open",
        "type": "boolean",
        "required": false,
        "description": "Состояние открытия"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "Состояние блокировки"
      },
      {
        "name": "onClick",
        "type": "((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика"
      },
      {
        "name": "onClear",
        "type": "(() => void)",
        "required": false,
        "description": "Обработчик очистки"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "Контент"
      },
      {
        "name": "dataTestId",
        "type": "string",
        "required": false,
        "description": "Идентификатор для систем автоматизированного тестирования"
      },
      {
        "name": "size",
        "type": "\"xxs\" | \"xs\" | \"s\" | 32 | 40 | 48",
        "required": false,
        "description": "Размер компонента\n@description xxs, xs, s deprecated, используйте вместо них 32, 40, 48 соответственно"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс"
      },
      {
        "name": "showClear",
        "type": "boolean",
        "required": false,
        "description": "Показывать крестик для очистки выбора"
      },
      {
        "name": "block",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Растягивает компонент на ширину контейнера"
      },
      {
        "name": "variant",
        "type": "\"default\" | \"alt\"",
        "required": false,
        "description": "@deprecated данный проп больше не используется, временно оставлен для обратной совместимости\nИспользуйте props shape и view\nВариант тега"
      },
      {
        "name": "shape",
        "type": "\"rounded\" | \"rectangular\"",
        "required": false,
        "description": "Форма тега"
      },
      {
        "name": "view",
        "type": "\"outlined\" | \"filled\"",
        "required": false,
        "description": "Стиль тега"
      },
      {
        "name": "colors",
        "type": "\"default\" | \"inverted\"",
        "required": false,
        "defaultValue": "default",
        "description": "Набор цветов для компонента"
      },
      {
        "name": "leftAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот слева"
      },
      {
        "name": "ref",
        "type": "Ref<HTMLDivElement>",
        "required": false,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom"
      },
      {
        "name": "key",
        "type": "Key | null",
        "required": false,
        "description": ""
      }
    ]
  },
  "FilterTagMobile": {
    "description": "",
    "props": [
      {
        "name": "checked",
        "type": "boolean",
        "required": false,
        "description": "Состояние выбора"
      },
      {
        "name": "open",
        "type": "boolean",
        "required": false,
        "description": "Состояние открытия"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "Состояние блокировки"
      },
      {
        "name": "onClick",
        "type": "((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика"
      },
      {
        "name": "onClear",
        "type": "(() => void)",
        "required": false,
        "description": "Обработчик очистки"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "Контент"
      },
      {
        "name": "dataTestId",
        "type": "string",
        "required": false,
        "description": "Идентификатор для систем автоматизированного тестирования"
      },
      {
        "name": "size",
        "type": "\"xxs\" | \"xs\" | \"s\" | 32 | 40 | 48",
        "required": false,
        "description": "Размер компонента\n@description xxs, xs, s deprecated, используйте вместо них 32, 40, 48 соответственно"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс"
      },
      {
        "name": "showClear",
        "type": "boolean",
        "required": false,
        "description": "Показывать крестик для очистки выбора"
      },
      {
        "name": "block",
        "type": "boolean",
        "required": false,
        "defaultValue": "false",
        "description": "Растягивает компонент на ширину контейнера"
      },
      {
        "name": "variant",
        "type": "\"default\" | \"alt\"",
        "required": false,
        "description": "@deprecated данный проп больше не используется, временно оставлен для обратной совместимости\nИспользуйте props shape и view\nВариант тега"
      },
      {
        "name": "shape",
        "type": "\"rounded\" | \"rectangular\"",
        "required": false,
        "description": "Форма тега"
      },
      {
        "name": "view",
        "type": "\"outlined\" | \"filled\"",
        "required": false,
        "description": "Стиль тега"
      },
      {
        "name": "colors",
        "type": "\"default\" | \"inverted\"",
        "required": false,
        "defaultValue": "default",
        "description": "Набор цветов для компонента"
      },
      {
        "name": "leftAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот слева"
      },
      {
        "name": "ref",
        "type": "Ref<HTMLDivElement>",
        "required": false,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom"
      },
      {
        "name": "key",
        "type": "Key | null",
        "required": false,
        "description": ""
      }
    ]
  }
}