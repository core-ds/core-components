{
  "Plate": {
    "description": "",
    "props": [
      {
        "name": "hasCloser",
        "type": "boolean",
        "required": false,
        "description": "Управление наличием закрывающего крестика"
      },
      {
        "name": "foldable",
        "type": "boolean",
        "required": false,
        "description": "Управление наличием стрелки скрытия контента"
      },
      {
        "name": "folded",
        "type": "boolean",
        "required": false,
        "description": "Управление видимостью контента (controlled)"
      },
      {
        "name": "defaultFolded",
        "type": "boolean",
        "required": false,
        "description": "Начальное состояние контента при foldable={ true }"
      },
      {
        "name": "leftAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот слева"
      },
      {
        "name": "subAddons",
        "type": "ReactNode | ReactElement<ButtonProps, string | JSXElementConstructor<any>>[]",
        "required": false,
        "description": "Слот для субаддонов (слева от крестика)"
      },
      {
        "name": "rounded",
        "type": "boolean",
        "required": false,
        "description": "Включить/выключить скругление"
      },
      {
        "name": "border",
        "type": "boolean",
        "required": false,
        "description": "Включить/Выключить обводку"
      },
      {
        "name": "shadow",
        "type": "boolean",
        "required": false,
        "description": "Включить/выключить тени"
      },
      {
        "name": "limitContentWidth",
        "type": "boolean",
        "required": false,
        "description": "Включить/выключить ограничение максимальной ширины контента в 560px"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "Дочерние элементы"
      },
      {
        "name": "title",
        "type": "ReactNode",
        "required": false,
        "description": "Заголовок компонента"
      },
      {
        "name": "titleView",
        "type": "\"bold\" | \"light\"",
        "required": false,
        "description": "Вид заголовка"
      },
      {
        "name": "view",
        "type": "\"common\" | \"negative\" | \"positive\" | \"attention\" | \"custom\"",
        "required": false,
        "description": "Вид компонента"
      },
      {
        "name": "background",
        "type": "string",
        "required": false,
        "description": "Фон компонента при view=custom"
      },
      {
        "name": "borderColor",
        "type": "string",
        "required": false,
        "description": "Цвет бордера у компонента при view=custom"
      },
      {
        "name": "buttons",
        "type": "ReactNode | ReactElement<ButtonProps, string | JSXElementConstructor<any>>[]",
        "required": false,
        "description": "Набор действий"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс"
      },
      {
        "name": "buttonsClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для кнопок"
      },
      {
        "name": "contentClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для контента"
      },
      {
        "name": "subAddonsClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для субаддонов"
      },
      {
        "name": "onClick",
        "type": "((event?: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика по плашке"
      },
      {
        "name": "onClose",
        "type": "((event?: MouseEvent<HTMLButtonElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика по крестику"
      },
      {
        "name": "onToggle",
        "type": "((event: MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent<HTMLElement>, payload: { folded: boolean; }) => void)",
        "required": false,
        "description": "Обработчик сворачивания"
      },
      {
        "name": "dataTestId",
        "type": "string",
        "required": false,
        "description": "Идентификатор для систем автоматизированного тестирования"
      },
      {
        "name": "rowLimit",
        "type": "1 | 2 | 3",
        "required": false,
        "description": "Количество строк"
      },
      {
        "name": "breakpoint",
        "type": "number",
        "required": false,
        "defaultValue": "1024",
        "description": "Контрольная точка, с нее начинается desktop версия"
      },
      {
        "name": "client",
        "type": "\"desktop\" | \"mobile\"",
        "required": false,
        "description": "Версия, которая будет использоваться при серверном рендеринге"
      },
      {
        "name": "defaultMatchMediaValue",
        "type": "boolean | (() => boolean)",
        "required": false,
        "defaultValue": "client === undefined ? undefined : client === 'desktop'",
        "description": "Значение по-умолчанию для хука useMatchMedia\n@deprecated Используйте client"
      },
      {
        "name": "ref",
        "type": "Ref<HTMLDivElement>",
        "required": false,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom"
      },
      {
        "name": "key",
        "type": "Key | null",
        "required": false,
        "description": ""
      }
    ]
  },
  "BasePlate": {
    "description": "",
    "props": [
      {
        "name": "hasCloser",
        "type": "boolean",
        "required": false,
        "description": "Управление наличием закрывающего крестика"
      },
      {
        "name": "foldable",
        "type": "boolean",
        "required": false,
        "description": "Управление наличием стрелки скрытия контента"
      },
      {
        "name": "folded",
        "type": "boolean",
        "required": false,
        "description": "Управление видимостью контента (controlled)"
      },
      {
        "name": "defaultFolded",
        "type": "boolean",
        "required": false,
        "defaultValue": true,
        "description": "Начальное состояние контента при foldable={ true }"
      },
      {
        "name": "leftAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот слева"
      },
      {
        "name": "subAddons",
        "type": "ReactNode | ReactElement<ButtonProps, string | JSXElementConstructor<any>>[]",
        "required": false,
        "description": "Слот для субаддонов (слева от крестика)"
      },
      {
        "name": "rounded",
        "type": "boolean",
        "required": false,
        "defaultValue": true,
        "description": "Включить/выключить скругление"
      },
      {
        "name": "border",
        "type": "boolean",
        "required": false,
        "defaultValue": "view !== 'custom'",
        "description": "Включить/Выключить обводку"
      },
      {
        "name": "shadow",
        "type": "boolean",
        "required": false,
        "defaultValue": "view === 'custom'",
        "description": "Включить/выключить тени"
      },
      {
        "name": "limitContentWidth",
        "type": "boolean",
        "required": false,
        "defaultValue": true,
        "description": "Включить/выключить ограничение максимальной ширины контента в 560px"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "Дочерние элементы"
      },
      {
        "name": "title",
        "type": "ReactNode",
        "required": false,
        "description": "Заголовок компонента"
      },
      {
        "name": "titleView",
        "type": "\"bold\" | \"light\"",
        "required": false,
        "defaultValue": "bold",
        "description": "Вид заголовка"
      },
      {
        "name": "view",
        "type": "\"common\" | \"negative\" | \"positive\" | \"attention\" | \"custom\"",
        "required": false,
        "defaultValue": "common",
        "description": "Вид компонента"
      },
      {
        "name": "background",
        "type": "string",
        "required": false,
        "description": "Фон компонента при view=custom"
      },
      {
        "name": "borderColor",
        "type": "string",
        "required": false,
        "description": "Цвет бордера у компонента при view=custom"
      },
      {
        "name": "buttons",
        "type": "ReactNode | ReactElement<ButtonProps, string | JSXElementConstructor<any>>[]",
        "required": false,
        "description": "Набор действий"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс"
      },
      {
        "name": "buttonsClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для кнопок"
      },
      {
        "name": "contentClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для контента"
      },
      {
        "name": "subAddonsClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для субаддонов"
      },
      {
        "name": "onClick",
        "type": "((event?: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика по плашке"
      },
      {
        "name": "onClose",
        "type": "((event?: MouseEvent<HTMLButtonElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика по крестику"
      },
      {
        "name": "onToggle",
        "type": "((event: MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent<HTMLElement>, payload: { folded: boolean; }) => void)",
        "required": false,
        "description": "Обработчик сворачивания"
      },
      {
        "name": "dataTestId",
        "type": "string",
        "required": false,
        "description": "Идентификатор для систем автоматизированного тестирования"
      },
      {
        "name": "rowLimit",
        "type": "1 | 2 | 3",
        "required": false,
        "description": "Количество строк"
      },
      {
        "name": "styles",
        "type": "{ [key: string]: string; }",
        "required": false,
        "defaultValue": "{}",
        "description": "Основные стили компонента."
      },
      {
        "name": "ref",
        "type": "Ref<HTMLDivElement>",
        "required": false,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom"
      },
      {
        "name": "key",
        "type": "Key | null",
        "required": false,
        "description": ""
      }
    ]
  },
  "ButtonList": {
    "description": "",
    "props": [
      {
        "name": "buttons",
        "type": "ReactNode",
        "required": true,
        "description": "Кнопки для рендера"
      },
      {
        "name": "containerClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для контейнера"
      },
      {
        "name": "buttonClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для кнопок"
      }
    ]
  },
  "PlateDesktop": {
    "description": "",
    "props": [
      {
        "name": "hasCloser",
        "type": "boolean",
        "required": false,
        "description": "Управление наличием закрывающего крестика"
      },
      {
        "name": "foldable",
        "type": "boolean",
        "required": false,
        "description": "Управление наличием стрелки скрытия контента"
      },
      {
        "name": "folded",
        "type": "boolean",
        "required": false,
        "description": "Управление видимостью контента (controlled)"
      },
      {
        "name": "defaultFolded",
        "type": "boolean",
        "required": false,
        "description": "Начальное состояние контента при foldable={ true }"
      },
      {
        "name": "leftAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот слева"
      },
      {
        "name": "subAddons",
        "type": "ReactNode | ReactElement<ButtonProps, string | JSXElementConstructor<any>>[]",
        "required": false,
        "description": "Слот для субаддонов (слева от крестика)"
      },
      {
        "name": "rounded",
        "type": "boolean",
        "required": false,
        "description": "Включить/выключить скругление"
      },
      {
        "name": "border",
        "type": "boolean",
        "required": false,
        "description": "Включить/Выключить обводку"
      },
      {
        "name": "shadow",
        "type": "boolean",
        "required": false,
        "description": "Включить/выключить тени"
      },
      {
        "name": "limitContentWidth",
        "type": "boolean",
        "required": false,
        "description": "Включить/выключить ограничение максимальной ширины контента в 560px"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "Дочерние элементы"
      },
      {
        "name": "title",
        "type": "ReactNode",
        "required": false,
        "description": "Заголовок компонента"
      },
      {
        "name": "titleView",
        "type": "\"bold\" | \"light\"",
        "required": false,
        "description": "Вид заголовка"
      },
      {
        "name": "view",
        "type": "\"common\" | \"negative\" | \"positive\" | \"attention\" | \"custom\"",
        "required": false,
        "description": "Вид компонента"
      },
      {
        "name": "background",
        "type": "string",
        "required": false,
        "description": "Фон компонента при view=custom"
      },
      {
        "name": "borderColor",
        "type": "string",
        "required": false,
        "description": "Цвет бордера у компонента при view=custom"
      },
      {
        "name": "buttons",
        "type": "ReactNode | ReactElement<ButtonProps, string | JSXElementConstructor<any>>[]",
        "required": false,
        "description": "Набор действий"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс"
      },
      {
        "name": "buttonsClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для кнопок"
      },
      {
        "name": "contentClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для контента"
      },
      {
        "name": "subAddonsClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для субаддонов"
      },
      {
        "name": "onClick",
        "type": "((event?: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика по плашке"
      },
      {
        "name": "onClose",
        "type": "((event?: MouseEvent<HTMLButtonElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика по крестику"
      },
      {
        "name": "onToggle",
        "type": "((event: MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent<HTMLElement>, payload: { folded: boolean; }) => void)",
        "required": false,
        "description": "Обработчик сворачивания"
      },
      {
        "name": "dataTestId",
        "type": "string",
        "required": false,
        "description": "Идентификатор для систем автоматизированного тестирования"
      },
      {
        "name": "rowLimit",
        "type": "1 | 2 | 3",
        "required": false,
        "description": "Количество строк"
      },
      {
        "name": "ref",
        "type": "Ref<HTMLDivElement>",
        "required": false,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom"
      },
      {
        "name": "key",
        "type": "Key | null",
        "required": false,
        "description": ""
      }
    ]
  },
  "PlateMobile": {
    "description": "",
    "props": [
      {
        "name": "hasCloser",
        "type": "boolean",
        "required": false,
        "description": "Управление наличием закрывающего крестика"
      },
      {
        "name": "foldable",
        "type": "boolean",
        "required": false,
        "description": "Управление наличием стрелки скрытия контента"
      },
      {
        "name": "folded",
        "type": "boolean",
        "required": false,
        "description": "Управление видимостью контента (controlled)"
      },
      {
        "name": "defaultFolded",
        "type": "boolean",
        "required": false,
        "description": "Начальное состояние контента при foldable={ true }"
      },
      {
        "name": "leftAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот слева"
      },
      {
        "name": "subAddons",
        "type": "ReactNode | ReactElement<ButtonProps, string | JSXElementConstructor<any>>[]",
        "required": false,
        "description": "Слот для субаддонов (слева от крестика)"
      },
      {
        "name": "rounded",
        "type": "boolean",
        "required": false,
        "description": "Включить/выключить скругление"
      },
      {
        "name": "border",
        "type": "boolean",
        "required": false,
        "description": "Включить/Выключить обводку"
      },
      {
        "name": "shadow",
        "type": "boolean",
        "required": false,
        "description": "Включить/выключить тени"
      },
      {
        "name": "children",
        "type": "ReactNode",
        "required": false,
        "description": "Дочерние элементы"
      },
      {
        "name": "title",
        "type": "ReactNode",
        "required": false,
        "description": "Заголовок компонента"
      },
      {
        "name": "titleView",
        "type": "\"bold\" | \"light\"",
        "required": false,
        "description": "Вид заголовка"
      },
      {
        "name": "view",
        "type": "\"common\" | \"negative\" | \"positive\" | \"attention\" | \"custom\"",
        "required": false,
        "description": "Вид компонента"
      },
      {
        "name": "background",
        "type": "string",
        "required": false,
        "description": "Фон компонента при view=custom"
      },
      {
        "name": "borderColor",
        "type": "string",
        "required": false,
        "description": "Цвет бордера у компонента при view=custom"
      },
      {
        "name": "buttons",
        "type": "ReactNode | ReactElement<ButtonProps, string | JSXElementConstructor<any>>[]",
        "required": false,
        "description": "Набор действий"
      },
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс"
      },
      {
        "name": "buttonsClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для кнопок"
      },
      {
        "name": "contentClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для контента"
      },
      {
        "name": "subAddonsClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для субаддонов"
      },
      {
        "name": "onClick",
        "type": "((event?: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика по плашке"
      },
      {
        "name": "onClose",
        "type": "((event?: MouseEvent<HTMLButtonElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика по крестику"
      },
      {
        "name": "onToggle",
        "type": "((event: MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent<HTMLElement>, payload: { folded: boolean; }) => void)",
        "required": false,
        "description": "Обработчик сворачивания"
      },
      {
        "name": "dataTestId",
        "type": "string",
        "required": false,
        "description": "Идентификатор для систем автоматизированного тестирования"
      },
      {
        "name": "rowLimit",
        "type": "1 | 2 | 3",
        "required": false,
        "description": "Количество строк"
      },
      {
        "name": "ref",
        "type": "Ref<HTMLDivElement>",
        "required": false,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom"
      },
      {
        "name": "key",
        "type": "Key | null",
        "required": false,
        "description": ""
      }
    ]
  }
}