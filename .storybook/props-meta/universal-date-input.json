{
  "UniversalDateInput": {
    "description": "",
    "props": [
      {
        "name": "size",
        "type": "\"s\" | \"m\" | \"l\" | \"xl\" | 40 | 48 | 56 | 64 | 72",
        "required": false,
        "description": "Размер компонента\n@description s, m, l, xl deprecated, используйте вместо них 48, 56, 64, 72 соответственно"
      },
      {
        "name": "type",
        "type": "\"number\" | \"email\" | \"money\" | \"password\" | \"tel\" | \"text\"",
        "required": false,
        "description": "Атрибут type"
      },
      {
        "name": "onClick",
        "type": "((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика по полю"
      },
      {
        "name": "onMouseDown",
        "type": "((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик MouseDown по полю"
      },
      {
        "name": "accept",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "alt",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "autoComplete",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "capture",
        "type": "boolean | \"user\" | \"environment\"",
        "required": false,
        "description": ""
      },
      {
        "name": "checked",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "crossOrigin",
        "type": "\"\" | \"anonymous\" | \"use-credentials\"",
        "required": false,
        "description": ""
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "form",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formAction",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formEncType",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formMethod",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formNoValidate",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "formTarget",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "height",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "list",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "max",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "maxLength",
        "type": "number",
        "required": false,
        "description": ""
      },
      {
        "name": "min",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "minLength",
        "type": "number",
        "required": false,
        "description": ""
      },
      {
        "name": "multiple",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "name",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "pattern",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "placeholder",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "readOnly",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "required",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "src",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "step",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "block",
        "type": "boolean",
        "required": false,
        "description": "Растягивает компонент на ширину контейнера"
      },
      {
        "name": "clear",
        "type": "boolean",
        "required": false,
        "description": "Крестик для очистки поля"
      },
      {
        "name": "colors",
        "type": "\"default\" | \"inverted\"",
        "required": false,
        "description": "Набор цветов для компонента"
      },
      {
        "name": "error",
        "type": "ReactNode",
        "required": false,
        "description": "Отображение ошибки"
      },
      {
        "name": "success",
        "type": "boolean",
        "required": false,
        "description": "Отображение иконки успеха"
      },
      {
        "name": "hint",
        "type": "ReactNode",
        "required": false,
        "description": "Текст подсказки"
      },
      {
        "name": "label",
        "type": "ReactNode",
        "required": false,
        "description": "Лейбл компонента"
      },
      {
        "name": "labelView",
        "type": "\"inner\" | \"outer\"",
        "required": false,
        "description": "Вид лейбла внутри / снаружи"
      },
      {
        "name": "leftAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот слева"
      },
      {
        "name": "rightAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот справа"
      },
      {
        "name": "leftAddonsProps",
        "type": "HTMLAttributes<HTMLDivElement>",
        "required": false,
        "description": "Свойства для обертки левых аддонов"
      },
      {
        "name": "rightAddonsProps",
        "type": "HTMLAttributes<HTMLDivElement>",
        "required": false,
        "description": "Свойства для обертки правых аддонов"
      },
      {
        "name": "bottomAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот под инпутом"
      },
      {
        "name": "fieldClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для поля"
      },
      {
        "name": "inputClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс инпута"
      },
      {
        "name": "labelClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для лейбла"
      },
      {
        "name": "addonsClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для аддонов"
      },
      {
        "name": "focusedClassName",
        "type": "string",
        "required": false,
        "description": "Класс, который будет установлен при фокусе"
      },
      {
        "name": "filledClassName",
        "type": "string",
        "required": false,
        "description": "Класс, который будет установлен, если в поле есть значение"
      },
      {
        "name": "onClear",
        "type": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик нажатия на кнопку очистки"
      },
      {
        "name": "dataTestId",
        "type": "string",
        "required": false,
        "description": "Идентификатор для систем автоматизированного тестирования.\nДля враппера используется модификатор -wrapper, календаря -calendar, поповера -popover"
      },
      {
        "name": "disableUserInput",
        "type": "boolean",
        "required": false,
        "description": "Запрещает ввод с клавиатуры"
      },
      {
        "name": "breakpoint",
        "type": "number",
        "required": false,
        "defaultValue": "1024",
        "description": "Контрольная точка, с нее начинается desktop версия"
      },
      {
        "name": "client",
        "type": "\"desktop\" | \"mobile\"",
        "required": false,
        "description": "Версия, которая будет использоваться при серверном рендеринге"
      },
      {
        "name": "defaultMatchMediaValue",
        "type": "boolean | (() => boolean)",
        "required": false,
        "defaultValue": "client === undefined ? undefined : client === 'desktop'",
        "description": "Значение по-умолчанию для хука useMatchMedia\n@deprecated Используйте client"
      },
      {
        "name": "autoCorrection",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "Автоматическое исправление ввода"
      },
      {
        "name": "minDate",
        "type": "number",
        "required": false,
        "description": "Минимальная дата, доступная для выбора (timestamp)"
      },
      {
        "name": "maxDate",
        "type": "number",
        "required": false,
        "description": "Максимальная дата, доступная для выбора (timestamp)"
      },
      {
        "name": "view",
        "type": "\"date\" | \"date-time\" | \"date-range\" | \"time\"",
        "required": true,
        "description": "Вид компонента"
      },
      {
        "name": "picker",
        "type": "boolean",
        "required": false,
        "description": "Открыть календарь при клике"
      },
      {
        "name": "onInputChange",
        "type": "((event: ChangeEvent<HTMLInputElement> | null, payload: { value: string; }) => void)",
        "required": false,
        "description": "Обработчик изменения значения в инпуте"
      },
      {
        "name": "Calendar",
        "type": "ForwardRefExoticComponent<CalendarDesktopProps & { title?: string; open: boolean; onClose?: (() => void); allowSelectionFromEmptyRange?: boolean | undefined; ... 5 more ...; resetButtonContent?: string | undefined; } & ... 5 more ... & RefAttributes<...>> | undefined",
        "required": false,
        "description": "Компонент календаря"
      },
      {
        "name": "calendarProps",
        "type": "Omit<ResponsiveCalendarProps, \"open\" | \"minDate\" | \"maxDate\" | \"onClose\">",
        "required": false,
        "description": "Пропсы календаря"
      },
      {
        "name": "popoverProps",
        "type": "PopoverProps",
        "required": false,
        "description": "Пропсы поповера"
      },
      {
        "name": "onCalendarOpen",
        "type": "(() => void)",
        "required": false,
        "description": "Обработчик открытия календаря\n@deprecated Используйте {@link BaseUniversalDateInputProps.onCalendarOpenChange }"
      },
      {
        "name": "onCalendarClose",
        "type": "(() => void)",
        "required": false,
        "description": "Обработчик закрытия календаря\n@deprecated Используйте {@link BaseUniversalDateInputProps.onCalendarOpenChange }"
      },
      {
        "name": "calendarOpen",
        "type": "boolean",
        "required": false,
        "description": "Флаг, открыт ли календарь"
      },
      {
        "name": "onCalendarOpenChange",
        "type": "((open: boolean) => void)",
        "required": false,
        "description": "Обработчик изменения открытия календаря"
      },
      {
        "name": "value",
        "type": "string | number | Date | { dateFrom: number | Date | null; dateTo: number | Date | null; } | null",
        "required": false,
        "description": "Дата\nДиапазон дат\nВремя"
      },
      {
        "name": "defaultValue",
        "type": "string | number | Date | { dateFrom: number | Date; dateTo: number | Date; }",
        "required": false,
        "description": "Дата по умолчанию\nДиапазон дат по умолчанию\nВремя по умолчанию"
      },
      {
        "name": "onChange",
        "type": "((date: Date | null, value: string) => void) | ((range: { dateFrom: Date | null; dateTo: Date | null; }, value: string) => void) | ((value: string) => void)",
        "required": false,
        "description": "Обработчик изменения значения"
      },
      {
        "name": "wrapperClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс обертки"
      },
      {
        "name": "ref",
        "type": "Ref<HTMLInputElement>",
        "required": false,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom"
      },
      {
        "name": "key",
        "type": "Key | null",
        "required": false,
        "description": ""
      },
      {
        "name": "rangeBehavior",
        "type": "\"clarification\" | \"reset\"",
        "required": false,
        "defaultValue": "clarification",
        "description": "Тип выбора границ в календаре"
      }
    ]
  },
  "BaseUniversalDateInput": {
    "description": "",
    "props": [
      {
        "name": "autoCorrection",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "Автоматическое исправление ввода"
      },
      {
        "name": "minDate",
        "type": "number",
        "required": false,
        "description": "Минимальная дата, доступная для выбора (timestamp)"
      },
      {
        "name": "maxDate",
        "type": "number",
        "required": false,
        "description": "Максимальная дата, доступная для выбора (timestamp)"
      },
      {
        "name": "view",
        "type": "View",
        "required": true,
        "description": "Вид компонента"
      },
      {
        "name": "platform",
        "type": "\"desktop\" | \"mobile\"",
        "required": true,
        "description": "Мобильный или десктопный вид компонента"
      },
      {
        "name": "picker",
        "type": "boolean",
        "required": false,
        "description": "Открыть календарь при клике"
      },
      {
        "name": "Calendar",
        "type": "ForwardRefExoticComponent<CalendarDesktopProps & { title?: string; open: boolean; onClose?: (() => void); allowSelectionFromEmptyRange?: boolean | undefined; ... 5 more ...; resetButtonContent?: string | undefined; } & ... 5 more ... & RefAttributes<...>> | undefined",
        "required": false,
        "description": "Компонент календаря"
      },
      {
        "name": "calendarProps",
        "type": "Omit<ResponsiveCalendarProps, \"open\" | \"minDate\" | \"maxDate\" | \"onClose\">",
        "required": false,
        "description": "Пропсы календаря"
      },
      {
        "name": "popoverProps",
        "type": "PopoverProps",
        "required": false,
        "description": "Пропсы поповера"
      },
      {
        "name": "inputWrapperRef",
        "type": "Ref<HTMLDivElement>",
        "required": false,
        "description": "Ref для обертки input"
      },
      {
        "name": "calendarOpen",
        "type": "boolean",
        "required": false,
        "description": "Флаг, открыт ли календарь"
      },
      {
        "name": "onCalendarOpenChange",
        "type": "((open: boolean) => void)",
        "required": false,
        "description": "Обработчик изменения открытия календаря"
      },
      {
        "name": "onCalendarOpen",
        "type": "(() => void)",
        "required": false,
        "description": "Обработчик открытия календаря\n@deprecated Используйте {@link BaseUniversalDateInputProps.onCalendarOpenChange }"
      },
      {
        "name": "onCalendarClose",
        "type": "(() => void)",
        "required": false,
        "description": "Обработчик закрытия календаря\n@deprecated Используйте {@link BaseUniversalDateInputProps.onCalendarOpenChange }"
      },
      {
        "name": "onPickerClick",
        "type": "((event: MouseEvent<Element, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика на иконку календаря"
      },
      {
        "name": "onInputChange",
        "type": "((event: ChangeEvent<HTMLInputElement> | null, payload: { value: string; }) => void)",
        "required": false,
        "description": "Обработчик изменения значения в инпуте"
      },
      {
        "name": "dataTestId",
        "type": "string",
        "required": false,
        "description": "Идентификатор для систем автоматизированного тестирования.\nДля враппера используется модификатор -wrapper, календаря -calendar, поповера -popover"
      },
      {
        "name": "size",
        "type": "\"s\" | \"m\" | \"l\" | \"xl\" | 40 | 48 | 56 | 64 | 72",
        "required": false,
        "description": "Размер компонента\n@description s, m, l, xl deprecated, используйте вместо них 48, 56, 64, 72 соответственно"
      },
      {
        "name": "type",
        "type": "\"number\" | \"email\" | \"money\" | \"password\" | \"tel\" | \"text\"",
        "required": false,
        "description": "Атрибут type"
      },
      {
        "name": "onClick",
        "type": "((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика по полю"
      },
      {
        "name": "onMouseDown",
        "type": "((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик MouseDown по полю"
      },
      {
        "name": "accept",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "alt",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "autoComplete",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "capture",
        "type": "boolean | \"user\" | \"environment\"",
        "required": false,
        "description": ""
      },
      {
        "name": "checked",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "crossOrigin",
        "type": "\"\" | \"anonymous\" | \"use-credentials\"",
        "required": false,
        "description": ""
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "form",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formAction",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formEncType",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formMethod",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formNoValidate",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "formTarget",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "height",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "list",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "max",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "maxLength",
        "type": "number",
        "required": false,
        "description": ""
      },
      {
        "name": "min",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "minLength",
        "type": "number",
        "required": false,
        "description": ""
      },
      {
        "name": "multiple",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "name",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "pattern",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "placeholder",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "readOnly",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "required",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "src",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "step",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "block",
        "type": "boolean",
        "required": false,
        "description": "Растягивает компонент на ширину контейнера"
      },
      {
        "name": "clear",
        "type": "boolean",
        "required": false,
        "description": "Крестик для очистки поля"
      },
      {
        "name": "colors",
        "type": "\"default\" | \"inverted\"",
        "required": false,
        "description": "Набор цветов для компонента"
      },
      {
        "name": "error",
        "type": "ReactNode",
        "required": false,
        "description": "Отображение ошибки"
      },
      {
        "name": "success",
        "type": "boolean",
        "required": false,
        "description": "Отображение иконки успеха"
      },
      {
        "name": "hint",
        "type": "ReactNode",
        "required": false,
        "description": "Текст подсказки"
      },
      {
        "name": "label",
        "type": "ReactNode",
        "required": false,
        "description": "Лейбл компонента"
      },
      {
        "name": "labelView",
        "type": "\"inner\" | \"outer\"",
        "required": false,
        "description": "Вид лейбла внутри / снаружи"
      },
      {
        "name": "leftAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот слева"
      },
      {
        "name": "rightAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот справа"
      },
      {
        "name": "leftAddonsProps",
        "type": "HTMLAttributes<HTMLDivElement>",
        "required": false,
        "description": "Свойства для обертки левых аддонов"
      },
      {
        "name": "rightAddonsProps",
        "type": "HTMLAttributes<HTMLDivElement>",
        "required": false,
        "description": "Свойства для обертки правых аддонов"
      },
      {
        "name": "bottomAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот под инпутом"
      },
      {
        "name": "fieldClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для поля"
      },
      {
        "name": "inputClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс инпута"
      },
      {
        "name": "labelClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для лейбла"
      },
      {
        "name": "addonsClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для аддонов"
      },
      {
        "name": "focusedClassName",
        "type": "string",
        "required": false,
        "description": "Класс, который будет установлен при фокусе"
      },
      {
        "name": "filledClassName",
        "type": "string",
        "required": false,
        "description": "Класс, который будет установлен, если в поле есть значение"
      },
      {
        "name": "onClear",
        "type": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик нажатия на кнопку очистки"
      },
      {
        "name": "disableUserInput",
        "type": "boolean",
        "required": false,
        "description": "Запрещает ввод с клавиатуры"
      },
      {
        "name": "breakpoint",
        "type": "number",
        "required": false,
        "defaultValue": "1024",
        "description": "Контрольная точка, с нее начинается desktop версия"
      },
      {
        "name": "client",
        "type": "\"desktop\" | \"mobile\"",
        "required": false,
        "description": "Версия, которая будет использоваться при серверном рендеринге"
      },
      {
        "name": "defaultMatchMediaValue",
        "type": "boolean | (() => boolean)",
        "required": false,
        "description": "Значение по-умолчанию для хука useMatchMedia\n@deprecated Используйте client"
      },
      {
        "name": "ref",
        "type": "Ref<HTMLInputElement>",
        "required": false,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom"
      },
      {
        "name": "key",
        "type": "Key | null",
        "required": false,
        "description": ""
      }
    ]
  },
  "DateInput": {
    "description": "",
    "props": [
      {
        "name": "value",
        "type": "string | number | Date | null",
        "required": false,
        "description": "Дата"
      },
      {
        "name": "defaultValue",
        "type": "string | number | Date",
        "required": false,
        "description": "Дата по умолчанию"
      },
      {
        "name": "open",
        "type": "boolean",
        "required": true,
        "description": "Флаг, открыт ли календарь"
      },
      {
        "name": "wrapperClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс обертки"
      },
      {
        "name": "withTime",
        "type": "boolean",
        "required": false,
        "description": "Дата со временем"
      },
      {
        "name": "calendarRef",
        "type": "RefObject<HTMLDivElement>",
        "required": true,
        "description": "Реф календаря"
      },
      {
        "name": "wrapperHandlers",
        "type": "{ onClick?: ((e: MouseEvent<HTMLDivElement, MouseEvent>) => void); onFocus?: ((e: FocusEvent<HTMLDivElement, Element>) => void); onBlur: (e: FocusEvent<...>) => void; onKeyDown?: ((e: KeyboardEvent<...>) => void) | undefined; } | undefined",
        "required": false,
        "description": "Обработчики на враппер"
      },
      {
        "name": "onChange",
        "type": "((date: Date | null, value: string) => void)",
        "required": false,
        "description": "Обработчик изменения значения"
      },
      {
        "name": "platform",
        "type": "\"desktop\" | \"mobile\"",
        "required": true,
        "description": "Мобильный или десктопный вид компонента"
      },
      {
        "name": "inputWrapperRef",
        "type": "Ref<HTMLDivElement>",
        "required": false,
        "description": "Ref для обертки input"
      },
      {
        "name": "onPickerClick",
        "type": "((event: MouseEvent<Element, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика на иконку календаря"
      },
      {
        "name": "Calendar",
        "type": "ForwardRefExoticComponent<CalendarDesktopProps & { title?: string; open: boolean; onClose?: (() => void); allowSelectionFromEmptyRange?: boolean | undefined; ... 5 more ...; resetButtonContent?: string | undefined; } & ... 5 more ... & RefAttributes<...>> | undefined",
        "required": false,
        "description": "Компонент календаря"
      },
      {
        "name": "calendarProps",
        "type": "Omit<ResponsiveCalendarProps, \"open\" | \"minDate\" | \"maxDate\" | \"onClose\">",
        "required": false,
        "defaultValue": "{}",
        "description": "Пропсы календаря"
      },
      {
        "name": "popoverProps",
        "type": "PopoverProps",
        "required": false,
        "description": "Пропсы поповера"
      },
      {
        "name": "onCalendarOpen",
        "type": "(() => void)",
        "required": false,
        "description": "Обработчик открытия календаря\n@deprecated Используйте {@link BaseUniversalDateInputProps.onCalendarOpenChange }"
      },
      {
        "name": "onCalendarClose",
        "type": "(() => void)",
        "required": false,
        "description": "Обработчик закрытия календаря\n@deprecated Используйте {@link BaseUniversalDateInputProps.onCalendarOpenChange }"
      },
      {
        "name": "calendarOpen",
        "type": "boolean",
        "required": false,
        "description": "Флаг, открыт ли календарь"
      },
      {
        "name": "onCalendarOpenChange",
        "type": "((open: boolean) => void)",
        "required": false,
        "description": "Обработчик изменения открытия календаря"
      },
      {
        "name": "size",
        "type": "\"s\" | \"m\" | \"l\" | \"xl\" | 40 | 48 | 56 | 64 | 72",
        "required": false,
        "description": "Размер компонента\n@description s, m, l, xl deprecated, используйте вместо них 48, 56, 64, 72 соответственно"
      },
      {
        "name": "type",
        "type": "\"number\" | \"email\" | \"money\" | \"password\" | \"tel\" | \"text\"",
        "required": false,
        "description": "Атрибут type"
      },
      {
        "name": "onClick",
        "type": "((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика по полю"
      },
      {
        "name": "onMouseDown",
        "type": "((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик MouseDown по полю"
      },
      {
        "name": "accept",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "alt",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "autoComplete",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "capture",
        "type": "boolean | \"user\" | \"environment\"",
        "required": false,
        "description": ""
      },
      {
        "name": "checked",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "crossOrigin",
        "type": "\"\" | \"anonymous\" | \"use-credentials\"",
        "required": false,
        "description": ""
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "form",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formAction",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formEncType",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formMethod",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formNoValidate",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "formTarget",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "height",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "list",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "max",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "maxLength",
        "type": "number",
        "required": false,
        "description": ""
      },
      {
        "name": "min",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "minLength",
        "type": "number",
        "required": false,
        "description": ""
      },
      {
        "name": "multiple",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "name",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "pattern",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "placeholder",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "readOnly",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "required",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "src",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "step",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "block",
        "type": "boolean",
        "required": false,
        "description": "Растягивает компонент на ширину контейнера"
      },
      {
        "name": "clear",
        "type": "boolean",
        "required": false,
        "description": "Крестик для очистки поля"
      },
      {
        "name": "colors",
        "type": "\"default\" | \"inverted\"",
        "required": false,
        "description": "Набор цветов для компонента"
      },
      {
        "name": "error",
        "type": "ReactNode",
        "required": false,
        "description": "Отображение ошибки"
      },
      {
        "name": "success",
        "type": "boolean",
        "required": false,
        "description": "Отображение иконки успеха"
      },
      {
        "name": "hint",
        "type": "ReactNode",
        "required": false,
        "description": "Текст подсказки"
      },
      {
        "name": "label",
        "type": "ReactNode",
        "required": false,
        "description": "Лейбл компонента"
      },
      {
        "name": "labelView",
        "type": "\"inner\" | \"outer\"",
        "required": false,
        "description": "Вид лейбла внутри / снаружи"
      },
      {
        "name": "leftAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот слева"
      },
      {
        "name": "rightAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот справа"
      },
      {
        "name": "leftAddonsProps",
        "type": "HTMLAttributes<HTMLDivElement>",
        "required": false,
        "description": "Свойства для обертки левых аддонов"
      },
      {
        "name": "rightAddonsProps",
        "type": "HTMLAttributes<HTMLDivElement>",
        "required": false,
        "description": "Свойства для обертки правых аддонов"
      },
      {
        "name": "bottomAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот под инпутом"
      },
      {
        "name": "fieldClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для поля"
      },
      {
        "name": "inputClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс инпута"
      },
      {
        "name": "labelClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для лейбла"
      },
      {
        "name": "addonsClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для аддонов"
      },
      {
        "name": "focusedClassName",
        "type": "string",
        "required": false,
        "description": "Класс, который будет установлен при фокусе"
      },
      {
        "name": "filledClassName",
        "type": "string",
        "required": false,
        "description": "Класс, который будет установлен, если в поле есть значение"
      },
      {
        "name": "onClear",
        "type": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик нажатия на кнопку очистки"
      },
      {
        "name": "dataTestId",
        "type": "string",
        "required": false,
        "description": "Идентификатор для систем автоматизированного тестирования.\nДля враппера используется модификатор -wrapper, календаря -calendar, поповера -popover"
      },
      {
        "name": "disableUserInput",
        "type": "boolean",
        "required": false,
        "description": "Запрещает ввод с клавиатуры"
      },
      {
        "name": "breakpoint",
        "type": "number",
        "required": false,
        "defaultValue": "1024",
        "description": "Контрольная точка, с нее начинается desktop версия"
      },
      {
        "name": "client",
        "type": "\"desktop\" | \"mobile\"",
        "required": false,
        "description": "Версия, которая будет использоваться при серверном рендеринге"
      },
      {
        "name": "defaultMatchMediaValue",
        "type": "boolean | (() => boolean)",
        "required": false,
        "description": "Значение по-умолчанию для хука useMatchMedia\n@deprecated Используйте client"
      },
      {
        "name": "autoCorrection",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "Автоматическое исправление ввода"
      },
      {
        "name": "minDate",
        "type": "number",
        "required": false,
        "defaultValue": "new Date(1900, 0, 1).getTime()",
        "description": "Минимальная дата, доступная для выбора (timestamp)"
      },
      {
        "name": "maxDate",
        "type": "number",
        "required": false,
        "defaultValue": "new Date(2124, 11, 31).getTime()",
        "description": "Максимальная дата, доступная для выбора (timestamp)"
      },
      {
        "name": "picker",
        "type": "boolean",
        "required": false,
        "description": "Открыть календарь при клике"
      },
      {
        "name": "onInputChange",
        "type": "((event: ChangeEvent<HTMLInputElement> | null, payload: { value: string; }) => void)",
        "required": false,
        "description": "Обработчик изменения значения в инпуте"
      },
      {
        "name": "ref",
        "type": "Ref<HTMLInputElement>",
        "required": false,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom"
      },
      {
        "name": "key",
        "type": "Key | null",
        "required": false,
        "description": ""
      }
    ]
  },
  "DateRangeInput": {
    "description": "",
    "props": [
      {
        "name": "value",
        "type": "{ dateFrom: number | Date | null; dateTo: number | Date | null; }",
        "required": false,
        "description": "Диапазон дат"
      },
      {
        "name": "defaultValue",
        "type": "{ dateFrom: number | Date; dateTo: number | Date; }",
        "required": false,
        "description": "Диапазон дат по умолчанию"
      },
      {
        "name": "rangeBehavior",
        "type": "\"clarification\" | \"reset\"",
        "required": false,
        "defaultValue": "clarification",
        "description": "Тип выбора границ в календаре"
      },
      {
        "name": "onChange",
        "type": "((range: { dateFrom: Date | null; dateTo: Date | null; }, value: string) => void)",
        "required": false,
        "description": "Обработчик изменения значения"
      },
      {
        "name": "platform",
        "type": "\"desktop\" | \"mobile\"",
        "required": true,
        "description": "Мобильный или десктопный вид компонента"
      },
      {
        "name": "withTime",
        "type": "boolean",
        "required": false,
        "description": "Дата со временем"
      },
      {
        "name": "open",
        "type": "boolean",
        "required": true,
        "description": "Флаг, открыт ли календарь"
      },
      {
        "name": "calendarRef",
        "type": "RefObject<HTMLDivElement>",
        "required": true,
        "description": "Реф календаря"
      },
      {
        "name": "inputWrapperRef",
        "type": "Ref<HTMLDivElement>",
        "required": false,
        "description": "Ref для обертки input"
      },
      {
        "name": "wrapperHandlers",
        "type": "{ onClick?: ((e: MouseEvent<HTMLDivElement, MouseEvent>) => void); onFocus?: ((e: FocusEvent<HTMLDivElement, Element>) => void); onBlur: (e: FocusEvent<...>) => void; onKeyDown?: ((e: KeyboardEvent<...>) => void) | undefined; } | undefined",
        "required": false,
        "description": "Обработчики на враппер"
      },
      {
        "name": "onPickerClick",
        "type": "((event: MouseEvent<Element, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика на иконку календаря"
      },
      {
        "name": "Calendar",
        "type": "ForwardRefExoticComponent<CalendarDesktopProps & { title?: string; open: boolean; onClose?: (() => void); allowSelectionFromEmptyRange?: boolean | undefined; ... 5 more ...; resetButtonContent?: string | undefined; } & ... 5 more ... & RefAttributes<...>> | undefined",
        "required": false,
        "description": "Компонент календаря"
      },
      {
        "name": "calendarProps",
        "type": "Omit<ResponsiveCalendarProps, \"open\" | \"minDate\" | \"maxDate\" | \"onClose\">",
        "required": false,
        "defaultValue": "{}",
        "description": "Пропсы календаря"
      },
      {
        "name": "popoverProps",
        "type": "PopoverProps",
        "required": false,
        "description": "Пропсы поповера"
      },
      {
        "name": "onCalendarOpen",
        "type": "(() => void)",
        "required": false,
        "description": "Обработчик открытия календаря\n@deprecated Используйте {@link BaseUniversalDateInputProps.onCalendarOpenChange }"
      },
      {
        "name": "onCalendarClose",
        "type": "(() => void)",
        "required": false,
        "description": "Обработчик закрытия календаря\n@deprecated Используйте {@link BaseUniversalDateInputProps.onCalendarOpenChange }"
      },
      {
        "name": "calendarOpen",
        "type": "boolean",
        "required": false,
        "description": "Флаг, открыт ли календарь"
      },
      {
        "name": "onCalendarOpenChange",
        "type": "((open: boolean) => void)",
        "required": false,
        "description": "Обработчик изменения открытия календаря"
      },
      {
        "name": "size",
        "type": "\"s\" | \"m\" | \"l\" | \"xl\" | 40 | 48 | 56 | 64 | 72",
        "required": false,
        "description": "Размер компонента\n@description s, m, l, xl deprecated, используйте вместо них 48, 56, 64, 72 соответственно"
      },
      {
        "name": "type",
        "type": "\"number\" | \"email\" | \"money\" | \"password\" | \"tel\" | \"text\"",
        "required": false,
        "description": "Атрибут type"
      },
      {
        "name": "onClick",
        "type": "((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика по полю"
      },
      {
        "name": "onMouseDown",
        "type": "((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик MouseDown по полю"
      },
      {
        "name": "accept",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "alt",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "autoComplete",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "capture",
        "type": "boolean | \"user\" | \"environment\"",
        "required": false,
        "description": ""
      },
      {
        "name": "checked",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "crossOrigin",
        "type": "\"\" | \"anonymous\" | \"use-credentials\"",
        "required": false,
        "description": ""
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "form",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formAction",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formEncType",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formMethod",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formNoValidate",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "formTarget",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "height",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "list",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "max",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "maxLength",
        "type": "number",
        "required": false,
        "description": ""
      },
      {
        "name": "min",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "minLength",
        "type": "number",
        "required": false,
        "description": ""
      },
      {
        "name": "multiple",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "name",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "pattern",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "placeholder",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "readOnly",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "required",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "src",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "step",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "block",
        "type": "boolean",
        "required": false,
        "description": "Растягивает компонент на ширину контейнера"
      },
      {
        "name": "clear",
        "type": "boolean",
        "required": false,
        "description": "Крестик для очистки поля"
      },
      {
        "name": "colors",
        "type": "\"default\" | \"inverted\"",
        "required": false,
        "description": "Набор цветов для компонента"
      },
      {
        "name": "error",
        "type": "ReactNode",
        "required": false,
        "description": "Отображение ошибки"
      },
      {
        "name": "success",
        "type": "boolean",
        "required": false,
        "description": "Отображение иконки успеха"
      },
      {
        "name": "hint",
        "type": "ReactNode",
        "required": false,
        "description": "Текст подсказки"
      },
      {
        "name": "label",
        "type": "ReactNode",
        "required": false,
        "description": "Лейбл компонента"
      },
      {
        "name": "labelView",
        "type": "\"inner\" | \"outer\"",
        "required": false,
        "description": "Вид лейбла внутри / снаружи"
      },
      {
        "name": "leftAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот слева"
      },
      {
        "name": "rightAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот справа"
      },
      {
        "name": "leftAddonsProps",
        "type": "HTMLAttributes<HTMLDivElement>",
        "required": false,
        "description": "Свойства для обертки левых аддонов"
      },
      {
        "name": "rightAddonsProps",
        "type": "HTMLAttributes<HTMLDivElement>",
        "required": false,
        "description": "Свойства для обертки правых аддонов"
      },
      {
        "name": "bottomAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот под инпутом"
      },
      {
        "name": "fieldClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для поля"
      },
      {
        "name": "inputClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс инпута"
      },
      {
        "name": "labelClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для лейбла"
      },
      {
        "name": "addonsClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для аддонов"
      },
      {
        "name": "focusedClassName",
        "type": "string",
        "required": false,
        "description": "Класс, который будет установлен при фокусе"
      },
      {
        "name": "filledClassName",
        "type": "string",
        "required": false,
        "description": "Класс, который будет установлен, если в поле есть значение"
      },
      {
        "name": "onClear",
        "type": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик нажатия на кнопку очистки"
      },
      {
        "name": "dataTestId",
        "type": "string",
        "required": false,
        "description": "Идентификатор для систем автоматизированного тестирования.\nДля враппера используется модификатор -wrapper, календаря -calendar, поповера -popover"
      },
      {
        "name": "disableUserInput",
        "type": "boolean",
        "required": false,
        "description": "Запрещает ввод с клавиатуры"
      },
      {
        "name": "breakpoint",
        "type": "number",
        "required": false,
        "defaultValue": "1024",
        "description": "Контрольная точка, с нее начинается desktop версия"
      },
      {
        "name": "client",
        "type": "\"desktop\" | \"mobile\"",
        "required": false,
        "description": "Версия, которая будет использоваться при серверном рендеринге"
      },
      {
        "name": "defaultMatchMediaValue",
        "type": "boolean | (() => boolean)",
        "required": false,
        "description": "Значение по-умолчанию для хука useMatchMedia\n@deprecated Используйте client"
      },
      {
        "name": "autoCorrection",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "Автоматическое исправление ввода"
      },
      {
        "name": "minDate",
        "type": "number",
        "required": false,
        "defaultValue": "new Date(2124, 11, 31).getTime()",
        "description": "Минимальная дата, доступная для выбора (timestamp)"
      },
      {
        "name": "maxDate",
        "type": "number",
        "required": false,
        "defaultValue": "new Date(1900, 0, 1).getTime()",
        "description": "Максимальная дата, доступная для выбора (timestamp)"
      },
      {
        "name": "picker",
        "type": "boolean",
        "required": false,
        "description": "Открыть календарь при клике"
      },
      {
        "name": "onInputChange",
        "type": "((event: ChangeEvent<HTMLInputElement> | null, payload: { value: string; }) => void)",
        "required": false,
        "description": "Обработчик изменения значения в инпуте"
      },
      {
        "name": "wrapperClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс обертки"
      },
      {
        "name": "ref",
        "type": "Ref<HTMLInputElement>",
        "required": false,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom"
      },
      {
        "name": "key",
        "type": "Key | null",
        "required": false,
        "description": ""
      }
    ]
  },
  "MonthInput": {
    "description": "",
    "props": [
      {
        "name": "value",
        "type": "string",
        "required": false,
        "description": "Месяц"
      },
      {
        "name": "defaultValue",
        "type": "string",
        "required": false,
        "description": "Месяц по умолчанию"
      },
      {
        "name": "autoCorrection",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "Автоматическое исправление ввода"
      },
      {
        "name": "onInputChange",
        "type": "((event: ChangeEvent<HTMLInputElement> | null, payload: { value: string; }) => void)",
        "required": false,
        "description": "Обработчик изменения значения в инпуте"
      },
      {
        "name": "onChange",
        "type": "((value: string) => void)",
        "required": false,
        "description": "Обработчик изменения значения"
      },
      {
        "name": "size",
        "type": "\"s\" | \"m\" | \"l\" | \"xl\" | 40 | 48 | 56 | 64 | 72",
        "required": false,
        "description": "Размер компонента\n@description s, m, l, xl deprecated, используйте вместо них 48, 56, 64, 72 соответственно"
      },
      {
        "name": "type",
        "type": "\"number\" | \"email\" | \"money\" | \"password\" | \"tel\" | \"text\"",
        "required": false,
        "description": "Атрибут type"
      },
      {
        "name": "onClick",
        "type": "((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика по полю"
      },
      {
        "name": "onMouseDown",
        "type": "((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик MouseDown по полю"
      },
      {
        "name": "accept",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "alt",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "autoComplete",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "capture",
        "type": "boolean | \"user\" | \"environment\"",
        "required": false,
        "description": ""
      },
      {
        "name": "checked",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "crossOrigin",
        "type": "\"\" | \"anonymous\" | \"use-credentials\"",
        "required": false,
        "description": ""
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "form",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formAction",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formEncType",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formMethod",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formNoValidate",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "formTarget",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "height",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "list",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "max",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "maxLength",
        "type": "number",
        "required": false,
        "description": ""
      },
      {
        "name": "min",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "minLength",
        "type": "number",
        "required": false,
        "description": ""
      },
      {
        "name": "multiple",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "name",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "pattern",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "placeholder",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "readOnly",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "required",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "src",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "step",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "block",
        "type": "boolean",
        "required": false,
        "description": "Растягивает компонент на ширину контейнера"
      },
      {
        "name": "clear",
        "type": "boolean",
        "required": false,
        "description": "Крестик для очистки поля"
      },
      {
        "name": "colors",
        "type": "\"default\" | \"inverted\"",
        "required": false,
        "description": "Набор цветов для компонента"
      },
      {
        "name": "error",
        "type": "ReactNode",
        "required": false,
        "description": "Отображение ошибки"
      },
      {
        "name": "success",
        "type": "boolean",
        "required": false,
        "description": "Отображение иконки успеха"
      },
      {
        "name": "hint",
        "type": "ReactNode",
        "required": false,
        "description": "Текст подсказки"
      },
      {
        "name": "label",
        "type": "ReactNode",
        "required": false,
        "description": "Лейбл компонента"
      },
      {
        "name": "labelView",
        "type": "\"inner\" | \"outer\"",
        "required": false,
        "description": "Вид лейбла внутри / снаружи"
      },
      {
        "name": "wrapperRef",
        "type": "Ref<HTMLDivElement>",
        "required": false,
        "description": "Ref для обертки input"
      },
      {
        "name": "leftAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот слева"
      },
      {
        "name": "rightAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот справа"
      },
      {
        "name": "leftAddonsProps",
        "type": "HTMLAttributes<HTMLDivElement>",
        "required": false,
        "description": "Свойства для обертки левых аддонов"
      },
      {
        "name": "rightAddonsProps",
        "type": "HTMLAttributes<HTMLDivElement>",
        "required": false,
        "description": "Свойства для обертки правых аддонов"
      },
      {
        "name": "bottomAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот под инпутом"
      },
      {
        "name": "fieldClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для поля"
      },
      {
        "name": "inputClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс инпута"
      },
      {
        "name": "labelClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для лейбла"
      },
      {
        "name": "addonsClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для аддонов"
      },
      {
        "name": "focusedClassName",
        "type": "string",
        "required": false,
        "description": "Класс, который будет установлен при фокусе"
      },
      {
        "name": "filledClassName",
        "type": "string",
        "required": false,
        "description": "Класс, который будет установлен, если в поле есть значение"
      },
      {
        "name": "onClear",
        "type": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик нажатия на кнопку очистки"
      },
      {
        "name": "dataTestId",
        "type": "string",
        "required": false,
        "description": "Идентификатор для систем автоматизированного тестирования.\nДля FormControl используется модификатор -form-control"
      },
      {
        "name": "disableUserInput",
        "type": "boolean",
        "required": false,
        "description": "Запрещает ввод с клавиатуры"
      },
      {
        "name": "breakpoint",
        "type": "number",
        "required": false,
        "defaultValue": "1024",
        "description": "Контрольная точка, с нее начинается desktop версия"
      },
      {
        "name": "client",
        "type": "\"desktop\" | \"mobile\"",
        "required": false,
        "description": "Версия, которая будет использоваться при серверном рендеринге"
      },
      {
        "name": "defaultMatchMediaValue",
        "type": "boolean | (() => boolean)",
        "required": false,
        "description": "Значение по-умолчанию для хука useMatchMedia\n@deprecated Используйте client"
      },
      {
        "name": "ref",
        "type": "Ref<HTMLInputElement>",
        "required": false,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom"
      },
      {
        "name": "key",
        "type": "Key | null",
        "required": false,
        "description": ""
      }
    ]
  },
  "TimeInput": {
    "description": "",
    "props": [
      {
        "name": "value",
        "type": "string",
        "required": false,
        "description": "Время"
      },
      {
        "name": "defaultValue",
        "type": "string",
        "required": false,
        "description": "Время по умолчанию"
      },
      {
        "name": "autoCorrection",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "Автоматическое исправление ввода"
      },
      {
        "name": "onInputChange",
        "type": "((event: ChangeEvent<HTMLInputElement> | null, payload: { value: string; }) => void)",
        "required": false,
        "description": "Обработчик изменения значения в инпуте"
      },
      {
        "name": "onChange",
        "type": "((value: string) => void)",
        "required": false,
        "description": "Обработчик изменения значения"
      },
      {
        "name": "size",
        "type": "\"s\" | \"m\" | \"l\" | \"xl\" | 40 | 48 | 56 | 64 | 72",
        "required": false,
        "description": "Размер компонента\n@description s, m, l, xl deprecated, используйте вместо них 48, 56, 64, 72 соответственно"
      },
      {
        "name": "type",
        "type": "\"number\" | \"email\" | \"money\" | \"password\" | \"tel\" | \"text\"",
        "required": false,
        "description": "Атрибут type"
      },
      {
        "name": "onClick",
        "type": "((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика по полю"
      },
      {
        "name": "onMouseDown",
        "type": "((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик MouseDown по полю"
      },
      {
        "name": "accept",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "alt",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "autoComplete",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "capture",
        "type": "boolean | \"user\" | \"environment\"",
        "required": false,
        "description": ""
      },
      {
        "name": "checked",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "crossOrigin",
        "type": "\"\" | \"anonymous\" | \"use-credentials\"",
        "required": false,
        "description": ""
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "form",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formAction",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formEncType",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formMethod",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formNoValidate",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "formTarget",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "height",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "list",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "max",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "maxLength",
        "type": "number",
        "required": false,
        "description": ""
      },
      {
        "name": "min",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "minLength",
        "type": "number",
        "required": false,
        "description": ""
      },
      {
        "name": "multiple",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "name",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "pattern",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "placeholder",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "readOnly",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "required",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "src",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "step",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "block",
        "type": "boolean",
        "required": false,
        "description": "Растягивает компонент на ширину контейнера"
      },
      {
        "name": "clear",
        "type": "boolean",
        "required": false,
        "description": "Крестик для очистки поля"
      },
      {
        "name": "colors",
        "type": "\"default\" | \"inverted\"",
        "required": false,
        "description": "Набор цветов для компонента"
      },
      {
        "name": "error",
        "type": "ReactNode",
        "required": false,
        "description": "Отображение ошибки"
      },
      {
        "name": "success",
        "type": "boolean",
        "required": false,
        "description": "Отображение иконки успеха"
      },
      {
        "name": "hint",
        "type": "ReactNode",
        "required": false,
        "description": "Текст подсказки"
      },
      {
        "name": "label",
        "type": "ReactNode",
        "required": false,
        "description": "Лейбл компонента"
      },
      {
        "name": "labelView",
        "type": "\"inner\" | \"outer\"",
        "required": false,
        "description": "Вид лейбла внутри / снаружи"
      },
      {
        "name": "wrapperRef",
        "type": "Ref<HTMLDivElement>",
        "required": false,
        "description": "Ref для обертки input"
      },
      {
        "name": "leftAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот слева"
      },
      {
        "name": "rightAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот справа"
      },
      {
        "name": "leftAddonsProps",
        "type": "HTMLAttributes<HTMLDivElement>",
        "required": false,
        "description": "Свойства для обертки левых аддонов"
      },
      {
        "name": "rightAddonsProps",
        "type": "HTMLAttributes<HTMLDivElement>",
        "required": false,
        "description": "Свойства для обертки правых аддонов"
      },
      {
        "name": "bottomAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот под инпутом"
      },
      {
        "name": "fieldClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для поля"
      },
      {
        "name": "inputClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс инпута"
      },
      {
        "name": "labelClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для лейбла"
      },
      {
        "name": "addonsClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для аддонов"
      },
      {
        "name": "focusedClassName",
        "type": "string",
        "required": false,
        "description": "Класс, который будет установлен при фокусе"
      },
      {
        "name": "filledClassName",
        "type": "string",
        "required": false,
        "description": "Класс, который будет установлен, если в поле есть значение"
      },
      {
        "name": "onClear",
        "type": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик нажатия на кнопку очистки"
      },
      {
        "name": "dataTestId",
        "type": "string",
        "required": false,
        "description": "Идентификатор для систем автоматизированного тестирования.\nДля FormControl используется модификатор -form-control"
      },
      {
        "name": "disableUserInput",
        "type": "boolean",
        "required": false,
        "description": "Запрещает ввод с клавиатуры"
      },
      {
        "name": "breakpoint",
        "type": "number",
        "required": false,
        "defaultValue": "1024",
        "description": "Контрольная точка, с нее начинается desktop версия"
      },
      {
        "name": "client",
        "type": "\"desktop\" | \"mobile\"",
        "required": false,
        "description": "Версия, которая будет использоваться при серверном рендеринге"
      },
      {
        "name": "defaultMatchMediaValue",
        "type": "boolean | (() => boolean)",
        "required": false,
        "description": "Значение по-умолчанию для хука useMatchMedia\n@deprecated Используйте client"
      },
      {
        "name": "ref",
        "type": "Ref<HTMLInputElement>",
        "required": false,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom"
      },
      {
        "name": "key",
        "type": "Key | null",
        "required": false,
        "description": ""
      }
    ]
  },
  "UniversalDateInputDesktop": {
    "description": "",
    "props": [
      {
        "name": "Calendar",
        "type": "ForwardRefExoticComponent<CalendarDesktopProps & { title?: string; open: boolean; onClose?: (() => void); allowSelectionFromEmptyRange?: boolean | undefined; ... 5 more ...; resetButtonContent?: string | undefined; } & ... 5 more ... & RefAttributes<...>> | undefined",
        "required": false,
        "description": "Компонент календаря"
      },
      {
        "name": "size",
        "type": "\"s\" | \"m\" | \"l\" | \"xl\" | 40 | 48 | 56 | 64 | 72",
        "required": false,
        "description": "Размер компонента\n@description s, m, l, xl deprecated, используйте вместо них 48, 56, 64, 72 соответственно"
      },
      {
        "name": "type",
        "type": "\"number\" | \"email\" | \"money\" | \"password\" | \"tel\" | \"text\"",
        "required": false,
        "description": "Атрибут type"
      },
      {
        "name": "value",
        "type": "string | number | Date | { dateFrom: number | Date | null; dateTo: number | Date | null; } | (string & Date) | (number & Date) | (Date & string) | ... 8 more ...",
        "required": false,
        "description": "Дата\nДиапазон дат\nВремя"
      },
      {
        "name": "defaultValue",
        "type": "string | number | Date | { dateFrom: number | Date; dateTo: number | Date; } | (string & Date) | (number & Date) | (Date & string) | (Date & number) | ... 6 more ...",
        "required": false,
        "description": "Дата по умолчанию\nДиапазон дат по умолчанию\nВремя по умолчанию"
      },
      {
        "name": "onChange",
        "type": "((((date: Date | null, value: string) => void) | ((range: { dateFrom: Date | null; dateTo: Date | null; }, value: string) => void) | ((value: string) => void)) & ((date: Date | null, value: string) => void)) | ((((date: Date | null, value: string) => void) | ... 1 more ... | ((value: string) => void)) & ((range: { ....",
        "required": false,
        "description": "Обработчик изменения значения"
      },
      {
        "name": "onClick",
        "type": "((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика по полю"
      },
      {
        "name": "onMouseDown",
        "type": "((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик MouseDown по полю"
      },
      {
        "name": "accept",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "alt",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "autoComplete",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "capture",
        "type": "boolean | \"user\" | \"environment\"",
        "required": false,
        "description": ""
      },
      {
        "name": "checked",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "crossOrigin",
        "type": "\"\" | \"anonymous\" | \"use-credentials\"",
        "required": false,
        "description": ""
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "form",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formAction",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formEncType",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formMethod",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formNoValidate",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "formTarget",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "height",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "list",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "max",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "maxLength",
        "type": "number",
        "required": false,
        "description": ""
      },
      {
        "name": "min",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "minLength",
        "type": "number",
        "required": false,
        "description": ""
      },
      {
        "name": "multiple",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "name",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "pattern",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "placeholder",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "readOnly",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "required",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "src",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "step",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "block",
        "type": "boolean",
        "required": false,
        "description": "Растягивает компонент на ширину контейнера"
      },
      {
        "name": "clear",
        "type": "boolean",
        "required": false,
        "description": "Крестик для очистки поля"
      },
      {
        "name": "colors",
        "type": "\"default\" | \"inverted\"",
        "required": false,
        "description": "Набор цветов для компонента"
      },
      {
        "name": "error",
        "type": "ReactNode",
        "required": false,
        "description": "Отображение ошибки"
      },
      {
        "name": "success",
        "type": "boolean",
        "required": false,
        "description": "Отображение иконки успеха"
      },
      {
        "name": "hint",
        "type": "ReactNode",
        "required": false,
        "description": "Текст подсказки"
      },
      {
        "name": "label",
        "type": "ReactNode",
        "required": false,
        "description": "Лейбл компонента"
      },
      {
        "name": "labelView",
        "type": "\"inner\" | \"outer\"",
        "required": false,
        "description": "Вид лейбла внутри / снаружи"
      },
      {
        "name": "leftAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот слева"
      },
      {
        "name": "rightAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот справа"
      },
      {
        "name": "leftAddonsProps",
        "type": "HTMLAttributes<HTMLDivElement>",
        "required": false,
        "description": "Свойства для обертки левых аддонов"
      },
      {
        "name": "rightAddonsProps",
        "type": "HTMLAttributes<HTMLDivElement>",
        "required": false,
        "description": "Свойства для обертки правых аддонов"
      },
      {
        "name": "bottomAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот под инпутом"
      },
      {
        "name": "fieldClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для поля"
      },
      {
        "name": "inputClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс инпута"
      },
      {
        "name": "labelClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для лейбла"
      },
      {
        "name": "addonsClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для аддонов"
      },
      {
        "name": "focusedClassName",
        "type": "string",
        "required": false,
        "description": "Класс, который будет установлен при фокусе"
      },
      {
        "name": "filledClassName",
        "type": "string",
        "required": false,
        "description": "Класс, который будет установлен, если в поле есть значение"
      },
      {
        "name": "onClear",
        "type": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик нажатия на кнопку очистки"
      },
      {
        "name": "dataTestId",
        "type": "string",
        "required": false,
        "description": "Идентификатор для систем автоматизированного тестирования.\nДля враппера используется модификатор -wrapper, календаря -calendar, поповера -popover"
      },
      {
        "name": "disableUserInput",
        "type": "boolean",
        "required": false,
        "description": "Запрещает ввод с клавиатуры"
      },
      {
        "name": "client",
        "type": "\"desktop\" | \"mobile\"",
        "required": false,
        "description": "Версия, которая будет использоваться при серверном рендеринге"
      },
      {
        "name": "autoCorrection",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "Автоматическое исправление ввода"
      },
      {
        "name": "minDate",
        "type": "number",
        "required": false,
        "description": "Минимальная дата, доступная для выбора (timestamp)"
      },
      {
        "name": "maxDate",
        "type": "number",
        "required": false,
        "description": "Максимальная дата, доступная для выбора (timestamp)"
      },
      {
        "name": "view",
        "type": "\"date\" | \"date-time\" | \"date-range\" | \"time\"",
        "required": true,
        "description": "Вид компонента"
      },
      {
        "name": "picker",
        "type": "boolean",
        "required": false,
        "description": "Открыть календарь при клике"
      },
      {
        "name": "onInputChange",
        "type": "((event: ChangeEvent<HTMLInputElement> | null, payload: { value: string; }) => void)",
        "required": false,
        "description": "Обработчик изменения значения в инпуте"
      },
      {
        "name": "calendarProps",
        "type": "Omit<ResponsiveCalendarProps, \"open\" | \"minDate\" | \"maxDate\" | \"onClose\">",
        "required": false,
        "description": "Пропсы календаря"
      },
      {
        "name": "popoverProps",
        "type": "PopoverProps",
        "required": false,
        "description": "Пропсы поповера"
      },
      {
        "name": "onCalendarOpen",
        "type": "(() => void)",
        "required": false,
        "description": "Обработчик открытия календаря\n@deprecated Используйте {@link BaseUniversalDateInputProps.onCalendarOpenChange }"
      },
      {
        "name": "onCalendarClose",
        "type": "(() => void)",
        "required": false,
        "description": "Обработчик закрытия календаря\n@deprecated Используйте {@link BaseUniversalDateInputProps.onCalendarOpenChange }"
      },
      {
        "name": "calendarOpen",
        "type": "boolean",
        "required": false,
        "description": "Флаг, открыт ли календарь"
      },
      {
        "name": "onCalendarOpenChange",
        "type": "((open: boolean) => void)",
        "required": false,
        "description": "Обработчик изменения открытия календаря"
      },
      {
        "name": "wrapperClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс обертки"
      },
      {
        "name": "ref",
        "type": "Ref<HTMLInputElement>",
        "required": false,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom"
      },
      {
        "name": "key",
        "type": "Key | null",
        "required": false,
        "description": ""
      },
      {
        "name": "rangeBehavior",
        "type": "\"clarification\" | \"reset\"",
        "required": false,
        "defaultValue": "clarification",
        "description": "Тип выбора границ в календаре"
      }
    ]
  },
  "UniversalDateInputMobile": {
    "description": "",
    "props": [
      {
        "name": "Calendar",
        "type": "ForwardRefExoticComponent<CalendarDesktopProps & { title?: string; open: boolean; onClose?: (() => void); allowSelectionFromEmptyRange?: boolean | undefined; ... 5 more ...; resetButtonContent?: string | undefined; } & ... 5 more ... & RefAttributes<...>> | undefined",
        "required": false,
        "description": "Компонент календаря"
      },
      {
        "name": "size",
        "type": "\"s\" | \"m\" | \"l\" | \"xl\" | 40 | 48 | 56 | 64 | 72",
        "required": false,
        "description": "Размер компонента\n@description s, m, l, xl deprecated, используйте вместо них 48, 56, 64, 72 соответственно"
      },
      {
        "name": "type",
        "type": "\"number\" | \"email\" | \"money\" | \"password\" | \"tel\" | \"text\"",
        "required": false,
        "description": "Атрибут type"
      },
      {
        "name": "value",
        "type": "string | number | Date | { dateFrom: number | Date | null; dateTo: number | Date | null; } | (string & Date) | (number & Date) | (Date & string) | ... 8 more ...",
        "required": false,
        "description": "Дата\nДиапазон дат\nВремя"
      },
      {
        "name": "defaultValue",
        "type": "string | number | Date | { dateFrom: number | Date; dateTo: number | Date; } | (string & Date) | (number & Date) | (Date & string) | (Date & number) | ... 6 more ...",
        "required": false,
        "description": "Дата по умолчанию\nДиапазон дат по умолчанию\nВремя по умолчанию"
      },
      {
        "name": "onChange",
        "type": "((((date: Date | null, value: string) => void) | ((range: { dateFrom: Date | null; dateTo: Date | null; }, value: string) => void) | ((value: string) => void)) & ((date: Date | null, value: string) => void)) | ((((date: Date | null, value: string) => void) | ... 1 more ... | ((value: string) => void)) & ((range: { ....",
        "required": false,
        "description": "Обработчик изменения значения"
      },
      {
        "name": "onClick",
        "type": "((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика по полю"
      },
      {
        "name": "onMouseDown",
        "type": "((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик MouseDown по полю"
      },
      {
        "name": "accept",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "alt",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "autoComplete",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "capture",
        "type": "boolean | \"user\" | \"environment\"",
        "required": false,
        "description": ""
      },
      {
        "name": "checked",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "crossOrigin",
        "type": "\"\" | \"anonymous\" | \"use-credentials\"",
        "required": false,
        "description": ""
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "form",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formAction",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formEncType",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formMethod",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formNoValidate",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "formTarget",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "height",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "list",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "max",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "maxLength",
        "type": "number",
        "required": false,
        "description": ""
      },
      {
        "name": "min",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "minLength",
        "type": "number",
        "required": false,
        "description": ""
      },
      {
        "name": "multiple",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "name",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "pattern",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "placeholder",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "readOnly",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "required",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "src",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "step",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "block",
        "type": "boolean",
        "required": false,
        "description": "Растягивает компонент на ширину контейнера"
      },
      {
        "name": "clear",
        "type": "boolean",
        "required": false,
        "description": "Крестик для очистки поля"
      },
      {
        "name": "colors",
        "type": "\"default\" | \"inverted\"",
        "required": false,
        "description": "Набор цветов для компонента"
      },
      {
        "name": "error",
        "type": "ReactNode",
        "required": false,
        "description": "Отображение ошибки"
      },
      {
        "name": "success",
        "type": "boolean",
        "required": false,
        "description": "Отображение иконки успеха"
      },
      {
        "name": "hint",
        "type": "ReactNode",
        "required": false,
        "description": "Текст подсказки"
      },
      {
        "name": "label",
        "type": "ReactNode",
        "required": false,
        "description": "Лейбл компонента"
      },
      {
        "name": "labelView",
        "type": "\"inner\" | \"outer\"",
        "required": false,
        "description": "Вид лейбла внутри / снаружи"
      },
      {
        "name": "leftAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот слева"
      },
      {
        "name": "rightAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот справа"
      },
      {
        "name": "leftAddonsProps",
        "type": "HTMLAttributes<HTMLDivElement>",
        "required": false,
        "description": "Свойства для обертки левых аддонов"
      },
      {
        "name": "rightAddonsProps",
        "type": "HTMLAttributes<HTMLDivElement>",
        "required": false,
        "description": "Свойства для обертки правых аддонов"
      },
      {
        "name": "bottomAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот под инпутом"
      },
      {
        "name": "fieldClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для поля"
      },
      {
        "name": "inputClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс инпута"
      },
      {
        "name": "labelClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для лейбла"
      },
      {
        "name": "addonsClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для аддонов"
      },
      {
        "name": "focusedClassName",
        "type": "string",
        "required": false,
        "description": "Класс, который будет установлен при фокусе"
      },
      {
        "name": "filledClassName",
        "type": "string",
        "required": false,
        "description": "Класс, который будет установлен, если в поле есть значение"
      },
      {
        "name": "onClear",
        "type": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик нажатия на кнопку очистки"
      },
      {
        "name": "dataTestId",
        "type": "string",
        "required": false,
        "description": "Идентификатор для систем автоматизированного тестирования.\nДля враппера используется модификатор -wrapper, календаря -calendar, поповера -popover"
      },
      {
        "name": "disableUserInput",
        "type": "boolean",
        "required": false,
        "description": "Запрещает ввод с клавиатуры"
      },
      {
        "name": "client",
        "type": "\"desktop\" | \"mobile\"",
        "required": false,
        "description": "Версия, которая будет использоваться при серверном рендеринге"
      },
      {
        "name": "autoCorrection",
        "type": "boolean",
        "required": false,
        "defaultValue": "true",
        "description": "Автоматическое исправление ввода"
      },
      {
        "name": "minDate",
        "type": "number",
        "required": false,
        "description": "Минимальная дата, доступная для выбора (timestamp)"
      },
      {
        "name": "maxDate",
        "type": "number",
        "required": false,
        "description": "Максимальная дата, доступная для выбора (timestamp)"
      },
      {
        "name": "view",
        "type": "\"date\" | \"date-time\" | \"date-range\" | \"time\"",
        "required": true,
        "description": "Вид компонента"
      },
      {
        "name": "picker",
        "type": "boolean",
        "required": false,
        "description": "Открыть календарь при клике"
      },
      {
        "name": "onInputChange",
        "type": "((event: ChangeEvent<HTMLInputElement> | null, payload: { value: string; }) => void)",
        "required": false,
        "description": "Обработчик изменения значения в инпуте"
      },
      {
        "name": "calendarProps",
        "type": "Omit<ResponsiveCalendarProps, \"open\" | \"minDate\" | \"maxDate\" | \"onClose\">",
        "required": false,
        "description": "Пропсы календаря"
      },
      {
        "name": "popoverProps",
        "type": "PopoverProps",
        "required": false,
        "description": "Пропсы поповера"
      },
      {
        "name": "onCalendarOpen",
        "type": "(() => void)",
        "required": false,
        "description": "Обработчик открытия календаря\n@deprecated Используйте {@link BaseUniversalDateInputProps.onCalendarOpenChange }"
      },
      {
        "name": "onCalendarClose",
        "type": "(() => void)",
        "required": false,
        "description": "Обработчик закрытия календаря\n@deprecated Используйте {@link BaseUniversalDateInputProps.onCalendarOpenChange }"
      },
      {
        "name": "calendarOpen",
        "type": "boolean",
        "required": false,
        "description": "Флаг, открыт ли календарь"
      },
      {
        "name": "onCalendarOpenChange",
        "type": "((open: boolean) => void)",
        "required": false,
        "description": "Обработчик изменения открытия календаря"
      },
      {
        "name": "wrapperClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс обертки"
      },
      {
        "name": "ref",
        "type": "Ref<HTMLInputElement>",
        "required": false,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom"
      },
      {
        "name": "key",
        "type": "Key | null",
        "required": false,
        "description": ""
      },
      {
        "name": "rangeBehavior",
        "type": "\"clarification\" | \"reset\"",
        "required": false,
        "defaultValue": "clarification",
        "description": "Тип выбора границ в календаре"
      }
    ]
  }
}