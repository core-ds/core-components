{
  "SliderInput": {
    "description": "",
    "props": [
      {
        "name": "defaultValue",
        "type": "string",
        "required": false,
        "description": "Начальное значение поля"
      },
      {
        "name": "onClick",
        "type": "((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик клика по полю"
      },
      {
        "name": "onMouseDown",
        "type": "((event: MouseEvent<HTMLDivElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик MouseDown по полю"
      },
      {
        "name": "accept",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "alt",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "autoComplete",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "capture",
        "type": "boolean | \"user\" | \"environment\"",
        "required": false,
        "description": ""
      },
      {
        "name": "checked",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "crossOrigin",
        "type": "\"\" | \"anonymous\" | \"use-credentials\"",
        "required": false,
        "description": ""
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "form",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formAction",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formEncType",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formMethod",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "formNoValidate",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "formTarget",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "height",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "list",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "maxLength",
        "type": "number",
        "required": false,
        "description": ""
      },
      {
        "name": "minLength",
        "type": "number",
        "required": false,
        "description": ""
      },
      {
        "name": "multiple",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "name",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "pattern",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "placeholder",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "readOnly",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "required",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "src",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "description": ""
      },
      {
        "name": "block",
        "type": "boolean",
        "required": false,
        "description": "Растягивает компонент на ширину контейнера"
      },
      {
        "name": "clear",
        "type": "boolean",
        "required": false,
        "description": "Крестик для очистки поля"
      },
      {
        "name": "colors",
        "type": "\"default\" | \"inverted\"",
        "required": false,
        "description": "Набор цветов для компонента"
      },
      {
        "name": "error",
        "type": "ReactNode",
        "required": false,
        "description": "Отображение ошибки"
      },
      {
        "name": "success",
        "type": "boolean",
        "required": false,
        "description": "Отображение иконки успеха"
      },
      {
        "name": "hint",
        "type": "ReactNode",
        "required": false,
        "description": "Текст подсказки"
      },
      {
        "name": "label",
        "type": "ReactNode",
        "required": false,
        "description": "Лейбл компонента"
      },
      {
        "name": "labelView",
        "type": "\"inner\" | \"outer\"",
        "required": false,
        "description": "Вид лейбла внутри / снаружи"
      },
      {
        "name": "wrapperRef",
        "type": "Ref<HTMLDivElement>",
        "required": false,
        "description": "Ref для обертки input"
      },
      {
        "name": "leftAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот слева"
      },
      {
        "name": "rightAddons",
        "type": "ReactNode",
        "required": false,
        "description": "Слот справа"
      },
      {
        "name": "leftAddonsProps",
        "type": "HTMLAttributes<HTMLDivElement>",
        "required": false,
        "description": "Свойства для обертки левых аддонов"
      },
      {
        "name": "rightAddonsProps",
        "type": "HTMLAttributes<HTMLDivElement>",
        "required": false,
        "description": "Свойства для обертки правых аддонов"
      },
      {
        "name": "fieldClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для поля"
      },
      {
        "name": "inputClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс инпута\nКласс для инпута"
      },
      {
        "name": "labelClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для лейбла"
      },
      {
        "name": "addonsClassName",
        "type": "string",
        "required": false,
        "description": "Дополнительный класс для аддонов"
      },
      {
        "name": "focusedClassName",
        "type": "string",
        "required": false,
        "description": "Класс, который будет установлен при фокусе"
      },
      {
        "name": "filledClassName",
        "type": "string",
        "required": false,
        "description": "Класс, который будет установлен, если в поле есть значение"
      },
      {
        "name": "onClear",
        "type": "((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void)",
        "required": false,
        "description": "Обработчик нажатия на кнопку очистки"
      },
      {
        "name": "dataTestId",
        "type": "string",
        "required": false,
        "description": "Идентификатор для систем автоматизированного тестирования.\nДля FormControl используется модификатор -form-control\nИдентификатор для систем автоматизированного тестирования"
      },
      {
        "name": "disableUserInput",
        "type": "boolean",
        "required": false,
        "description": "Запрещает ввод с клавиатуры"
      },
      {
        "name": "breakpoint",
        "type": "number",
        "required": false,
        "defaultValue": "1024",
        "description": "Контрольная точка, с нее начинается desktop версия"
      },
      {
        "name": "client",
        "type": "\"desktop\" | \"mobile\"",
        "required": false,
        "description": "Версия, которая будет использоваться при серверном рендеринге"
      },
      {
        "name": "defaultMatchMediaValue",
        "type": "boolean | (() => boolean)",
        "required": false,
        "description": "Значение по-умолчанию для хука useMatchMedia\n@deprecated Используйте client"
      },
      {
        "name": "size",
        "type": "\"s\" | \"m\" | \"l\" | \"xl\" | 48 | 56 | 64 | 72",
        "required": false,
        "defaultValue": 48,
        "description": "Размер компонента\n@description s, m, l, xl deprecated, используйте вместо них 48, 56, 64, 72 соответственно"
      },
      {
        "name": "min",
        "type": "number",
        "required": false,
        "defaultValue": 0,
        "description": "Мин. допустимое число"
      },
      {
        "name": "max",
        "type": "number",
        "required": false,
        "defaultValue": 100,
        "description": "Макс. допустимое число"
      },
      {
        "name": "lockLimit",
        "type": "boolean",
        "required": false,
        "defaultValue": false,
        "description": "Предотвращает ввод числа если оно больше или меньше допустимого.\nПри событии blur установится число по верхней границе, если оно больше допустимого, и наоборот - по нижней границе, если число меньше допустимого.\n@deprecated Обработайте установку лимитов самостоятельно в событии onBlur. Пропс будет удален в версии core-components@49.0"
      },
      {
        "name": "steps",
        "type": "ReactNode[]",
        "required": false,
        "defaultValue": "[]",
        "description": "Массив подписей к слайдеру"
      },
      {
        "name": "step",
        "type": "number",
        "required": false,
        "defaultValue": 1,
        "description": "Шаг (должен нацело делить отрезок между мин и макс)"
      },
      {
        "name": "pips",
        "type": "Pips",
        "required": false,
        "description": "Отображение подписей\nhttps://refreshless.com/nouislider/pips/"
      },
      {
        "name": "range",
        "type": "RangeOptions",
        "required": false,
        "description": "Настройка шагов\nhttps://refreshless.com/nouislider/pips/#section-range"
      },
      {
        "name": "value",
        "type": "string | number",
        "required": false,
        "defaultValue": "",
        "description": "Значение инпута"
      },
      {
        "name": "sliderValue",
        "type": "number",
        "required": false,
        "defaultValue": null,
        "description": "Значение слайдера"
      },
      {
        "name": "info",
        "type": "ReactNode",
        "required": false,
        "description": "Дополнительная информация в правой части поля"
      },
      {
        "name": "Input",
        "type": "ComponentType<Omit<InputProps, \"value\" | \"onChange\">>",
        "required": false,
        "defaultValue": "forwardRef<HTMLInputElement, InputProps>(\n    (\n        {\n            breakpoint,\n            client,\n            defaultMatchMediaValue = client === undefined ? undefined : client === 'desktop',\n            ...restProps\n        },\n        ref,\n    ) => {\n        const isDesktop = useIsDesktop(breakpoint, defaultMatchMediaValue);\n\n        const Component = isDesktop ? InputDesktop : InputMobile;\n\n        return <Component ref={ref} {...restProps} />;\n    },\n)",
        "description": "Компонент поля ввода"
      },
      {
        "name": "customInputProps",
        "type": "Record<string, unknown>",
        "required": false,
        "defaultValue": "{}",
        "description": "Кастомные пропсы для поля ввода"
      },
      {
        "name": "sliderClassName",
        "type": "string",
        "required": false,
        "description": "Класс для слайдера"
      },
      {
        "name": "stepsClassName",
        "type": "string",
        "required": false,
        "description": "Класс для шагов"
      },
      {
        "name": "onChange",
        "type": "OnChangeType",
        "required": false,
        "description": "Обработчик изменения значения через слайдер или поле ввода"
      },
      {
        "name": "onInputChange",
        "type": "OnInputChangeType",
        "required": false,
        "description": "Обработчик ввода"
      },
      {
        "name": "onSliderChange",
        "type": "((payload: { value: number; }) => void)",
        "required": false,
        "description": "Обработчик изменения слайдера"
      },
      {
        "name": "onSliderStart",
        "type": "(() => void)",
        "required": false,
        "description": "Обработчик начала перетаскивания ползунка"
      },
      {
        "name": "onSliderEnd",
        "type": "(() => void)",
        "required": false,
        "description": "Обработчик окончания перетаскивания ползунка"
      },
      {
        "name": "ref",
        "type": "Ref<HTMLInputElement>",
        "required": false,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n@see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom"
      },
      {
        "name": "key",
        "type": "Key | null",
        "required": false,
        "description": ""
      }
    ]
  }
}